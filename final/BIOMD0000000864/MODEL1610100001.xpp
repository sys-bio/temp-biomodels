
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Proctor2017- Role of microRNAs in osteoarthritis (Negative Feedback By MicroRNA)
#
# is http://identifiers.org/biomodels.db/MODEL1610100001
# isDescribedBy http://identifiers.org/pubmed/29095952
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = cell, name = cell, constant
par cell=1.0

# Parameter:   id =  kbinTF1miRgene, name = kbinTF1miRgene, constant
par kbinTF1mi=0.005

# Parameter:   id =  kdegMiR, name = kdegMiR, constant
par kdegMiR=0.008

# Parameter:   id =  kdegTF1, name = kdegTF1, constant
par kdegTF1=0.005

# Parameter:   id =  kdegTF1mRNA, name = kdegTF1mRNA, constant
par kdegTF1mR=1.0E-4

# Parameter:   id =  kdegTF1mRNAbyMiR, name = kdegTF1mRNAbyMiR, constant
par kdegTF1_1=0.001

# Parameter:   id =  krelTF1miRgene, name = krelTF1miRgene, constant
par krelTF1mi=5.0

# Parameter:   id =  ksynMiR, name = ksynMiR, constant
par ksynMiR=5.0

# Parameter:   id =  ksynTF1, name = ksynTF1, constant
par ksynTF1=0.05

# Parameter:   id =  ksynTF1mRNA, name = ksynTF1mRNA, constant
par ksynTF1mR=10.0

# Reaction: id = miR_gene_TF1_binding

miR_gen_1=kbinTF1mi*miR_gene*TF1

# Reaction: id = miR_gene_TF1_release

miR_gen_2=krelTF1mi*miR_gene_

# Reaction: id = miR_synthesis

miR_synth=ksynMiR*miR_gene_

# Reaction: id = miR_degradation

miR_degra=kdegMiR*miR

# Reaction: id = TF1_transcription

TF1_trans=ksynTF1mR*Signal

# Reaction: id = TF1_mRNA_degradation

TF1_mRNA_=kdegTF1mR*TF1_mRNA

# Reaction: id = TF1_mRNA_degradation_via_miR

TF1_mRN_1=kdegTF1_1*TF1_mRNA*miR

# Reaction: id = TF1_translation

TF1_tra_1=ksynTF1*TF1_mRNA

# Reaction: id = TF1_degradation

TF1_degra=kdegTF1*TF1

# Species:   id = miR, name = miR, affected by kineticLaw

init miR=0.0
dmiR/dt=( 1.0 * miR_synth) + (-1.0 * miR_degra) + (-1.0 * TF1_mRN_1) + ( 1.0 * TF1_mRN_1)

# Species:   id = miR_gene, name = miR_gene, affected by kineticLaw

init miR_gene=2.0
dmiR_gene/dt=(-1.0 * miR_gen_1) + ( 1.0 * miR_gen_2)

# Species:   id = miR_gene_TF1, name = miR_gene_TF1, affected by kineticLaw

par miR_gene_=0.0
aux miR_gene_=miR_gene_
dmiR_gene_/dt=( 1.0 * miR_gen_1) + (-1.0 * miR_gen_2) + (-1.0 * miR_synth) + ( 1.0 * miR_synth)

# Species:   id = Signal, name = Signal, affected by kineticLaw
# Species is changed by 1 event(s)
init Signal=0.0
dSignal/dt=(-1.0 * TF1_trans) + ( 1.0 * TF1_trans)

# Species:   id = TF1, name = TF1, affected by kineticLaw

init TF1=0.0
dTF1/dt=(-1.0 * miR_gen_1) + ( 1.0 * miR_gen_2) + ( 1.0 * TF1_tra_1) + (-1.0 * TF1_degra)

# Species:   id = TF1_mRNA, name = TF1_mRNA, affected by kineticLaw

init TF1_mRNA=0.0
dTF1_mRNA/dt=( 1.0 * TF1_trans) + (-1.0 * TF1_mRNA_) + (-1.0 * TF1_mRN_1) + (-1.0 * TF1_tra_1) + ( 1.0 * TF1_tra_1)

# Species:   id = Sink, name = Sink, constant
par Sink=0.0


# event : ActivateSignal
ActivateS=if (t > 3600) then (1.5) else (0.2)
global 1 {ActivateS - 1.1} {Signal=1}

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

