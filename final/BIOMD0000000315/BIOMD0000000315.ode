
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Montagne2011_Oligator_optimised
#
# is http://identifiers.org/biomodels.db/MODEL1010260000
# is http://identifiers.org/biomodels.db/BIOMD0000000315
# isDescribedBy http://identifiers.org/pubmed/21283142
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = sample, name = sample, constant
par sample=1.0

# Parameter:   id =  k0d, name = k0d, constant
par k0d=0.0294

# Parameter:   id =  k0r, name = k0r, constant
par k0r=3.43457943925

# Parameter:   id =  k1d, name = k1d, constant
par k1d=3.43457943925

# Parameter:   id =  k1r, name = k1r, constant
par k1r=0.0294

# Parameter:   id =  k2d, name = k2d, constant
par k2d=3.43457943925

# Parameter:   id =  k2r, name = k2r, constant
par k2r=0.0294

# Parameter:   id =  k3d, name = k3d, constant
par k3d=3.43457943925

# Parameter:   id =  k3r, name = k3r, constant
par k3r=0.0294

# Parameter:   id =  k4d, name = k4d, constant
par k4d=15.2

# Parameter:   id =  k5d, name = k5d, constant
par k5d=11.8408

# Parameter:   id =  k6d, name = k6d, constant
par k6d=3.34

# Parameter:   id =  k7d, name = k7d, constant
par k7d=0.0294

# Parameter:   id =  k7r, name = k7r, constant
par k7r=3.43457943925

# Parameter:   id =  k8d, name = k8d, constant
par k8d=0.610714285714

# Parameter:   id =  k8r, name = k8r, constant
par k8r=0.0171

# Parameter:   id =  k9d, name = k9d, constant
par k9d=0.610714285714

# Parameter:   id =  k9r, name = k9r, constant
par k9r=0.0171

# Parameter:   id =  k10d, name = k10d, constant
par k10d=3.43457943925

# Parameter:   id =  k10r, name = k10r, constant
par k10r=0.0294

# Parameter:   id =  k11d, name = k11d, constant
par k11d=11.8408

# Parameter:   id =  k12d, name = k12d, constant
par k12d=9.2239832

# Parameter:   id =  k13d, name = k13d, constant
par k13d=2.60186

# Parameter:   id =  k14d, name = k14d, constant
par k14d=0.0171

# Parameter:   id =  k14r, name = k14r, constant
par k14r=0.610714285714

# Parameter:   id =  k15d, name = k15d, constant
par k15d=0.00186296832954

# Parameter:   id =  k15r, name = k15r, constant
par k15r=0.027

# Parameter:   id =  k16d, name = k16d, constant
par k16d=0.027

# Parameter:   id =  k16r, name = k16r, constant
par k16r=0.00186296832954

# Parameter:   id =  k17d, name = k17d, constant
par k17d=0.0171

# Parameter:   id =  k17r, name = k17r, constant
par k17r=0.610714285714

# Parameter:   id =  k18d, name = k18d, constant
par k18d=17.024

# Parameter:   id =  k19d, name = k19d, constant
par k19d=5.566848

# Parameter:   id =  k20d, name = k20d, constant
par k20d=3.2064

# Parameter:   id =  k21d, name = k21d, constant
par k21d=0.027

# Parameter:   id =  k21r, name = k21r, constant
par k21r=0.00608108108108

# Parameter:   id =  k22d, name = k22d, constant
par k22d=0.021546

# Parameter:   id =  k22r, name = k22r, constant
par k22r=4.15391351351E-5

# Parameter:   id =  k23d, name = k23d, constant
par k23d=4.15391351351E-5

# Parameter:   id =  k23r, name = k23r, constant
par k23r=0.021546

# Parameter:   id =  k24d, name = k24d, constant
par k24d=0.411

# Parameter:   id =  k25d, name = k25d, constant
par k25d=0.485802

# Parameter:   id =  k26d, name = k26d, constant
par k26d=1.7262

# Parameter:   id =  Bp_concentration, name = Bp_concentration, defined by a Rule

# Parameter:   id =  fluorescence, name = fluorescence, defined by a Rule

# Parameter:   id =  Inh_total, name = Inh_total, defined by a Rule

# Parameter:   id =  beta_total, name = beta_total, defined by a Rule

# Parameter:   id =  alpha_total, name = alpha_total, defined by a Rule

# assignmentRule: variable = Bp_concentration
Bp_concen=11*(alpha_T1+T1_alpha+alpha_T2+T2_beta+beta_T3)+16*(T3_Inh+Inh_T1)+22*(alpha_T1_+alpha_alp+alpha_T2_+alpha_bet)+27*(beta_T3_I+beta_Inh_)
aux Bp_concen=Bp_concen

# assignmentRule: variable = fluorescence
fluoresce=-0.38+0.00093*(11*(alpha_T1+T1_alpha+alpha_T2+T2_beta+beta_T3)+16*(T3_Inh+Inh_T1)+22*(alpha_T1_+alpha_alp+alpha_T2_+alpha_bet)+27*(beta_T3_I+beta_Inh_))
aux fluoresce=fluoresce

# assignmentRule: variable = Inh_total
Inh_total=Inh+T3_Inh+beta_T3_I+Inh_T1
aux Inh_total=Inh_total

# assignmentRule: variable = beta_total
beta_tota=beta+T2_beta+alpha_T2_+beta_T3+beta_T3_I
aux beta_tota=beta_tota

# assignmentRule: variable = alpha_total
alpha_tot=alpha+alpha_T1+T1_alpha+2*alpha_T1_+alpha_T2+alpha_T2_+alpha_T2
aux alpha_tot=alpha_tot

# Reaction: id = ass_aa_l

ass_aa_l=sample*(k0d*T1*alpha-k0r*alpha_T1)

# Reaction: id = m_ass_aa_lr

m_ass_aa_=sample*(k1d*alpha_T1_-k1r*alpha*alpha_T1)

# Reaction: id = m_ass_aa_r

m_ass_a_1=sample*(k2d*T1_alpha-k2r*T1*alpha)

# Reaction: id = m_ass_aa_rl

m_ass_a_2=sample*(k3d*alpha_T1_-k3r*alpha*T1_alpha)

# Reaction: id = pol_aa

pol_aa=sample*k4d*alpha_T1

# Reaction: id = dis_aa

dis_aa=sample*k5d*alpha_T1_

# Reaction: id = nick_aa

nick_aa=sample*k6d*alpha_alp

# Reaction: id = ass_ab_l

ass_ab_l=sample*(k7d*alpha*T2-k7r*alpha_T2)

# Reaction: id = m_ass_ab_lr

m_ass_ab_=sample*(k8d*alpha_T2_-k8r*alpha_T2*beta)

# Reaction: id = m_ass_ab_r

m_ass_a_3=sample*(k9d*T2_beta-k9r*T2*beta)

# Reaction: id = m_ass_ab_rl

m_ass_a_4=sample*(k10d*alpha_T2_-k10r*alpha*T2_beta)

# Reaction: id = pol_ab

pol_ab=sample*k11d*alpha_T2

# Reaction: id = dis_ab

dis_ab=sample*k12d*alpha_T2_

# Reaction: id = nick_ab

nick_ab=sample*k13d*alpha_bet

# Reaction: id = ass_bc_l

ass_bc_l=sample*(k14d*beta*T3-k14r*beta_T3)

# Reaction: id = m_ass_bc_lr

m_ass_bc_=sample*(k15d*beta_T3_I-k15r*beta_T3*Inh)

# Reaction: id = ass_bc_r

ass_bc_r=sample*(k16d*T3*Inh-k16r*T3_Inh)

# Reaction: id = ass_bc_rl

ass_bc_rl=sample*(k17d*beta*T3_Inh-k17r*beta_T3_I)

# Reaction: id = pol_bc

pol_bc=sample*k18d*beta_T3

# Reaction: id = dis_bc

dis_bc=sample*k19d*beta_T3_I

# Reaction: id = nick_bc

nick_bc=sample*k20d*beta_Inh_

# Reaction: id = inh_ac

inh_ac=sample*(k21d*T1*Inh-k21r*Inh_T1)

# Reaction: id = inh_displ_ac

inh_displ=sample*(k22d*T1_alpha*Inh-k22r*alpha*Inh_T1)

# Reaction: id = m_inh_displ_ca

m_inh_dis=sample*(k23d*alpha*Inh_T1-k23r*alpha_T1*Inh)

# Reaction: id = exo_a

exo_a=sample*k24d*alpha

# Reaction: id = exo_b

exo_b=sample*k25d*beta

# Reaction: id = exo_c

exo_c=sample*k26d*Inh

# Species:   id = T1, name = T1, affected by kineticLaw

init T1=38.5
dT1/dt=(1/(sample))*((-1.0 * ass_aa_l) + ( 1.0 * m_ass_a_1) + (-1.0 * inh_ac))

# Species:   id = alpha, name = alpha, affected by kineticLaw

init alpha=10.0
dalpha/dt=(1/(sample))*((-1.0 * ass_aa_l) + ( 1.0 * m_ass_aa_) + ( 1.0 * m_ass_a_1) + ( 1.0 * m_ass_a_2) + ( 1.0 * dis_aa) + (-1.0 * ass_ab_l) + ( 1.0 * m_ass_a_4) + ( 1.0 * inh_displ) + (-1.0 * m_inh_dis) + (-1.0 * exo_a))

# Species:   id = alpha_T1, name = alpha_T1, affected by kineticLaw

init alpha_T1=0.0
dalpha_T1/dt=(1/(sample))*(( 1.0 * ass_aa_l) + ( 1.0 * m_ass_aa_) + (-1.0 * pol_aa) + ( 1.0 * m_inh_dis))

# Species:   id = alpha_T1_alpha, name = alpha_T1_alpha, affected by kineticLaw

par alpha_T1_=0.0
aux alpha_T1_=alpha_T1_
dalpha_T1_/dt=(1/(sample))*((-1.0 * m_ass_aa_) + (-1.0 * m_ass_a_2) + (-1.0 * dis_aa) + ( 1.0 * nick_aa))

# Species:   id = T1_alpha, name = T1_alpha, affected by kineticLaw

init T1_alpha=0.0
dT1_alpha/dt=(1/(sample))*((-1.0 * m_ass_a_1) + ( 1.0 * m_ass_a_2) + (-1.0 * inh_displ))

# Species:   id = alpha_alpha_T1, name = alpha_alpha_T1, affected by kineticLaw

par alpha_alp=0.0
aux alpha_alp=alpha_alp
dalpha_alp/dt=(1/(sample))*(( 1.0 * pol_aa) + ( 1.0 * dis_aa) + (-1.0 * nick_aa))

# Species:   id = T2, name = T2, affected by kineticLaw

init T2=3.89
dT2/dt=(1/(sample))*((-1.0 * ass_ab_l) + ( 1.0 * m_ass_a_3))

# Species:   id = alpha_T2, name = alpha_T2, affected by kineticLaw

init alpha_T2=0.0
dalpha_T2/dt=(1/(sample))*(( 1.0 * ass_ab_l) + ( 1.0 * m_ass_ab_) + (-1.0 * pol_ab))

# Species:   id = alpha_T2_beta, name = alpha_T2_beta, affected by kineticLaw

par alpha_T2_=0.0
aux alpha_T2_=alpha_T2_
dalpha_T2_/dt=(1/(sample))*((-1.0 * m_ass_ab_) + (-1.0 * m_ass_a_4) + (-1.0 * dis_ab) + ( 1.0 * nick_ab))

# Species:   id = beta, name = beta, affected by kineticLaw

init beta=0.0
dbeta/dt=(1/(sample))*(( 1.0 * m_ass_ab_) + ( 1.0 * m_ass_a_3) + ( 1.0 * dis_ab) + (-1.0 * ass_bc_l) + (-1.0 * ass_bc_rl) + (-1.0 * exo_b))

# Species:   id = T2_beta, name = T2_beta, affected by kineticLaw

init T2_beta=0.0
dT2_beta/dt=(1/(sample))*((-1.0 * m_ass_a_3) + ( 1.0 * m_ass_a_4))

# Species:   id = alpha_beta_T2, name = alpha_beta_T2, affected by kineticLaw

par alpha_bet=0.0
aux alpha_bet=alpha_bet
dalpha_bet/dt=(1/(sample))*(( 1.0 * pol_ab) + ( 1.0 * dis_ab) + (-1.0 * nick_ab))

# Species:   id = T3, name = T3, affected by kineticLaw

init T3=38.5
dT3/dt=(1/(sample))*((-1.0 * ass_bc_l) + (-1.0 * ass_bc_r))

# Species:   id = beta_T3, name = beta_T3, affected by kineticLaw

init beta_T3=0.0
dbeta_T3/dt=(1/(sample))*(( 1.0 * ass_bc_l) + ( 1.0 * m_ass_bc_) + (-1.0 * pol_bc))

# Species:   id = beta_T3_Inh, name = beta_T3_Inh, affected by kineticLaw

par beta_T3_I=0.0
aux beta_T3_I=beta_T3_I
dbeta_T3_I/dt=(1/(sample))*((-1.0 * m_ass_bc_) + ( 1.0 * ass_bc_rl) + (-1.0 * dis_bc) + ( 1.0 * nick_bc))

# Species:   id = Inh, name = Inh, affected by kineticLaw

init Inh=0.0
dInh/dt=(1/(sample))*(( 1.0 * m_ass_bc_) + (-1.0 * ass_bc_r) + ( 1.0 * dis_bc) + (-1.0 * inh_ac) + (-1.0 * inh_displ) + ( 1.0 * m_inh_dis) + (-1.0 * exo_c))

# Species:   id = T3_Inh, name = T3_Inh, affected by kineticLaw

init T3_Inh=0.0
dT3_Inh/dt=(1/(sample))*(( 1.0 * ass_bc_r) + (-1.0 * ass_bc_rl))

# Species:   id = beta_Inh_T3, name = beta_Inh_T3, affected by kineticLaw

par beta_Inh_=0.0
aux beta_Inh_=beta_Inh_
dbeta_Inh_/dt=(1/(sample))*(( 1.0 * pol_bc) + ( 1.0 * dis_bc) + (-1.0 * nick_bc))

# Species:   id = Inh_T1, name = Inh_T1, affected by kineticLaw

init Inh_T1=0.0
dInh_T1/dt=(1/(sample))*(( 1.0 * inh_ac) + ( 1.0 * inh_displ) + (-1.0 * m_inh_dis))

# Species:   id = empty, name = empty
par empty=0.0
aux empty=empty
#WARNING speciesID: empty, constant= false  , boundaryCondition = true but is not involved in assignmentRule, rateRule or events !

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

