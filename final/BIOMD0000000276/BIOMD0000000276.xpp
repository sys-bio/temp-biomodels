
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Shrestha2010_HypoCalcemia_PTHresponse
#
# is http://identifiers.org/biomodels.db/MODEL1011170001
# is http://identifiers.org/biomodels.db/BIOMD0000000276
# isDescribedBy http://identifiers.org/pubmed/20406649
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = PTG_pool, name = PTG_pool, constant
par PTG_pool=1.0

# Compartment: id = Plasma_pool, name = Plasma_pool, constant
par Plasma_po=1.0

# Parameter:   id =  k, name = k, defined by a Rule

# Parameter:   id =  lambda_Ca, name = lambda_Ca, defined by a Rule

# Parameter:   id =  m_Ca, name = m_Ca, defined by a Rule

# Parameter:   id =  m1, name = m1, constant
par m1=112.52

# Parameter:   id =  m2, name = m2, constant
par m2=15.0

# Parameter:   id =  beta, name = beta, constant
par beta=1000000.0

# Parameter:   id =  R, name = R, constant
par R=1.2162

# Parameter:   id =  lambda_1, name = lambda_1, constant
par lambda_1=0.0125

# Parameter:   id =  lambda_2, name = lambda_2, constant
par lambda_2=0.5595

# Parameter:   id =  A, name = A, defined by a Rule

# Parameter:   id =  B, name = B, defined by a Rule

# Parameter:   id =  S, name = S, defined by a Rule

# Parameter:   id =  Ca0, name = Ca0, constant
par Ca0=1.255

# Parameter:   id =  Ca1, name = Ca1, constant
par Ca1=0.1817

# Parameter:   id =  t0, name = t0, constant
par t0=575.0

# Parameter:   id =  alpha, name = alpha, constant
par alpha=0.0442

# Parameter:   id =  x1_n, name = x1_n, constant
par x1_n=490.78

# Parameter:   id =  x2_n, name = x2_n, constant
par x2_n=6.629

# Parameter:   id =  x2_min, name = x2_min, constant
par x2_min=0.6697

# Parameter:   id =  x2_max, name = x2_max, constant
par x2_max=14.043

# Parameter:   id =  Ca0_baseline, name = Ca0_baseline, constant
par Ca0_basel=1.255

# assignmentRule: variable = lambda_Ca
lambda_Ca=(A-B)/(1+(Ca/S)^m_Ca)+B
aux lambda_Ca=lambda_Ca

# assignmentRule: variable = m_Ca
m_Ca=m1/(1+exp((-beta)*(R-Ca)))+m2
aux m_Ca=m_Ca

# assignmentRule: variable = Ca
Ca= piecew1 
aux Ca=Ca

# rateRule: variable = x1
init x1=0.0
dx1/dt=k-lambda_Ca*x1-lambda_1*x1

# rateRule: variable = x2
init x2=0.0
dx2/dt=lambda_Ca*x1-lambda_2*x2

# assignmentRule: variable = S
S=Ca0_basel*((-(x1_n*B-lambda_2*x2_n))/(x1_n*A-lambda_2*x2_n))^(1/m_Ca)
aux S=S

# assignmentRule: variable = k
k=lambda_2*x2_n+lambda_1*x1_n
aux k=k

# assignmentRule: variable = A
A=lambda_1*lambda_2*x2_max/(k-lambda_2*x2_max)
aux A=A

# assignmentRule: variable = B
B=lambda_1*lambda_2*x2_min/(k-lambda_2*x2_min)
aux B=B

# Species:   id = x1, name = PTH_in_PTG, defined in a rule 

# Species:   id = x2, name = PTH_in_Plasma, defined in a rule 

# Species:   id = Ca, name = Ca_in_Plasma, defined in a rule 


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if (t  <  t0) then (Ca0) else (Ca0-Ca1*(1-exp((-alpha)*(t-t0))))


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

