
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Smolen2018 - Paradoxical LTP maintenance with inhibition of protein synthesis and the proteasome
#
# isDescribedBy http://identifiers.org/pubmed/30138630
# is http://identifiers.org/biomodels.db/MODEL1911120006
# is http://identifiers.org/biomodels.db/BIOMD0000000853
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_LP_Synthesis_ED, name = Function_for_LP_Synthesis_ED
Function_(kf5,PP,ED)=(kf5*PP^2*ED)


# FunctionDefinition id = Function_for_EP2_Synthesis_EP1, name = Function_for_EP2_Synthesis_EP1
Functio_1(kf3,STAB,EP1)=(kf3*STAB*EP1)


# FunctionDefinition id = Function_for_EP1_Synthesis_STIM_BAS_bas, name = Function_for_EP1_Synthesis_STIM_BAS_bas
Functio_2(kf1bas,STIM,BAS)=(kf1bas*(1-STIM)*BAS)


# FunctionDefinition id = Function_for_EP1_Synthesis_STIM_BAS, name = Function_for_EP1_Synthesis_STIM_BAS
Functio_3(kf1,STIM,BAS)=(kf1*STIM*BAS)


# FunctionDefinition id = Function_for_ED_Synthesis_EP1_UPS, name = Function_for_ED_Synthesis_EP1_UPS
Functio_4(kf2,UPS,LAC,EP1)=(kf2*UPS*(1-LAC)*EP1)


# FunctionDefinition id = Function_for_BAS_Synthesis_EP2, name = Function_for_BAS_Synthesis_EP2
Functio_5(kb2,EP2,NP)=(kb2*EP2*NP)


# FunctionDefinition id = Function_for_ED_Synthesis_EP2, name = Function_for_ED_Synthesis_EP2
Functio_6(kf4,UPS,LAC,EP2)=(kf4*UPS*(1-LAC)*EP2)


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = Function_for_NP_Degradation_UPS, name = Function_for_NP_Degradation_UPS
Functio_7(kdeg2,UPS,NP,LAC)=(kdeg2*UPS*NP*(1-LAC))


# FunctionDefinition id = Function_for_PP_Synthesis, name = Function_for_PP_Synthesis
Functio_8(PSI,ksyn1,STIM,ksyn1bas)=((1-PSI)*(ksyn1*STIM+ksyn1bas))


# FunctionDefinition id = Function_for_STAB_Synthesis_STIM, name = Function_for_STAB_Synthesis_STIM
Functio_9(ksyn3,STIM)=(ksyn3*STIM)


# FunctionDefinition id = Function_for_NP_Synthesis, name = Function_for_NP_Synthesis
Functi_10(PSI,ksyn2,STIM,ksyn2bas)=((1-PSI)*(ksyn2*STIM+ksyn2bas))


# FunctionDefinition id = Function_for_UPS_Activation, name = Function_for_UPS_Activation
Functi_11(kact,STIM)=(kact*STIM)


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  ksyn1, name = ksyn1, constant
par ksyn1=1.0

# Parameter:   id =  ksyn1bas, name = ksyn1bas, constant
par ksyn1bas=0.0035

# Parameter:   id =  kdeg1, name = kdeg1, constant
par kdeg1=0.005

# Parameter:   id =  ksyn2, name = ksyn2, constant
par ksyn2=2.0

# Parameter:   id =  ksyn2bas, name = ksyn2bas, constant
par ksyn2bas=0.0014

# Parameter:   id =  kdeg2, name = kdeg2, constant
par kdeg2=0.01

# Parameter:   id =  kdeg2bas, name = kdeg2bas, constant
par kdeg2bas=0.002

# Parameter:   id =  ksyn3, name = ksyn3, constant
par ksyn3=1.0

# Parameter:   id =  ksyn3bas, name = ksyn3bas, constant
par ksyn3bas=0.008

# Parameter:   id =  kdeg3, name = kdeg3, constant
par kdeg3=0.02

# Parameter:   id =  kact, name = kact, constant
par kact=0.2

# Parameter:   id =  kactbas, name = kactbas, constant
par kactbas=0.00214

# Parameter:   id =  kdeact, name = kdeact, constant
par kdeact=0.0143

# Parameter:   id =  kf1, name = kf1, constant
par kf1=0.1

# Parameter:   id =  kf1bas, name = kf1bas, defined by a Rule

# Parameter:   id =  kf2, name = kf2, constant
par kf2=0.02

# Parameter:   id =  kb1, name = kb1, constant
par kb1=0.005

# Parameter:   id =  kf3, name = kf3, constant
par kf3=0.01

# Parameter:   id =  kf4, name = kf4, constant
par kf4=0.02

# Parameter:   id =  kb2, name = kb2, constant
par kb2=7.0E-4

# Parameter:   id =  kb3, name = kb3, constant
par kb3=0.02

# Parameter:   id =  kf5, name = kf5, constant
par kf5=5.0E-4

# Parameter:   id =  kb4, name = kb4, constant
par kb4=0.001

# Parameter:   id =  STIM, name = STIM, defined by a Rule

# Parameter:   id =  PSI, name = PSI, constant
par PSI=0.0

# Parameter:   id =  LAC, name = LAC, constant
par LAC=0.0

# Parameter:   id =  W, name = W, defined by a Rule

# Parameter:   id =  tstimdur, name = tstimdur, constant
par tstimdur=20.0

# Parameter:   id =  kf1bas_value, name = kf1bas_value, constant
par kf1bas_va=0.001

# Parameter:   id =  ModelValue_28, name = Initial for kf1bas_value, constant
par ModelValu=0.001

# Parameter:   id =  ModelValue_27, name = Initial for tstimdur, constant
par ModelVa_1=20.0

# assignmentRule: variable = kf1bas
kf1bas= piecew1 
aux kf1bas=kf1bas

# assignmentRule: variable = STIM
STIM= piecew2 
aux STIM=STIM

# assignmentRule: variable = W
W=BAS+5*EP1+8*EP2+4*ED+8*LP
aux W=W

# Reaction: id = PP_Synthesis, name = PP_Synthesis

PP_Synthe=compartme*Functio_8(PSI, ksyn1, STIM, ksyn1bas)

# Reaction: id = PP_Degradation, name = PP_Degradation

PP_Degrad=compartme*kdeg1*PP

# Reaction: id = NP_Synthesis, name = NP_Synthesis

NP_Synthe=compartme*Functi_10(PSI, ksyn2, STIM, ksyn2bas)

# Reaction: id = NP_Degradation_UPS, name = NP_Degradation_UPS

NP_Degrad=compartme*Functio_7(kdeg2, UPS, NP, LAC)

# Reaction: id = NP_Degradation, name = NP_Degradation

NP_Degr_1=compartme*kdeg2bas*NP

# Reaction: id = STAB_Synthesis_STIM, name = STAB_Synthesis_STIM

STAB_Synt=compartme*Functio_9(ksyn3, STIM)

# Reaction: id = STAB_Synthesis_Basal, name = STAB_Synthesis_Basal

STAB_Sy_1=compartme*Constant_(ksyn3bas)

# Reaction: id = STAB_Degradation, name = STAB_Degradation

STAB_Degr=compartme*kdeg3*STAB

# Reaction: id = EP1_Synthesis_STIM_BAS, name = EP1_Synthesis_STIM_BAS

EP1_Synth=compartme*Functio_3(kf1, STIM, BAS)

# Reaction: id = EP1_Synthesis_STIM_BAS_bas, name = EP1_Synthesis_STIM_BAS_bas

EP1_Syn_1=compartme*Functio_2(kf1bas, STIM, BAS)

# Reaction: id = ED_Synthesis_EP1_UPS, name = ED_Synthesis_EP1_UPS

ED_Synthe=compartme*Functio_4(kf2, UPS, LAC, EP1)

# Reaction: id = BAS_Synthesis_EP1, name = BAS_Synthesis_EP1

BAS_Synth=compartme*kb1*EP1

# Reaction: id = EP2_Synthesis_EP1, name = EP2_Synthesis_EP1

EP2_Synth=compartme*Functio_1(kf3, STAB, EP1)

# Reaction: id = ED_Synthesis_EP2, name = ED_Synthesis_EP2

ED_Synt_1=compartme*Functio_6(kf4, UPS, LAC, EP2)

# Reaction: id = BAS_Synthesis_EP2, name = BAS_Synthesis_EP2

BAS_Syn_1=compartme*Functio_5(kb2, EP2, NP)

# Reaction: id = BAS_Synthesis_ED, name = BAS_Synthesis_ED

BAS_Syn_2=compartme*kb3*ED

# Reaction: id = LP_Synthesis_ED, name = LP_Synthesis_ED

LP_Synthe=compartme*Function_(kf5, PP, ED)

# Reaction: id = BAS_Synthesis_LP, name = BAS_Synthesis_LP

BAS_Syn_3=compartme*kb4*LP

# Reaction: id = UPS_Activation, name = UPS_Activation

UPS_Activ=compartme*Functi_11(kact, STIM)

# Reaction: id = UPS_Activation_Basal, name = UPS_Activation_Basal

UPS_Act_1=compartme*Constant_(kactbas)

# Reaction: id = UPS_Deactivation, name = UPS_Deactivation

UPS_Deact=compartme*kdeact*UPS

# Species:   id = PP, name = PP, affected by kineticLaw

init PP=0.01
dPP/dt=(1/(compartme))*(( 1.0 * PP_Synthe) + (-1.0 * PP_Degrad))

# Species:   id = NP, name = NP, affected by kineticLaw

init NP=0.01
dNP/dt=(1/(compartme))*(( 1.0 * NP_Synthe) + (-1.0 * NP_Degrad) + (-1.0 * NP_Degr_1))

# Species:   id = STAB, name = STAB, affected by kineticLaw

init STAB=0.01
dSTAB/dt=(1/(compartme))*(( 1.0 * STAB_Synt) + ( 1.0 * STAB_Sy_1) + (-1.0 * STAB_Degr))

# Species:   id = UPS, name = UPS, affected by kineticLaw

init UPS=0.001
dUPS/dt=(1/(compartme))*(( 1.0 * UPS_Activ) + ( 1.0 * UPS_Act_1) + (-1.0 * UPS_Deact))

# Species:   id = EP1, name = EP1, affected by kineticLaw

init EP1=0.18
dEP1/dt=(1/(compartme))*(( 1.0 * EP1_Synth) + ( 1.0 * EP1_Syn_1) + (-1.0 * ED_Synthe) + (-1.0 * BAS_Synth) + (-1.0 * EP2_Synth))

# Species:   id = EP2, name = EP2, affected by kineticLaw

init EP2=0.14
dEP2/dt=(1/(compartme))*(( 1.0 * EP2_Synth) + (-1.0 * ED_Synt_1) + (-1.0 * BAS_Syn_1))

# Species:   id = ED, name = ED, affected by kineticLaw

init ED=0.01
dED/dt=(1/(compartme))*(( 1.0 * ED_Synthe) + ( 1.0 * ED_Synt_1) + (-1.0 * BAS_Syn_2) + (-1.0 * LP_Synthe))

# Species:   id = LP, name = LP, affected by kineticLaw

init LP=0.01
dLP/dt=(1/(compartme))*(( 1.0 * LP_Synthe) + (-1.0 * BAS_Syn_3))

# Species:   id = BAS, name = BAS, affected by kineticLaw

init BAS=0.96
dBAS/dt=(1/(compartme))*((-1.0 * EP1_Synth) + (-1.0 * EP1_Syn_1) + ( 1.0 * BAS_Synth) + ( 1.0 * BAS_Syn_1) + ( 1.0 * BAS_Syn_2) + ( 1.0 * BAS_Syn_3))


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if (t  <=  ModelVa_1) then (0) else (ModelValu)

piecew2=if (t  <=  ModelVa_1) then (1) else (0)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

