
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Albeck2008_extrinsic_apoptosis
#
# is http://identifiers.org/biomodels.db/MODEL6964793701
# is http://identifiers.org/biomodels.db/BIOMD0000000220
# isDescribedBy http://identifiers.org/pubmed/18406323
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = cell, name = cell, constant
par cell=1.0

# Compartment: id = mitochondrion, name = mitochondrion, constant
par mitochond=1.0

# Parameter:   id =  k1, name = k1, constant
par k1=4.0E-7

# Parameter:   id =  k_1, name = k_1, constant
par k_1=0.001

# Parameter:   id =  kc1, name = kc1, constant
par kc1=1.0E-5

# Parameter:   id =  k2, name = k2, constant
par k2=1.0E-6

# Parameter:   id =  k_2, name = k_2, constant
par k_2=0.001

# Parameter:   id =  k3, name = k3, constant
par k3=1.0E-6

# Parameter:   id =  k_3, name = k_3, constant
par k_3=0.001

# Parameter:   id =  kc3, name = kc3, constant
par kc3=1.0

# Parameter:   id =  k4, name = k4, constant
par k4=1.0E-6

# Parameter:   id =  k_4, name = k_4, constant
par k_4=0.001

# Parameter:   id =  k5, name = k5, constant
par k5=1.0E-7

# Parameter:   id =  k_5, name = k_5, constant
par k_5=0.001

# Parameter:   id =  kc5, name = kc5, constant
par kc5=1.0

# Parameter:   id =  k6, name = k6, constant
par k6=1.0E-6

# Parameter:   id =  k_6, name = k_6, constant
par k_6=0.001

# Parameter:   id =  kc6, name = kc6, constant
par kc6=1.0

# Parameter:   id =  k7, name = k7, constant
par k7=3.0E-8

# Parameter:   id =  k_7, name = k_7, constant
par k_7=0.001

# Parameter:   id =  k8, name = k8, constant
par k8=2.0E-6

# Parameter:   id =  k_8, name = k_8, constant
par k_8=0.001

# Parameter:   id =  kc8, name = kc8, constant
par kc8=0.1

# Parameter:   id =  k9, name = k9, constant
par k9=1.0E-6

# Parameter:   id =  k_9, name = k_9, constant
par k_9=0.01

# Parameter:   id =  kc9, name = kc9, constant
par kc9=1.0

# Parameter:   id =  k10, name = k10, constant
par k10=1.0E-7

# Parameter:   id =  k_10, name = k_10, constant
par k_10=0.001

# Parameter:   id =  kc10, name = kc10, constant
par kc10=1.0

# Parameter:   id =  k11, name = k11, constant
par k11=1.0E-6

# Parameter:   id =  k_11, name = k_11, constant
par k_11=0.001

# Parameter:   id =  k12, name = k12, constant
par k12=1.0E-7

# Parameter:   id =  k_12, name = k_12, constant
par k_12=0.001

# Parameter:   id =  kc12, name = kc12, constant
par kc12=1.0

# Parameter:   id =  k13, name = k13, constant
par k13=0.01

# Parameter:   id =  k_13, name = k_13, constant
par k_13=0.01

# Parameter:   id =  k14, name = k14, constant
par k14=1.0E-6

# Parameter:   id =  k_14, name = k_14, constant
par k_14=0.001

# Parameter:   id =  k15, name = k15, constant
par k15=1.0E-6

# Parameter:   id =  k_15, name = k_15, constant
par k_15=0.001

# Parameter:   id =  k16, name = k16, constant
par k16=1.0E-6

# Parameter:   id =  k_16, name = k_16, constant
par k_16=0.001

# Parameter:   id =  k17, name = k17, constant
par k17=1.0E-6

# Parameter:   id =  k_17, name = k_17, constant
par k_17=0.001

# Parameter:   id =  k18, name = k18, constant
par k18=1.0E-6

# Parameter:   id =  k_18, name = k_18, constant
par k_18=0.001

# Parameter:   id =  k19, name = k19, constant
par k19=1.0E-6

# Parameter:   id =  k_19, name = k_19, constant
par k_19=0.001

# Parameter:   id =  kc19, name = kc19, constant
par kc19=1.0

# Parameter:   id =  k20, name = k20, constant
par k20=2.0E-6

# Parameter:   id =  k_20, name = k_20, constant
par k_20=0.001

# Parameter:   id =  kc20, name = kc20, constant
par kc20=10.0

# Parameter:   id =  k21, name = k21, constant
par k21=2.0E-6

# Parameter:   id =  k_21, name = k_21, constant
par k_21=0.001

# Parameter:   id =  kc21, name = kc21, constant
par kc21=10.0

# Parameter:   id =  k22, name = k22, constant
par k22=0.01

# Parameter:   id =  k_22, name = k_22, constant
par k_22=0.01

# Parameter:   id =  k23, name = k23, constant
par k23=5.0E-7

# Parameter:   id =  k_23, name = k_23, constant
par k_23=0.001

# Parameter:   id =  kc23, name = kc23, constant
par kc23=1.0

# Parameter:   id =  k24, name = k24, constant
par k24=5.0E-8

# Parameter:   id =  k_24, name = k_24, constant
par k_24=0.001

# Parameter:   id =  k25, name = k25, constant
par k25=5.0E-9

# Parameter:   id =  k_25, name = k_25, constant
par k_25=0.001

# Parameter:   id =  kc25, name = kc25, constant
par kc25=1.0

# Parameter:   id =  k26, name = k26, constant
par k26=0.01

# Parameter:   id =  k_26, name = k_26, constant
par k_26=0.01

# Parameter:   id =  k27, name = k27, constant
par k27=2.0E-6

# Parameter:   id =  k_27, name = k_27, constant
par k_27=0.001

# Parameter:   id =  k28, name = k28, constant
par k28=7.0E-6

# Parameter:   id =  k_28, name = k_28, constant
par k_28=0.001

# Parameter:   id =  kc7, name = kc7, constant
par kc7=1.0

# Parameter:   id =  v, name = v, constant
par v=0.07

# Parameter:   id =  pC3_frac, name = pC3 fraction, defined by a Rule

# Parameter:   id =  C3_frac, name = C3 fraction, defined by a Rule

# Parameter:   id =  C3_UB_frac, name = degraded C3 fraction, defined by a Rule

# Parameter:   id =  cPARP_frac, name = cPARP fraction, defined by a Rule

# Parameter:   id =  C3_tot, name = total Caspase 3, defined by a Rule

# Parameter:   id =  fC3_fract, name = free C3 fraction, defined by a Rule

# assignmentRule: variable = C3_tot
C3_tot=pC3+C8_pC3+pC3_Apop+C3+C3_pC6+XIAP_C3+PARP_C3+C3_Ub
aux C3_tot=C3_tot

# assignmentRule: variable = C3_frac
C3_frac=(C3+C3_pC6+XIAP_C3+PARP_C3)/C3_tot
aux C3_frac=C3_frac

# assignmentRule: variable = C3_UB_frac
C3_UB_fra=C3_Ub/C3_tot
aux C3_UB_fra=C3_UB_fra

# assignmentRule: variable = pC3_frac
pC3_frac=(pC3+C8_pC3+pC3_Apop)/C3_tot
aux pC3_frac=pC3_frac

# assignmentRule: variable = fC3_fract
fC3_fract=C3/C3_tot
aux fC3_fract=fC3_fract

# assignmentRule: variable = cPARP_frac
cPARP_fra=CPARP/(CPARP+PARP+PARP_C3)
aux cPARP_fra=cPARP_fra

# Reaction: id = re1

re1=cell*(L*R*k1-L_R*k_1)

# Reaction: id = re2

re2=cell*L_R*kc1

# Reaction: id = re3

re3=cell*(R_hash*flip*k2-flip_R_ha*k_2)

# Reaction: id = re4

re4=cell*(R_hash*pC8*k3-R_hash_pC*k_3)

# Reaction: id = re5

re5=cell*R_hash_pC*kc3

# Reaction: id = re6

re6=cell*(C6*pC8*k7-C6_pC8*k_7)

# Reaction: id = re7

re7=cell*C6_pC8*kc7

# Reaction: id = re8

re8=cell*(C8*BAR*k4-BAR_C8*k_4)

# Reaction: id = re9

re9=cell*(pC3*C8*k5-C8_pC3*k_5)

# Reaction: id = re10

re10=cell*C8_pC3*kc5

# Reaction: id = re11

re11=cell*(C8*Bid*k10-C8_Bid*k_10)

# Reaction: id = re12

re12=cell*C8_Bid*kc10

# Reaction: id = re13

re13=cell*(pC3*Apop*k25-pC3_Apop*k_25)

# Reaction: id = re14

re14=cell*pC3_Apop*kc25

# Reaction: id = re15

re15=cell*(C3*pC6*k6-C3_pC6*k_6)

# Reaction: id = re16

re16=cell*C3_pC6*kc6

# Reaction: id = re17

re17=cell*(C3*XIAP*k8-XIAP_C3*k_8)

# Reaction: id = re18

re18=cell*XIAP_C3*kc8

# Reaction: id = re19

re19=cell*(PARP*C3*k9-PARP_C3*k_9)

# Reaction: id = re20

re20=cell*PARP_C3*kc9

# Reaction: id = re21

re21=cell*(XIAP*Apop*k27-Apop_XIAP*k_27)

# Reaction: id = re22

re22=cell*(XIAP*Smac*k28-Smac_XIAP*k_28)

# Reaction: id = re23

re23=cell*(tBid*Bcl2c*k11-Bcl2c_tBi*k_11)

# Reaction: id = re24

re24=cell*(tBid*Bax*k12-Bax_tBid*k_12)

# Reaction: id = re25

re25=cell*Bax_tBid*kc12

# Reaction: id = re26

re26=cell*(Bax_hash*k13-Baxm*k_13)

# Reaction: id = re27

re27=mitochond*(Baxm*Bcl2*k14/v-Baxm_Bcl2*k_14)

# Reaction: id = re29

re29=mitochond*(Baxm*Baxm*k15/v-Bax2*k_15)

# Reaction: id = re30

re30=mitochond*(Bax2*Bax2*k17/v-Bax4*k_17)

# Reaction: id = re31

re31=mitochond*(Bcl2*Bax2*k16/v-Bax2_Bcl2*k_16)

# Reaction: id = re32

re32=mitochond*(Bcl2*Bax4*k18/v-Bax4_Bcl2*k_18)

# Reaction: id = re33

re33=mitochond*(Bax4*M*k19/v-Bax4_M*k_19)

# Reaction: id = re34

re34=mitochond*Bax4_M*kc19

# Reaction: id = re35

re35=mitochond*(M_hash*Smacm*k21/v-M_hash_Sm*k_21)

# Reaction: id = re36

re36=mitochond*M_hash_Sm*kc21

# Reaction: id = re37

re37=cell*(Smacr*k26-Smac*k_26)

# Reaction: id = re38

re38=mitochond*(M_hash*CytoCm*k20/v-M_hash_Cy*k_20)

# Reaction: id = re39

re39=mitochond*M_hash_Cy*kc20

# Reaction: id = re40

re40=cell*(CytoCr*k22-CytoC*k_22)

# Reaction: id = re41

re41=cell*(CytoC*Apaf*k23-CytoC_Apa*k_23)

# Reaction: id = re42

re42=cell*CytoC_Apa*kc23

# Reaction: id = re43

re43=cell*(Apaf_hash*pC9*k24-Apop*k_24)

# Species:   id = L, name = L, affected by kineticLaw

init L=3000.0
dL/dt=(1/(cell))*((-1.0 * re1))

# Species:   id = R, name = R, affected by kineticLaw

init R=200.0
dR/dt=(1/(cell))*((-1.0 * re1))

# Species:   id = flip, name = flip, affected by kineticLaw

init flip=100.0
dflip/dt=(1/(cell))*((-1.0 * re3))

# Species:   id = pC8, name = proC8, affected by kineticLaw

init pC8=20000.0
dpC8/dt=(1/(cell))*((-1.0 * re4) + (-1.0 * re6))

# Species:   id = C8, name = casp8, affected by kineticLaw

init C8=0.0
dC8/dt=(1/(cell))*(( 1.0 * re5) + ( 1.0 * re7) + (-1.0 * re8) + (-1.0 * re9) + ( 1.0 * re10) + (-1.0 * re11) + ( 1.0 * re12))

# Species:   id = C6, name = casp6, affected by kineticLaw

init C6=0.0
dC6/dt=(1/(cell))*((-1.0 * re6) + ( 1.0 * re7) + ( 1.0 * re16))

# Species:   id = BAR, name = BAR, affected by kineticLaw

init BAR=1000.0
dBAR/dt=(1/(cell))*((-1.0 * re8))

# Species:   id = pC3, name = proC3, affected by kineticLaw

init pC3=10000.0
dpC3/dt=(1/(cell))*((-1.0 * re9) + (-1.0 * re13))

# Species:   id = C3, name = casp3, affected by kineticLaw

init C3=0.0
dC3/dt=(1/(cell))*(( 1.0 * re10) + ( 1.0 * re14) + (-1.0 * re15) + ( 1.0 * re16) + (-1.0 * re17) + (-1.0 * re19) + ( 1.0 * re20))

# Species:   id = Bid, name = Bid, affected by kineticLaw

init Bid=40000.0
dBid/dt=(1/(cell))*((-1.0 * re11))

# Species:   id = tBid, name = tBid, affected by kineticLaw

init tBid=0.0
dtBid/dt=(1/(cell))*(( 1.0 * re12) + (-1.0 * re23) + (-1.0 * re24) + ( 1.0 * re25))

# Species:   id = pC6, name = proC6, affected by kineticLaw

init pC6=10000.0
dpC6/dt=(1/(cell))*((-1.0 * re15))

# Species:   id = XIAP, name = XIAP, affected by kineticLaw

init XIAP=100000.0
dXIAP/dt=(1/(cell))*((-1.0 * re17) + ( 1.0 * re18) + (-1.0 * re21) + (-1.0 * re22))

# Species:   id = C3_Ub, name = Ub C3, affected by kineticLaw

init C3_Ub=0.0
dC3_Ub/dt=(1/(cell))*(( 1.0 * re18))

# Species:   id = PARP, name = PARP, affected by kineticLaw

init PARP=1000000.0
dPARP/dt=(1/(cell))*((-1.0 * re19))

# Species:   id = CPARP, name = cPARP, affected by kineticLaw

init CPARP=0.0
dCPARP/dt=(1/(cell))*(( 1.0 * re20))

# Species:   id = Smac, name = Smac, affected by kineticLaw

init Smac=0.0
dSmac/dt=(1/(cell))*((-1.0 * re22) + ( 1.0 * re37))

# Species:   id = Bcl2c, name = cytosolic Bcl-2, affected by kineticLaw

init Bcl2c=20000.0
dBcl2c/dt=(1/(cell))*((-1.0 * re23))

# Species:   id = Bax, name = Bax, affected by kineticLaw

init Bax=100000.0
dBax/dt=(1/(cell))*((-1.0 * re24))

# Species:   id = Bax_hash, name = Bax#, affected by kineticLaw

init Bax_hash=0.0
dBax_hash/dt=(1/(cell))*(( 1.0 * re25) + (-1.0 * re26))

# Species:   id = Bcl2, name = Bcl-2, affected by kineticLaw

init Bcl2=20000.0
dBcl2/dt=(1/(mitochond))*((-1.0 * re27) + (-1.0 * re31) + (-1.0 * re32))

# Species:   id = L_R, name = L:R, affected by kineticLaw

init L_R=0.0
dL_R/dt=(1/(cell))*(( 1.0 * re1) + (-1.0 * re2))

# Species:   id = R_hash, name = R#, affected by kineticLaw

init R_hash=0.0
dR_hash/dt=(1/(cell))*(( 1.0 * re2) + (-1.0 * re3) + (-1.0 * re4) + ( 1.0 * re5))

# Species:   id = flip_R_hash, name = flip:R#, affected by kineticLaw

par flip_R_ha=0.0
aux flip_R_ha=flip_R_ha
dflip_R_ha/dt=(1/(cell))*(( 1.0 * re3))

# Species:   id = R_hash_pC8, name = R#:pC8, affected by kineticLaw

par R_hash_pC=0.0
aux R_hash_pC=R_hash_pC
dR_hash_pC/dt=(1/(cell))*(( 1.0 * re4) + (-1.0 * re5))

# Species:   id = C6_pC8, name = C6:pC8, affected by kineticLaw

init C6_pC8=0.0
dC6_pC8/dt=(1/(cell))*(( 1.0 * re6) + (-1.0 * re7))

# Species:   id = BAR_C8, name = BAR:C8, affected by kineticLaw

init BAR_C8=0.0
dBAR_C8/dt=(1/(cell))*(( 1.0 * re8))

# Species:   id = C8_pC3, name = C8:pC3, affected by kineticLaw

init C8_pC3=0.0
dC8_pC3/dt=(1/(cell))*(( 1.0 * re9) + (-1.0 * re10))

# Species:   id = pC3_Apop, name = pC3:Apop, affected by kineticLaw

init pC3_Apop=0.0
dpC3_Apop/dt=(1/(cell))*(( 1.0 * re13) + (-1.0 * re14))

# Species:   id = Apop, name = Apop, affected by kineticLaw

init Apop=0.0
dApop/dt=(1/(cell))*((-1.0 * re13) + ( 1.0 * re14) + (-1.0 * re21) + ( 1.0 * re43))

# Species:   id = C8_Bid, name = C8:Bid, affected by kineticLaw

init C8_Bid=0.0
dC8_Bid/dt=(1/(cell))*(( 1.0 * re11) + (-1.0 * re12))

# Species:   id = C3_pC6, name = C3:pC6, affected by kineticLaw

init C3_pC6=0.0
dC3_pC6/dt=(1/(cell))*(( 1.0 * re15) + (-1.0 * re16))

# Species:   id = XIAP_C3, name = XIAP:C3, affected by kineticLaw

init XIAP_C3=0.0
dXIAP_C3/dt=(1/(cell))*(( 1.0 * re17) + (-1.0 * re18))

# Species:   id = PARP_C3, name = PARP:C3, affected by kineticLaw

init PARP_C3=0.0
dPARP_C3/dt=(1/(cell))*(( 1.0 * re19) + (-1.0 * re20))

# Species:   id = Apop_XIAP, name = Apop:XIAP, affected by kineticLaw

init Apop_XIAP=0.0
dApop_XIAP/dt=(1/(cell))*(( 1.0 * re21))

# Species:   id = Smac_XIAP, name = Smac:XIAP, affected by kineticLaw

init Smac_XIAP=0.0
dSmac_XIAP/dt=(1/(cell))*(( 1.0 * re22))

# Species:   id = Bcl2c_tBid, name = Bcl2c:tBid, affected by kineticLaw

par Bcl2c_tBi=0.0
aux Bcl2c_tBi=Bcl2c_tBi
dBcl2c_tBi/dt=(1/(cell))*(( 1.0 * re23))

# Species:   id = Bax_tBid, name = Bax:tBid, affected by kineticLaw

init Bax_tBid=0.0
dBax_tBid/dt=(1/(cell))*(( 1.0 * re24) + (-1.0 * re25))

# Species:   id = Baxm_Bcl2, name = Baxm:Bcl2, affected by kineticLaw

init Baxm_Bcl2=0.0
dBaxm_Bcl2/dt=(1/(mitochond))*(( 1.0 * re27))

# Species:   id = Bax4, name = Bax4, affected by kineticLaw

init Bax4=0.0
dBax4/dt=(1/(mitochond))*(( 1.0 * re30) + (-1.0 * re32) + (-1.0 * re33))

# Species:   id = Bax2_Bcl2, name = Bax2:Bcl2, affected by kineticLaw

init Bax2_Bcl2=0.0
dBax2_Bcl2/dt=(1/(mitochond))*(( 1.0 * re31))

# Species:   id = Bax4_Bcl2, name = Bax4:Bcl2, affected by kineticLaw

init Bax4_Bcl2=0.0
dBax4_Bcl2/dt=(1/(mitochond))*(( 1.0 * re32))

# Species:   id = M, name = M, affected by kineticLaw

init M=500000.0
dM/dt=(1/(mitochond))*((-1.0 * re33))

# Species:   id = Bax4_M, name = Bax4:M, affected by kineticLaw

init Bax4_M=0.0
dBax4_M/dt=(1/(mitochond))*(( 1.0 * re33) + (-1.0 * re34))

# Species:   id = M_hash, name = M#, affected by kineticLaw

init M_hash=0.0
dM_hash/dt=(1/(mitochond))*(( 1.0 * re34) + (-1.0 * re35) + ( 1.0 * re36) + (-1.0 * re38) + ( 1.0 * re39))

# Species:   id = Smacm, name = Smac_m, affected by kineticLaw

init Smacm=100000.0
dSmacm/dt=(1/(mitochond))*((-1.0 * re35))

# Species:   id = M_hash_Smacm, name = M#:Smac_m, affected by kineticLaw

par M_hash_Sm=0.0
aux M_hash_Sm=M_hash_Sm
dM_hash_Sm/dt=(1/(mitochond))*(( 1.0 * re35) + (-1.0 * re36))

# Species:   id = Smacr, name = Smac released, affected by kineticLaw

init Smacr=0.0
dSmacr/dt=(1/(mitochond))*(( 1.0 * re36) + (-1.0 * re37))

# Species:   id = CytoCm, name = CytoC_m, affected by kineticLaw

init CytoCm=500000.0
dCytoCm/dt=(1/(mitochond))*((-1.0 * re38))

# Species:   id = M_hash_CytoCm, name = M#:CytoC_m, affected by kineticLaw

par M_hash_Cy=0.0
aux M_hash_Cy=M_hash_Cy
dM_hash_Cy/dt=(1/(mitochond))*(( 1.0 * re38) + (-1.0 * re39))

# Species:   id = CytoCr, name = CytoC released, affected by kineticLaw

init CytoCr=0.0
dCytoCr/dt=(1/(mitochond))*(( 1.0 * re39) + (-1.0 * re40))

# Species:   id = CytoC, name = CytoC, affected by kineticLaw

init CytoC=0.0
dCytoC/dt=(1/(cell))*(( 1.0 * re40) + (-1.0 * re41) + ( 1.0 * re42))

# Species:   id = Apaf, name = Apaf, affected by kineticLaw

init Apaf=100000.0
dApaf/dt=(1/(cell))*((-1.0 * re41))

# Species:   id = CytoC_Apaf, name = CytoC:Apaf, affected by kineticLaw

par CytoC_Apa=0.0
aux CytoC_Apa=CytoC_Apa
dCytoC_Apa/dt=(1/(cell))*(( 1.0 * re41) + (-1.0 * re42))

# Species:   id = Apaf_hash, name = Apaf#, affected by kineticLaw

init Apaf_hash=0.0
dApaf_hash/dt=(1/(cell))*(( 1.0 * re42) + (-1.0 * re43))

# Species:   id = pC9, name = proC9, affected by kineticLaw

init pC9=100000.0
dpC9/dt=(1/(cell))*((-1.0 * re43))

# Species:   id = Baxm, name = Baxm, affected by kineticLaw

init Baxm=0.0
dBaxm/dt=(1/(mitochond))*(( 1.0 * re26) + (-1.0 * re27) + (-1.0 * re29) + (-1.0 * re29))

# Species:   id = Bax2, name = Bax2, affected by kineticLaw

init Bax2=0.0
dBax2/dt=(1/(mitochond))*(( 1.0 * re29) + (-1.0 * re30) + (-1.0 * re30) + (-1.0 * re31))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

