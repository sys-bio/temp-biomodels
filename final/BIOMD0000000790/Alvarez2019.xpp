
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Alvarez2019 - A nonlinear mathematical model of cell-mediated immune response for tumor phenotypic heterogeneity
#
# isDescribedBy http://identifiers.org/pubmed/30930063
# is http://identifiers.org/biomodels.db/MODEL1908120003
# is http://identifiers.org/biomodels.db/BIOMD0000000790
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = Function_for_Tumor_Growth_1, name = Function_for_Tumor_Growth_1
Function_(a,T_1,b)=(a*T_1*(1-b*T_1))


# FunctionDefinition id = Function_for_E1_Depletion, name = Function_for_E1_Depletion
Functio_1(c_3,T_1,T_2,E_1)=(c_3*(T_1+T_2)*E_1)


# FunctionDefinition id = Function_for_Tumor_Killing_T1_E1, name = Function_for_Tumor_Killing_T1_E1
Functio_2(mu,E_1,T_1)=(mu*E_1*T_1)


# FunctionDefinition id = Function_for_E2_Recruitment, name = Function_for_E2_Recruitment
Functio_3(d_1,T_1,E_1)=(d_1*T_1*E_1)


# FunctionDefinition id = Function_for_E2_Depletion, name = Function_for_E2_Depletion
Functio_4(d_2,T_1,E_2)=(d_2*T_1*E_2)


# FunctionDefinition id = Function_for_Tumor_Competition_1, name = Function_for_Tumor_Competition_1
Functio_5(nu,T_1,T_2)=(nu*T_1*T_2)


# FunctionDefinition id = Function_for_E1_Recruitment, name = Function_for_E1_Recruitment
Functio_6(c_4,T_1,s,T_2,E_1,c_5)=(c_4*(T_1+s*T_2)*E_1/(c_5+T_1+T_2))


# FunctionDefinition id = Function_for_Tumor_Killing_T1_E2, name = Function_for_Tumor_Killing_T1_E2
Functio_7(beta,E_2,T_1)=(beta*E_2*T_1)


# FunctionDefinition id = Function_for_Tumor_Killing_T2_E1, name = Function_for_Tumor_Killing_T2_E1
Functio_8(q,E_1,T_2,mu)=(mu*q*E_1*T_2)


# FunctionDefinition id = Function_for_Tumor_Competition_2, name = Function_for_Tumor_Competition_2
Functio_9(r,nu,T_1,T_2)=(r*nu*T_1*T_2)


# FunctionDefinition id = Function_for_Tumor_Growth_2, name = Function_for_Tumor_Growth_2
Functi_10(a,p,T_2,b)=(a*p*T_2*(1-b*T_2))


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  a, name = a, constant
par a=0.514

# Parameter:   id =  b, name = b, constant
par b=2.0E-9

# Parameter:   id =  mu, name = mu, constant
par mu=1.101E-7

# Parameter:   id =  beta, name = beta, constant
par beta=1.101E-10

# Parameter:   id =  nu, name = nu, constant
par nu=1.101E-9

# Parameter:   id =  c_1, name = c_1, constant
par c_1=13000.0

# Parameter:   id =  c_2, name = c_2, constant
par c_2=0.0412

# Parameter:   id =  c_3, name = c_3, constant
par c_3=3.422E-10

# Parameter:   id =  c_4, name = c_4, constant
par c_4=0.1245

# Parameter:   id =  c_5, name = c_5, constant
par c_5=2.0193E7

# Parameter:   id =  d_1, name = d_1, constant
par d_1=1.1E-7

# Parameter:   id =  d_2, name = d_2, constant
par d_2=3.42E-10

# Parameter:   id =  d_3, name = d_3, constant
par d_3=0.02

# Parameter:   id =  p, name = p, constant
par p=0.35

# Parameter:   id =  q, name = q, constant
par q=1.0

# Parameter:   id =  r, name = r, constant
par r=1.5

# Parameter:   id =  s, name = s, constant
par s=1.0

# Parameter:   id =  T_Total, name = T_Total, defined by a Rule

# assignmentRule: variable = T_Total
T_Total=T_1+T_2
aux T_Total=T_Total

# Reaction: id = Tumor_Growth_1, name = Tumor_Growth_1

Tumor_Gro=compartme*Function_(a, T_1, b)

# Reaction: id = Tumor_Growth_2, name = Tumor_Growth_2

Tumor_G_1=compartme*Functi_10(a, p, T_2, b)

# Reaction: id = Tumor_Killing_T1_E1, name = Tumor_Killing_T1_E1

Tumor_Kil=compartme*Functio_2(mu, E_1_Innat, T_1)

# Reaction: id = Tumor_Killing_T1_E2, name = Tumor_Killing_T1_E2

Tumor_K_1=compartme*Functio_7(beta, E_2_Adapt, T_1)

# Reaction: id = Tumor_Competition_1, name = Tumor_Competition_1

Tumor_Com=compartme*Functio_5(nu, T_1, T_2)

# Reaction: id = Tumor_Competition_2, name = Tumor_Competition_2

Tumor_C_1=compartme*Functio_9(r, nu, T_1, T_2)

# Reaction: id = Tumor_Killing_T2_E1, name = Tumor_Killing_T2_E1

Tumor_K_2=compartme*Functio_8(q, E_1_Innat, T_2, mu)

# Reaction: id = E1_Production_Constant, name = E1_Production_Constant

E1_Produc=compartme*Constant_(c_1)

# Reaction: id = E1_Death, name = E1_Death

E1_Death=compartme*c_2*E_1_Innat

# Reaction: id = E1_Depletion, name = E1_Depletion

E1_Deplet=compartme*Functio_1(c_3, T_1, T_2, E_1_Innat)

# Reaction: id = E1_Recruitment, name = E1_Recruitment

E1_Recrui=compartme*Functio_6(c_4, T_1, s, T_2, E_1_Innat, c_5)

# Reaction: id = E2_Recruitment, name = E2_Recruitment

E2_Recrui=compartme*Functio_3(d_1, T_1, E_1_Innat)

# Reaction: id = E2_Depletion, name = E2_Depletion

E2_Deplet=compartme*Functio_4(d_2, T_1, E_2_Adapt)

# Reaction: id = E2_Death, name = E2_Death

E2_Death=compartme*d_3*E_2_Adapt

# Species:   id = T_1, name = T_1, affected by kineticLaw

init T_1=8.0E7
dT_1/dt=(1/(compartme))*(( 1.0 * Tumor_Gro) + (-1.0 * Tumor_Kil) + (-1.0 * Tumor_K_1) + (-1.0 * Tumor_Com))

# Species:   id = T_2, name = T_2, affected by kineticLaw

init T_2=2.0E7
dT_2/dt=(1/(compartme))*(( 1.0 * Tumor_G_1) + (-1.0 * Tumor_C_1) + (-1.0 * Tumor_K_2))

# Species:   id = E_1_Innate, name = E_1_Innate, affected by kineticLaw

par E_1_Innat=1.05E7
aux E_1_Innat=E_1_Innat
dE_1_Innat/dt=(1/(compartme))*(( 1.0 * E1_Produc) + (-1.0 * E1_Death) + (-1.0 * E1_Deplet) + ( 1.0 * E1_Recrui))

# Species:   id = E_2_Adaptive, name = E_2_Adaptive, affected by kineticLaw

par E_2_Adapt=0.0
aux E_2_Adapt=E_2_Adapt
dE_2_Adapt/dt=(1/(compartme))*(( 1.0 * E2_Recrui) + (-1.0 * E2_Deplet) + (-1.0 * E2_Death))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

