
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Wodarz2003 Immunological Memory
#
# is http://identifiers.org/biomodels.db/MODEL1006230061
# isDescribedBy http://identifiers.org/pubmed/13678598
# is http://identifiers.org/biomodels.db/BIOMD0000000684
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = COMpartment, name = population, constant
par COMpartme=1.0

# Parameter:   id =  S, name = S, defined by a Rule

# Parameter:   id =  r, name = r, constant
par r=0.5

# Parameter:   id =  epsilon, name = epsilon, constant
par epsilon=0.1

# Parameter:   id =  H, name = H, defined by a Rule

# Parameter:   id =  P, name = P, defined by a Rule

# Parameter:   id =  I_1, name = I_1, defined by a Rule

# Parameter:   id =  I_2, name = I_2, defined by a Rule

# Parameter:   id =  I_12, name = I_12, defined by a Rule

# Parameter:   id =  I_21, name = I_21, defined by a Rule

# Parameter:   id =  R_1, name = R_1, defined by a Rule

# Parameter:   id =  R_2, name = R_2, defined by a Rule

# Parameter:   id =  R_12, name = R_12, defined by a Rule

# Parameter:   id =  P_1, name = P_1, defined by a Rule

# Parameter:   id =  k_1, name = k_1, constant
par k_1=0.1

# Parameter:   id =  log_P1, name = log_P1, defined by a Rule

# Parameter:   id =  P_2, name = P_2, defined by a Rule

# Parameter:   id =  k_2, name = k_2, constant
par k_2=0.1

# Parameter:   id =  log_P2, name = log_P2, defined by a Rule

# Parameter:   id =  G, name = G, defined by a Rule

# Parameter:   id =  g, name = g, constant
par g_1=0.01

# Parameter:   id =  beta_1, name = beta_1, constant
par beta_1=1.0

# Parameter:   id =  alpha_1, name = alpha_1, constant
par alpha_1=0.1

# Parameter:   id =  beta_2, name = beta_2, constant
par beta_2=1.0

# Parameter:   id =  alpha_2, name = alpha_2, constant
par alpha_2=0.1

# Parameter:   id =  a_1, name = a_1, constant
par a_1=0.03

# Parameter:   id =  a_2, name = a_2, constant
par a_2=1.0

# Parameter:   id =  d, name = d, constant
par d=0.01

# Parameter:   id =  u, name = u, constant
par u=0.5

# assignmentRule: variable = H
H=S+I_1+R_1+I_2+R_2+I_12+I_21+R_12
aux H=H

# assignmentRule: variable = P
P=P_1+P_2
aux P=P

# assignmentRule: variable = log_P2
log_P2=log(10, P_2)/log(10, 10)
aux log_P2=log_P2

# assignmentRule: variable = G
G=1/g_1
aux G=G

# assignmentRule: variable = log_P1
log_P1=log(10, P_1)/log(10, 10)
aux log_P1=log_P1

# rateRule: variable = S
init S=100.0
dS/dt=(((r*H/(epsilon*H+1)-d*S)-beta_1*S*P_1)-beta_2*S*P_2)+g_1*(R_1+R_2+R_12)

# rateRule: variable = I_1
init I_1=0.0
dI_1/dt=(beta_1*S*P_1-a_1*I_1)-alpha_1*I_1

# rateRule: variable = I_2
init I_2=0.0
dI_2/dt=(beta_2*S*P_2-a_2*I_2)-alpha_2*I_2

# rateRule: variable = I_12
init I_12=0.0
dI_12/dt=(beta_2*R_1*P_2-a_2*I_12)-alpha_2*I_12

# rateRule: variable = I_21
init I_21=0.0
dI_21/dt=(beta_1*R_2*P_1-a_1*I_21)-alpha_1*I_21

# rateRule: variable = R_1
init R_1=0.0
dR_1/dt=((alpha_1*I_1-d*R_1)-g_1*R_1)-beta_2*R_1*P_2

# rateRule: variable = R_2
init R_2=0.0
dR_2/dt=((alpha_2*I_2-d*R_2)-g_1*R_2)-beta_1*R_2*P_1

# rateRule: variable = R_12
init R_12=0.0
dR_12/dt=((alpha_2*I_12+alpha_1*I_21)-d*R_12)-g_1*R_12

# rateRule: variable = P_1
init P_1=0.1
dP_1/dt=k_1*(I_1+I_21)-u*P_1

# rateRule: variable = P_2
init P_2=0.1
dP_2/dt=k_2*(I_2+I_12)-u*P_2

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

