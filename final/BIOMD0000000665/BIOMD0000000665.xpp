
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Fallon2000 - Interleukin-2 dynamics
#
# is http://identifiers.org/biomodels.db/MODEL1006230001
# is http://identifiers.org/biomodels.db/BIOMD0000000665
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = modifier_function_1, name = modifier function 1
modifier_(parameter,modifier,substrate)=(parameter*modifier*substrate)


# FunctionDefinition id = function_for_Li, name = function for Li
function_(kf,Li,Ri,kre,Ci,Ve,Na)=((kf*Li*Ri-kre*Ci)/(Ve*Na))


# FunctionDefinition id = function_for_L, name = function for L
functio_1(kf,L,Rs,kr,Cs,kx,Li,Ve,Na,Y)=((kf*L*Rs-kr*Cs-kx*Li*Ve*Na)*Y/Na)


# FunctionDefinition id = modifier_function_3, name = modifier function 3
modifie_1(parameter,modifier)=(parameter*modifier)


# Compartment: id = COMpartment, name = compartment, constant
par COMpartme=1.0

# Parameter:   id =  kr, name = kr, constant
par kr=0.0138

# Parameter:   id =  kf, name = kf, defined by a Rule

# Parameter:   id =  kre, name = kre, defined by a Rule

# Parameter:   id =  kfe, name = kfe, defined by a Rule

# Parameter:   id =  kt, name = kt, constant
par kt=0.007

# Parameter:   id =  Vs, name = Vs, constant
par Vs=11.0

# Parameter:   id =  ksyn, name = ksyn, constant
par ksyn=0.0011

# Parameter:   id =  ke, name = ke, constant
par ke=0.04

# Parameter:   id =  kx, name = kx, constant
par kx=0.15

# Parameter:   id =  kh, name = kh, constant
par kh=0.035

# Parameter:   id =  Ve, name = Ve, constant
par Ve=1.0E-14

# Parameter:   id =  NA, name = NA, constant
par NA=6.022E11

# Parameter:   id =  IL2, name = IL2, constant
par IL2=1.0

# assignmentRule: variable = kf
kf= piecew1 
aux kf=kf

# assignmentRule: variable = kre
kre= piecew2 
aux kre=kre

# assignmentRule: variable = kfe
kfe= piecew3 
aux kfe=kfe

# rateRule: variable = Y_0
init Y_0=2.5E8
dY_0/dt= piecew4 

# Reaction: id = Receptor_binding_to_Ligand, name = Receptor binding to Ligand

Receptor_=COMpartme*modifier_(kf, L_0, Rs_0)

# Reaction: id = Receptor_Ligand_complex_dissocation, name = Receptor/Ligand complex dissocation

Recepto_1=COMpartme*kr*Cs_0

# Reaction: id = Upregulation_of_Receptor_Synthesis, name = Upregulation of Receptor Synthesis

Upregulat=COMpartme*modifie_1(ksyn, Cs_0)

# Reaction: id = Receptor_Internalisation, name = Receptor Internalisation

Recepto_2=COMpartme*kt*Rs_0

# Reaction: id = Receptor_Synthesis, name = Receptor Synthesis

Recepto_3=COMpartme*Constant_(Vs)

# Reaction: id = Endocytosis_of_Receptor_Ligand_complex, name = Endocytosis of Receptor/Ligand complex

Endocytos=COMpartme*ke*Cs_0

# Reaction: id = IL_2_binding_to_free_BetaGamma_heterodimer_1, name = IL-2 binding to free BetaGamma heterodimer

IL_2_bind=COMpartme*modifier_(kfe, Li_0, Ri_0)

# Reaction: id = Dissocation_of_IL_2_Heterodimer_complex, name = Dissocation of IL-2/Heterodimer complex

Dissocati=COMpartme*kre*Ci_0

# Reaction: id = Degradation_of_heterodimer, name = Degradation of heterodimer

Degradati=COMpartme*kh*Ri_0

# Reaction: id = Degradation_of_IL_2_heterodimer_complex, name = Degradation of IL-2/heterodimer complex

Degrada_1=COMpartme*kh*Ci_0

# Reaction: id = IL_2_binding_dissociating, name = IL-2 binding/dissociating

IL_2_bi_1=COMpartme*function_(kf, Li_0, Ri_0, kre, Ci_0, Ve, NA)

# Reaction: id = Ligand_recycling, name = Ligand recycling

Ligand_re=COMpartme*kx*Li_0

# Reaction: id = Ligand_Binding_Dissociation_Recycling, name = Ligand Binding/Dissociation/Recycling

Ligand_Bi=COMpartme*functio_1(kf, L_0, Rs_0, kr, Cs_0, kx, Li_0, Ve, NA, Y_0)

# Species:   id = Rs_0, name = Rs, affected by kineticLaw

init Rs_0=1500.0
dRs_0/dt=(1/(COMpartme))*((-1.0 * Receptor_) + ( 1.0 * Recepto_1) + ( 1.0 * Upregulat) + (-1.0 * Recepto_2) + ( 1.0 * Recepto_3))

# Species:   id = Cs_0, name = Cs, affected by kineticLaw

init Cs_0=1.0
dCs_0/dt=(1/(COMpartme))*(( 1.0 * Receptor_) + (-1.0 * Recepto_1) + (-1.0 * Endocytos))

# Species:   id = Ri_0, name = Ri, affected by kineticLaw

init Ri_0=300.0
dRi_0/dt=(1/(COMpartme))*(( 1.0 * Recepto_2) + (-1.0 * IL_2_bind) + ( 1.0 * Dissocati) + (-1.0 * Degradati))

# Species:   id = Ci_0, name = Ci, affected by kineticLaw

init Ci_0=1.0
dCi_0/dt=(1/(COMpartme))*(( 1.0 * Endocytos) + ( 1.0 * IL_2_bind) + (-1.0 * Dissocati) + (-1.0 * Degrada_1))

# Species:   id = Li_0, name = Li, affected by kineticLaw

init Li_0=0.01
dLi_0/dt=(1/(COMpartme))*((-1.0 * IL_2_bi_1) + (-1.0 * Ligand_re))

# Species:   id = Ld_0, name = Ld, affected by kineticLaw

init Ld_0=1.0
dLd_0/dt=(1/(COMpartme))*(( 1.0 * Degrada_1))

# Species:   id = L_0, name = L, affected by kineticLaw

init L_0=10.0
dL_0/dt=(1/(COMpartme))*((-1.0 * Ligand_Bi))

# Species:   id = Y_0, name = Y, involved in a rule 


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if (IL2  ==  1) then (kr/11.1) else (kr/8.2)

piecew2=if (IL2  ==  1) then (kr*8) else (kr*5)

piecew3=if (IL2  ==  1) then (kre/1000) else (kre/3000)

piecew4=if ((600*Cs_0/(250+Cs_0)-200)  >  0) then ((600*Cs_0/(250+Cs_0)-200)*1000) else (0)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

