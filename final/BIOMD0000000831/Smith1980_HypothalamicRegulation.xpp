
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Smith1980 - Hypothalamic Regulation
#
# isInstanceOf http://identifiers.org/mamo/MAMO_0000046
# isInstanceOf http://identifiers.org/biomodels.db/MODEL7898438988
# isInstanceOf http://identifiers.org/taxonomy/9913
# isInstanceOf http://identifiers.org/go/GO:0032274
# isInstanceOf http://identifiers.org/go/GO:0032275
# isDescribedBy http://identifiers.org/go/GO:0032274
# isDescribedBy http://identifiers.org/go/GO:0032275
# isDescribedBy http://identifiers.org/pubmed/6986927
# is http://identifiers.org/biomodels.db/MODEL7898438988
# is http://identifiers.org/biomodels.db/BIOMD0000000831
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_R_formation, name = Function for R formation
Function_(c,h,T,H)=((c-h*T)*(1-H))


# FunctionDefinition id = Function_for_R_degradation, name = Function for R degradation
Functio_1(b1,R)=(b1*R)


# FunctionDefinition id = Function_fror_LH_formation, name = Function fror LH formation
Functio_2(g1,R)=(g1*R)


# FunctionDefinition id = Function_for_LH_degradation, name = Function for LH degradation
Functio_3(b2,L)=(b2*L)


# FunctionDefinition id = Function_for_T_formation, name = Function for T formation
Functio_4(g2,L)=(g2*L)


# FunctionDefinition id = Function_for_T_degradation, name = Function for T degradation
Functio_5(b3,T)=(b3*T)


# Compartment: id = Compartment, name = Com, constant
par Compartme=1.0

# Parameter:   id =  h, name = h, constant
par h=12.0

# Parameter:   id =  c, name = c, constant
par c=100.0

# Parameter:   id =  b1, name = b1, constant
par b1=1.29

# Parameter:   id =  g1, name = g1, constant
par g1=10.0

# Parameter:   id =  b2, name = b2, constant
par b2=0.97

# Parameter:   id =  g2, name = g2, constant
par g2=0.7

# Parameter:   id =  b3, name = b3, constant
par b3=1.39

# Parameter:   id =  x, name = x, defined by a Rule

# Parameter:   id =  H, name = H, defined by a Rule

# assignmentRule: variable = x
x=T_renamed-c/h
aux x=x

# assignmentRule: variable = H
H_1= piecew1 
aux H_1=H_1

# Reaction: id = LH_formation, name = LH formation

LH_format=Compartme*Functio_2(g1, R)

# Reaction: id = T_formation, name = T formation

T_formati=Compartme*Functio_4(g2, L)

# Reaction: id = R_degradation, name = R degradation

R_degrada=Compartme*Functio_1(b1, R)

# Reaction: id = LH_degradation, name = LH degradation

LH_degrad=Compartme*Functio_3(b2, L)

# Reaction: id = T_degradation, name = T degradation

T_degrada=Compartme*Functio_5(b3, T_renamed)

# Reaction: id = R_formation, name = R formation

R_formati=Compartme*Function_(c, h, T_renamed, H_1)

# Species:   id = R, name = R, affected by kineticLaw

init R=0.5
dR/dt=(1/(Compartme))*((-1.0 * R_degrada) + ( 1.0 * R_formati))

# Species:   id = L, name = L, affected by kineticLaw

init L=22.0
dL/dt=(1/(Compartme))*(( 1.0 * LH_format) + (-1.0 * LH_degrad))

# Species:   id = T, name = T, affected by kineticLaw

par T_renamed=15.0
aux T_renamed=T_renamed
dT_renamed/dt=(1/(Compartme))*(( 1.0 * T_formati) + (-1.0 * T_degrada))


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if (x  >  0) then (1) else (0)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

