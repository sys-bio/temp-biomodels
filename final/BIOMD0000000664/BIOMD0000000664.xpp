
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Muller2008 - Simplified MAPK activation Dynamics (Model B)
#
# is http://identifiers.org/biomodels.db/MODEL8687732743
# isDescribedBy http://identifiers.org/pubmed/18171696
# isDescribedBy http://identifiers.org/pubmed/18171696
# is http://identifiers.org/biomodels.db/BIOMD0000000664
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = function_1_1, name = function 1_1
function_(a1,b1,g1)=(a1*g1/(b1+g1))


# FunctionDefinition id = function_1_2, name = function 1_2
functio_1(a2,b2,g2)=(a2*g2/(b2+g2))


# FunctionDefinition id = function_2_1, name = function 2_1
functio_2(C_Raf,C_Raf_inactive,E,FGFR,f13)=(f13*(E-C_Raf-C_Raf_inactive)*FGFR)


# FunctionDefinition id = function_3_1, name = function 3_1
functio_3(C_Raf,C_Raf_inactive,E,MAPK,f53)=(f53*(E-C_Raf-C_Raf_inactive)*MAPK)


# FunctionDefinition id = function_4_1, name = function 4_1
functio_4(FGFR,f14)=(f14*FGFR)


# FunctionDefinition id = function_4_2, name = function 4_2
functio_5(MSH,f24)=(f24*MSH)


# FunctionDefinition id = function_4_3, name = function 4_3
functio_6(C_Raf,f35)=(f35*C_Raf)


# FunctionDefinition id = function_4_4, name = function 4_4
functio_7(B_Raf,f45)=(f45*B_Raf)


# FunctionDefinition id = function_5_1, name = function 5_1
functio_8(C_Raf,MSH,h36_y3)=(h36_y3*MSH*C_Raf)


# Compartment: id = Compartment, name = Compartment, constant
par Compartme=1.0

# Parameter:   id =  a1, name = a1, constant
par a1=10.0

# Parameter:   id =  g1, name = g1, defined by a Rule

# Parameter:   id =  b1, name = b1, constant
par b1=10.0

# Parameter:   id =  d1, name = d1, constant
par d1=0.2

# Parameter:   id =  a2, name = a2, constant
par a2=10.0

# Parameter:   id =  g2, name = g2, defined by a Rule

# Parameter:   id =  b2, name = b2, constant
par b2=10.0

# Parameter:   id =  d2, name = d2, constant
par d2=0.1

# Parameter:   id =  f53, name = f53, constant
par f53=1.5

# Parameter:   id =  f13, name = f13, constant
par f13=0.6

# Parameter:   id =  h36_y3, name = h36, constant
par h36_y3=0.1

# Parameter:   id =  d3, name = d3, constant
par d3=1.0

# Parameter:   id =  E, name = E, constant
par E=10.0

# Parameter:   id =  f14, name = f14, constant
par f14=0.1

# Parameter:   id =  f24, name = f24, constant
par f24=0.8

# Parameter:   id =  d4, name = d4, constant
par d4=1.1

# Parameter:   id =  f35, name = f35, constant
par f35=0.3

# Parameter:   id =  f45, name = f45, constant
par f45=0.1

# Parameter:   id =  d5, name = d5, constant
par d5=1.0

# Parameter:   id =  d6, name = d6, constant
par d6=0.001

# assignmentRule: variable = g1
g1= piecew2 
aux g1=g1

# assignmentRule: variable = g1_0
g1_0=g1
aux g1_0=g1_0

# assignmentRule: variable = g2
g2= piecew3 
aux g2=g2

# assignmentRule: variable = g2_0
g2_0=g2
aux g2_0=g2_0

# Reaction: id = FGFR_Activation, name = FGFR Stimulus

FGFR_Acti=Compartme*function_(a1, b1, g1)

# Reaction: id = FGFR_Degradation, name = FGFR Degradation

FGFR_Degr=Compartme*d1*FGFR

# Reaction: id = MSH_Activation, name = MSH Stimulus

MSH_Activ=Compartme*functio_1(a2, b2, g2)

# Reaction: id = MSH_Degradation, name = MSH Degradation

MSH_Degra=Compartme*d2*MSH

# Reaction: id = C_Raf_Activation_1, name = C-Raf Activation 1

C_Raf_Act=Compartme*functio_2(C_Raf, C_Raf_ina, E, FGFR, f13)

# Reaction: id = C_Raf_Activation_2, name = C_Raf Activation 2

C_Raf_A_1=Compartme*functio_3(C_Raf, C_Raf_ina, E, MAPK, f53)

# Reaction: id = C_Raf_Degradation, name = C-Raf Degradation

C_Raf_Deg=Compartme*d3*C_Raf

# Reaction: id = B_Raf_Activation_1, name = B-Raf Activation 1

B_Raf_Act=Compartme*functio_4(FGFR, f14)

# Reaction: id = B_Raf_Activation_2, name = B-Raf Activation 2

B_Raf_A_1=Compartme*functio_5(MSH, f24)

# Reaction: id = B_Raf_Degradation, name = B-Raf Degradation

B_Raf_Deg=Compartme*d4*B_Raf

# Reaction: id = MAPK_Activation_1, name = MAPK Activation 1

MAPK_Acti=Compartme*functio_6(C_Raf, f35)

# Reaction: id = MAPK_Activation_2, name = MAPK Activation 2

MAPK_Ac_1=Compartme*functio_7(B_Raf, f45)

# Reaction: id = MAPK_Degradation, name = MAPK Degradation

MAPK_Degr=Compartme*d5*MAPK

# Reaction: id = C_Raf_Inactivation, name = C-Raf Inactivation

C_Raf_I_1=Compartme*functio_8(C_Raf, MSH, h36_y3)

# Reaction: id = Inactive_C_Raf_degradation, name = Inactive C-Raf degradation

Inactive_=Compartme*d6*C_Raf_ina

# Species:   id = FGFR, name = FGFR, affected by kineticLaw

init FGFR=0.0
dFGFR/dt=(1/(Compartme))*(( 1.0 * FGFR_Acti) + (-1.0 * FGFR_Degr))

# Species:   id = MSH, name = MSH, affected by kineticLaw

init MSH=0.0
dMSH/dt=(1/(Compartme))*(( 1.0 * MSH_Activ) + (-1.0 * MSH_Degra))

# Species:   id = B_Raf, name = B-Raf, affected by kineticLaw

init B_Raf=0.0
dB_Raf/dt=(1/(Compartme))*(( 1.0 * B_Raf_Act) + ( 1.0 * B_Raf_A_1) + (-1.0 * B_Raf_Deg))

# Species:   id = MAPK, name = MAPK, affected by kineticLaw

init MAPK=0.0
dMAPK/dt=(1/(Compartme))*(( 1.0 * MAPK_Acti) + ( 1.0 * MAPK_Ac_1) + (-1.0 * MAPK_Degr))

# Species:   id = C_Raf_inactive, name = C-Raf inactive, affected by kineticLaw

par C_Raf_ina=0.0
aux C_Raf_ina=C_Raf_ina
dC_Raf_ina/dt=(1/(Compartme))*(( 1.0 * C_Raf_I_1) + (-1.0 * Inactive_))

# Species:   id = g2_0, name = g2, involved in a rule 

# Species:   id = C_Raf, name = C-Raf, affected by kineticLaw

init C_Raf=0.0
dC_Raf/dt=(1/(Compartme))*(( 1.0 * C_Raf_Act) + ( 1.0 * C_Raf_A_1) + (-1.0 * C_Raf_Deg) + (-1.0 * C_Raf_I_1))

# Species:   id = g1_0, name = g1, involved in a rule 


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if ((t  >=  5) && (t  <  10)) then (1) else (0)

piecew2=if ((t  >=  0) && (t  <  5)) then (0) else ( piecew1 )

piecew3=if ((t  >=  0) && (t  <  5)) then (1) else (0)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

