
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Reed2004 - Methionine Cycle
#
# is http://identifiers.org/biomodels.db/MODEL1006230091
# isDescribedBy http://identifiers.org/pubmed/14637052
# is http://identifiers.org/biomodels.db/BIOMD0000000698
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = function_for_V_MATI, name = function for V_MATI
function_(V_max_mati,K_m_mati,MET,AdoMet,K_i_meti)=(V_max_mati/(1+K_m_mati/MET*(1+AdoMet/K_i_meti)))


# FunctionDefinition id = function_for_V_MATIII, name = function for V_MATIII
functio_1(V_max_matiii,Met,K_m1_MATIII,K_m2_MATIII)=(V_max_matiii/(1+K_m1_MATIII*K_m2_MATIII/(Met^2+Met*K_m2_MATIII)))


# FunctionDefinition id = function_for_V_GMNT, name = function for V_GMNT
functio_2(V_max_GMNT,K_m_GMNT,AdoMet,AdoHcy,K_i_GMNT)=(V_max_GMNT/(1+(K_m_GMNT/AdoMet)^2.3)*1/(1+AdoHcy/K_i_GMNT))


# FunctionDefinition id = function_for_V_METH, name = function for V_METH
functio_3(V_max_METH,AdoMet,K_m2_METH_A,K_m1_METH)=(V_max_METH/(1+K_m1_METH/AdoMet+K_m2_METH_A+K_m2_METH_A*K_m1_METH/AdoMet))


# FunctionDefinition id = function_for_V_MS, name = function for V_MS
functio_4(V_max_MS,mTHF,Hcy,K_d_MS,K_m_Hcy_MS,K_m_mTHF_MS)=(V_max_MS*mTHF*Hcy/(K_d_MS*K_m_Hcy_MS+K_m_Hcy_MS*mTHF+K_m_mTHF_MS*Hcy+mTHF*Hcy))


# FunctionDefinition id = function_for_V_CBS, name = function for V_CBS
functio_5(beta1,AdoMet,AdoHcy,beta2,Hcy)=((beta1*(AdoMet+AdoHcy)-beta2)*Hcy)


# FunctionDefinition id = function_for_V_BHMT, name = function for V_BHMT
functio_6(AdoMet,AdoHcy,V_max_bhmt,Hcy,K_m_BHMT)=((0.7-0.025*(AdoMet+AdoHcy-150))*V_max_bhmt*Hcy/(K_m_BHMT+Hcy))


# FunctionDefinition id = function_for_V_AH, name = function for V_AH
functio_7(alpha1,AdoHcy,alpha2,Hcy)=(alpha1*(AdoHcy-alpha2*Hcy))


# Compartment: id = Compartment, name = Compartment, constant
par Compartme=1.0

# Parameter:   id =  V_max_MATI, name = V_max_MATI, constant
par V_max_MAT=561.0

# Parameter:   id =  K_m_MATI, name = K_m_MATI, constant
par K_m_MATI=41.0

# Parameter:   id =  K_i_MATI, name = K_i_MATI, constant
par K_i_MATI=50.0

# Parameter:   id =  V_max_MATIII, name = V_max_MATIII, constant
par V_max_M_1=22870.0

# Parameter:   id =  K_m1_MATIII, name = K_m1_MATIII, defined by a Rule

# Parameter:   id =  K_m2_MATIII, name = K_m2_MATIII, constant
par K_m2_MATI=21.1

# Parameter:   id =  V_max_GNMT, name = V_max_GNMT, constant
par V_max_GNM=10600.0

# Parameter:   id =  K_m_GNMT, name = K_m_GNMT, constant
par K_m_GNMT=4500.0

# Parameter:   id =  K_i_GNMT, name = K_i_GNMT, constant
par K_i_GNMT=20.0

# Parameter:   id =  V_max_METH, name = V_max_METH, constant
par V_max_MET=4521.0

# Parameter:   id =  K_m1_METH, name = K_m1_METH, defined by a Rule

# Parameter:   id =  K_m2_METH_A, name = K_m2_METH_A, constant
par K_m2_METH=10.0

# Parameter:   id =  alpha_1, name = alpha_1, constant
par alpha_1=100.0

# Parameter:   id =  alpha_2, name = alpha_2, constant
par alpha_2=10.0

# Parameter:   id =  beta_1, name = beta_1, constant
par beta_1=1.7

# Parameter:   id =  beta_2, name = beta_2, constant
par beta_2=30.0

# Parameter:   id =  V_max_MS, name = V_max_MS, constant
par V_max_MS=500.0

# Parameter:   id =  K_m_Hcy_MS, name = K_m_Hcy_MS, constant
par K_m_Hcy_M=0.1

# Parameter:   id =  K_m_5mTHF_MS, name = K_m_5mTHF_MS, constant
par K_m_5mTHF=25.0

# Parameter:   id =  K_d_MS, name = K_d_MS, constant
par K_d_MS=1.0

# Parameter:   id =  V_max_BHMT, name = V_max_BHMT, constant
par V_max_BHM=2500.0

# Parameter:   id =  K_m_BHMT, name = K_m_BHMT, constant
par K_m_BHMT=12.0

# assignmentRule: variable = Metin
Metin= piecew3 
aux Metin=Metin

# assignmentRule: variable = K_m1_MATIII
K_m1_MATI=20000/(1+5.7*(AdoMet/(AdoMet+600))^2)
aux K_m1_MATI=K_m1_MATI

# assignmentRule: variable = K_m1_METH
K_m1_METH=1*(1+AdoHcy/4)
aux K_m1_METH=K_m1_METH

# Reaction: id = V_MAT_I, name = V_MAT-I

V_MAT_I=Compartme*function_(V_max_MAT, K_m_MATI, Methionin, AdoMet, K_i_MATI)

# Reaction: id = V_MAT_III, name = V_MAT-III

V_MAT_III=Compartme*functio_1(V_max_M_1, Methionin, K_m1_MATI, K_m2_MATI)

# Reaction: id = V_METH, name = V_METH

V_METH=Compartme*functio_3(V_max_MET, AdoMet, K_m2_METH, K_m1_METH)

# Reaction: id = V_GNMT, name = V_GNMT

V_GNMT=Compartme*functio_2(V_max_GNM, K_m_GNMT, AdoMet, AdoHcy, K_i_GNMT)

# Reaction: id = V_AH, name = V_AH

V_AH=Compartme*functio_7(alpha_1, AdoHcy, alpha_2, Homocyste)

# Reaction: id = V_MS, name = V_MS

V_MS=Compartme*functio_4(V_max_MS, _5mTHF, Homocyste, K_d_MS, K_m_Hcy_M, K_m_5mTHF)

# Reaction: id = V_BHMT, name = V_BHMT

V_BHMT=Compartme*functio_6(AdoMet, AdoHcy, V_max_BHM, Homocyste, K_m_BHMT)

# Reaction: id = V_CBS, name = V_CBS

V_CBS=Compartme*functio_5(beta_1, AdoMet, AdoHcy, beta_2, Homocyste)

# Reaction: id = METIN, name = METIN
# Local Parameter:   id =  k1, name = k1
par k1=1.0


METIN_1=Compartme*k1*Metin

# Species:   id = Metin, name = Metin, involved in a rule 

# Species:   id = Methionine, name = Methionine, affected by kineticLaw

par Methionin=53.5
aux Methionin=Methionin
dMethionin/dt=(1/(Compartme))*((-1.0 * V_MAT_I) + (-1.0 * V_MAT_III) + ( 1.0 * V_MS) + ( 1.0 * V_BHMT) + ( 1.0 * METIN_1))

# Species:   id = AdoMet, name = AdoMet, affected by kineticLaw

init AdoMet=137.6
dAdoMet/dt=(1/(Compartme))*(( 1.0 * V_MAT_I) + ( 1.0 * V_MAT_III) + (-1.0 * V_METH) + (-1.0 * V_GNMT))

# Species:   id = AdoHcy, name = AdoHcy, affected by kineticLaw

init AdoHcy=13.2
dAdoHcy/dt=(1/(Compartme))*(( 1.0 * V_METH) + ( 1.0 * V_GNMT) + (-1.0 * V_AH))

# Species:   id = Homocysteine, name = Homocysteine, affected by kineticLaw

par Homocyste=0.88
aux Homocyste=Homocyste
dHomocyste/dt=(1/(Compartme))*(( 1.0 * V_AH) + (-1.0 * V_MS) + (-1.0 * V_BHMT) + (-1.0 * V_CBS))

# Species:   id = _5mTHF, name = 5mTHF, constant
par _5mTHF=5.2


# Species:   id = Cystathionine, name = Cystathionine, affected by kineticLaw

par Cystathio=0.0
aux Cystathio=Cystathio
dCystathio/dt=(1/(Compartme))*(( 1.0 * V_CBS))


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if ((t  >=  5) && (t  <  8)) then (100) else (200)

piecew2=if ((t  >=  2) && (t  <  5)) then (300) else ( piecew1 )

piecew3=if ((t  <  2) || (t  >=  8)) then (200) else ( piecew2 )


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

