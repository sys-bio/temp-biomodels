
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Chitnis2008 - Mathematical model of malaria transmission
#
# isDescribedBy http://identifiers.org/pubmed/18293044
# is http://identifiers.org/biomodels.db/MODEL1805220002
# is http://identifiers.org/biomodels.db/BIOMD0000000949
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = human_birth_rate, name = human birth rate
human_bir(Psi_h,N_h)=(Psi_h*N_h)


# FunctionDefinition id = Mosquito_birth_rate, name = Mosquito birth rate
Mosquito_(Psi_v,N_v)=(Psi_v*N_v)


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# Compartment: id = Human, name = Human, constant
par Human=1.0

# Compartment: id = Mosquito, name = Mosquito, constant
par Mosquito=1.0

# Parameter:   id =  Capital_lambda_h, name = Capital_lambda_h, defined by a Rule

# Parameter:   id =  Psi_h, name = Psi_h, defined by a Rule

# Parameter:   id =  Psi_v, name = Psi_v, defined by a Rule

# Parameter:   id =  sigma_v, name = sigma_v, defined by a Rule

# Parameter:   id =  sigma_h, name = sigma_h, defined by a Rule

# Parameter:   id =  Beta_hv, name = Beta_hv, defined by a Rule

# Parameter:   id =  Beta_vh, name = Beta_vh, defined by a Rule

# Parameter:   id =  Beta_tilde_vh, name = Beta_tilde_vh, defined by a Rule

# Parameter:   id =  v_h, name = v_h, defined by a Rule

# Parameter:   id =  v_v, name = v_v, defined by a Rule

# Parameter:   id =  gamma_h, name = gamma_h, defined by a Rule

# Parameter:   id =  delta_h, name = delta_h, defined by a Rule

# Parameter:   id =  rho_h, name = rho_h, defined by a Rule

# Parameter:   id =  u_1h, name = u_1h, defined by a Rule

# Parameter:   id =  u_2h, name = u_2h, defined by a Rule

# Parameter:   id =  u_1v, name = u_1v, defined by a Rule

# Parameter:   id =  u_2v, name = u_2v, defined by a Rule

# Parameter:   id =  N_h, name = N_h, defined by a Rule

# Parameter:   id =  N_v, name = N_v, defined by a Rule

# Parameter:   id =  f_h, name = f_h, defined by a Rule

# Parameter:   id =  f_v, name = f_v, defined by a Rule

# Parameter:   id =  lambda_h, name = lambda_h, defined by a Rule

# Parameter:   id =  lambda_v, name = lambda_v, defined by a Rule

# Parameter:   id =  Baseline_dummy_variable, name = Baseline_dummy_variable, constant
par Baseline_=0.0

# assignmentRule: variable = Capital_lambda_h
Capital_l= piecew1 
aux Capital_l=Capital_l

# assignmentRule: variable = Psi_h
Psi_h= piecew2 
aux Psi_h=Psi_h

# assignmentRule: variable = Psi_v
Psi_v= piecew3 
aux Psi_v=Psi_v

# assignmentRule: variable = sigma_v
sigma_v= piecew4 
aux sigma_v=sigma_v

# assignmentRule: variable = sigma_h
sigma_h= piecew5 
aux sigma_h=sigma_h

# assignmentRule: variable = Beta_hv
Beta_hv= piecew6 
aux Beta_hv=Beta_hv

# assignmentRule: variable = Beta_vh
Beta_vh= piecew7 
aux Beta_vh=Beta_vh

# assignmentRule: variable = Beta_tilde_vh
Beta_tild= piecew8 
aux Beta_tild=Beta_tild

# assignmentRule: variable = v_h
v_h= piecew9 
aux v_h=v_h

# assignmentRule: variable = v_v
v_v= piecew10 
aux v_v=v_v

# assignmentRule: variable = gamma_h
gamma_h= piecew11 
aux gamma_h=gamma_h

# assignmentRule: variable = delta_h
delta_h= piecew12 
aux delta_h=delta_h

# assignmentRule: variable = rho_h
rho_h= piecew13 
aux rho_h=rho_h

# assignmentRule: variable = u_1h
u_1h= piecew14 
aux u_1h=u_1h

# assignmentRule: variable = u_2h
u_2h= piecew15 
aux u_2h=u_2h

# assignmentRule: variable = u_1v
u_1v= piecew16 
aux u_1v=u_1v

# assignmentRule: variable = u_2v
u_2v= piecew17 
aux u_2v=u_2v

# assignmentRule: variable = N_h
N_h=Susceptib+Exposed_H+Infected_+Recovered
aux N_h=N_h

# assignmentRule: variable = N_v
N_v=Suscept_1+Exposed_M+Infecte_1
aux N_v=N_v

# assignmentRule: variable = f_h
f_h=u_1h+u_2h*N_h
aux f_h=f_h

# assignmentRule: variable = f_v
f_v=u_1v+u_2v*N_v
aux f_v=f_v

# assignmentRule: variable = lambda_h
lambda_h=sigma_v*N_v*sigma_h/(sigma_v*N_v+sigma_h*N_h)*Beta_hv*Infecte_1/N_v
aux lambda_h=lambda_h

# assignmentRule: variable = lambda_v
lambda_v=sigma_v*sigma_h*N_h/(sigma_v*N_v+sigma_h*N_h)*(Beta_vh*Infected_/N_h+Beta_tild*Recovered/N_h)
aux lambda_v=lambda_v

# Reaction: id = Human_Immigration, name = Human Immigration

Human_Imm=Human*Constant_(Capital_l)

# Reaction: id = Human_Birth, name = Human Birth

Human_B_1=Human*human_bir(Psi_h, N_h)

# Reaction: id = Human_Loss_of_Immunity, name = Human Loss of Immunity

Human_Los=Human*rho_h*Recovered

# Reaction: id = Human_Infection, name = Human Infection

Human_Inf=Human*lambda_h*Susceptib

# Reaction: id = Human_Susceptible_natural_death, name = Human Susceptible natural death

Human_Sus=Human*f_h*Susceptib

# Reaction: id = Human_disease_progression, name = Human disease progression

Human_dis=Human*v_h*Exposed_H

# Reaction: id = Human_Exposed_natural_death, name = Human Exposed natural death

Human_Exp=Human*f_h*Exposed_H

# Reaction: id = Human_Recovery, name = Human Recovery

Human_Rec=Human*gamma_h*Infected_

# Reaction: id = Human_disease_induced_death, name = Human disease-induced death

Human_d_1=Human*delta_h*Infected_

# Reaction: id = Human_Infectious_natural_death, name = Human Infectious natural death

Human_I_1=Human*f_h*Infected_

# Reaction: id = Human_Recovered_natural_death, name = Human Recovered natural death

Human_R_1=Human*f_h*Recovered

# Reaction: id = Mosquito_birth, name = Mosquito birth

Mosquit_1=Mosquito*Mosquito_(Psi_v, N_v)

# Reaction: id = Mosquito_infection, name = Mosquito infection

Mosquit_2=Mosquito*lambda_v*Suscept_1

# Reaction: id = Mosquito_Susceptible_death, name = Mosquito Susceptible death

Mosquit_3=Mosquito*f_v*Suscept_1

# Reaction: id = Mosquito_disease_progression, name = Mosquito disease progression

Mosquit_4=Mosquito*v_v*Exposed_M

# Reaction: id = Mosquito_Exposed_death, name = Mosquito Exposed death

Mosquit_5=Mosquito*f_v*Exposed_M

# Reaction: id = Mosquito_Infected_death, name = Mosquito Infected death

Mosquit_6=Mosquito*f_v*Infecte_1

# Species:   id = Susceptible_Human, name = Susceptible, affected by kineticLaw

par Susceptib=600.0
aux Susceptib=Susceptib
dSusceptib/dt=(1/(Human))*(( 1.0 * Human_Imm) + ( 1.0 * Human_B_1) + ( 1.0 * Human_Los) + (-1.0 * Human_Inf) + (-1.0 * Human_Sus))

# Species:   id = Exposed_Human, name = Exposed, affected by kineticLaw

par Exposed_H=20.0
aux Exposed_H=Exposed_H
dExposed_H/dt=(1/(Human))*(( 1.0 * Human_Inf) + (-1.0 * Human_dis) + (-1.0 * Human_Exp))

# Species:   id = Infected_Human, name = Infected, affected by kineticLaw

par Infected_=3.0
aux Infected_=Infected_
dInfected_/dt=(1/(Human))*(( 1.0 * Human_dis) + (-1.0 * Human_Rec) + (-1.0 * Human_d_1) + (-1.0 * Human_I_1))

# Species:   id = Recovered, name = Recovered, affected by kineticLaw

init Recovered=0.0
dRecovered/dt=(1/(Human))*((-1.0 * Human_Los) + ( 1.0 * Human_Rec) + (-1.0 * Human_R_1))

# Species:   id = Susceptible_Mosquito, name = Susceptible, affected by kineticLaw

par Suscept_1=2400.0
aux Suscept_1=Suscept_1
dSuscept_1/dt=(1/(Mosquito))*(( 1.0 * Mosquit_1) + (-1.0 * Mosquit_2) + (-1.0 * Mosquit_3))

# Species:   id = Exposed_Mosquito, name = Exposed, affected by kineticLaw

par Exposed_M=30.0
aux Exposed_M=Exposed_M
dExposed_M/dt=(1/(Mosquito))*(( 1.0 * Mosquit_2) + (-1.0 * Mosquit_4) + (-1.0 * Mosquit_5))

# Species:   id = Infected_Mosquito, name = Infected, affected by kineticLaw

par Infecte_1=5.0
aux Infecte_1=Infecte_1
dInfecte_1/dt=(1/(Mosquito))*(( 1.0 * Mosquit_4) + (-1.0 * Mosquit_6))


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if (Baseline_  ==  0) then (0.041) else (0.033)

piecew2=if (Baseline_  ==  0) then (5.5E-5) else (0.00011)

piecew3=if (Baseline_  ==  0) then (0.13) else (0.13)

piecew4=if (Baseline_  ==  0) then (0.33) else (0.5)

piecew5=if (Baseline_  ==  0) then (4.3) else (19)

piecew6=if (Baseline_  ==  0) then (0.022) else (0.022)

piecew7=if (Baseline_  ==  0) then (0.24) else (0.48)

piecew8=if (Baseline_  ==  0) then (0.024) else (0.048)

piecew9=if (Baseline_  ==  0) then (0.1) else (0.1)

piecew10=if (Baseline_  ==  0) then (0.083) else (0.091)

piecew11=if (Baseline_  ==  0) then (0.0035) else (0.0035)

piecew12=if (Baseline_  ==  0) then (1.8E-5) else (9E-5)

piecew13=if (Baseline_  ==  0) then (0.0027) else (0.00055)

piecew14=if (Baseline_  ==  0) then (8.8E-6) else (1.6E-5)

piecew15=if (Baseline_  ==  0) then (2E-7) else (3E-7)

piecew16=if (Baseline_  ==  0) then (0.033) else (0.033)

piecew17=if (Baseline_  ==  0) then (4E-5) else (2E-5)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

