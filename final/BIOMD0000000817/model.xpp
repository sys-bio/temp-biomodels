
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Gevertz2018 - cancer treatment with oncolytic viruses and dendritic cell injections minimal model
#
# is http://identifiers.org/biomodels.db/MODEL1909180002
# is http://identifiers.org/biomodels.db/BIOMD0000000817
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_Tumor_Cell_exponential_growth, name = Function for Tumor Cell exponential growth
Function_(r,U)=(r*U)


# FunctionDefinition id = Function_for_Tumor_Cell_infection, name = Function for Tumor Cell infection
Functio_1(beta,U,V,N)=(beta*U*V/N)


# FunctionDefinition id = Function_for_Tumor_Cell_elimination, name = Function for Tumor Cell elimination
Functio_2(k0,c_kill,I,U,T,N)=((k0+c_kill*I)*U*T/N)


# FunctionDefinition id = Function_for_Infected_Tumor_Cell_death, name = Function for Infected Tumor Cell death
Functio_3(delta_I,I)=(delta_I*I)


# FunctionDefinition id = Function_for_Infected_Tumor_Cell_elimination, name = Function for Infected Tumor Cell elimination
Functio_4(k0,c_kill,I,T,N)=((k0+c_kill*I)*I*T/N)


# FunctionDefinition id = Function_for_treatment_with_virus, name = Function for treatment with virus
Functio_5(U_V)=(U_V)


# FunctionDefinition id = Function_for_release_of_virus, name = Function for release of virus
Functio_6(alpha,delta_I,I)=(alpha*delta_I*I)


# FunctionDefinition id = Function_for_natural_decay_of_virus, name = Function for natural decay of virus
Functio_7(delta_V,V)=(delta_V*V)


# FunctionDefinition id = Function_for_Activation_of_T_cells__4_1BBL, name = Function for Activation of T cells; 4-1BBL
Functio_8(C_T,I)=(C_T*I)


# FunctionDefinition id = Function_for_natural_death_of_T_cells, name = Function for natural death of T cells
Functio_9(delta_T,T)=(delta_T*T)


# FunctionDefinition id = Function_for_production_of_T_cells, name = Function for production of T cells
Functi_10(chi_D,D)=(chi_D*D)


# FunctionDefinition id = Function_for_treatment_of_DC, name = Function for treatment of DC
Functi_11(U_D)=(U_D)


# FunctionDefinition id = Function_for_natural_decay_of_DC, name = Function for natural decay of DC
Functi_12(delta_D,D)=(delta_D*D)


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  r, name = r, constant
par r=0.3198

# Parameter:   id =  beta, name = beta, constant
par beta=1.008538

# Parameter:   id =  k0, name = k0, constant
par k0=2.0

# Parameter:   id =  c_kill, name = c_kill, constant
par c_kill=0.623397

# Parameter:   id =  delta_I, name = delta_I, constant
par delta_I=1.0

# Parameter:   id =  U_V, name = U_V, constant
par U_V=0.0

# Parameter:   id =  alpha, name = alpha, constant
par alpha=3.0

# Parameter:   id =  delta_V, name = delta_V, constant
par delta_V=2.3

# Parameter:   id =  C_T, name = C_T, constant
par C_T=1.428064

# Parameter:   id =  chi_D, name = chi_D, constant
par chi_D=4.901894

# Parameter:   id =  delta_T, name = delta_T, constant
par delta_T=0.35

# Parameter:   id =  U_D, name = U_D, constant
par U_D=0.0

# Parameter:   id =  delta_D, name = delta_D, constant
par delta_D=0.35

# Parameter:   id =  OV_dose, name = OV dose, constant
par OV_dose=2.5

# Parameter:   id =  D0, name = D0, constant
par D0=1.0

# assignmentRule: variable = Total_cells_N
Total_cel=Uninfecte+Infected_+Tumor_tar
aux Total_cel=Total_cel

# assignmentRule: variable = total_tumor_cells
total_tum=Uninfecte+Infected_
aux total_tum=total_tum

# Reaction: id = Tumor_cell_U_exponential_growth, name = Tumor cell U exponential growth

Tumor_cel=compartme*Function_(r, Uninfecte)

# Reaction: id = Tumour_cell_U_elimination, name = Tumour cell U elimination

Tumour_ce=compartme*Functio_2(k0, c_kill, Infected_, Uninfecte, Tumor_tar, Total_cel)

# Reaction: id = Tumor_Cell_U_infection, name = Tumor Cell U infection

Tumor_C_1=compartme*Functio_1(beta, Uninfecte, Oncolytic, Total_cel)

# Reaction: id = Infected_Tumor_Cell_I_death, name = Infected Tumor Cell I death

Infecte_1=compartme*Functio_3(delta_I, Infected_)

# Reaction: id = Infected_Tumor_Cell_I_elimination, name = Infected Tumor Cell I elimination

Infecte_2=compartme*Functio_4(k0, c_kill, Infected_, Tumor_tar, Total_cel)

# Reaction: id = Treatment_with_virus, name = Treatment with virus

Treatment=compartme*Functio_5(U_V)

# Reaction: id = Natural_decay_of_virus, name = Natural decay of virus

Natural_d=compartme*Functio_7(delta_V, Oncolytic)

# Reaction: id = Release_of_virus, name = Release of virus

Release_o=compartme*Functio_6(alpha, delta_I, Infected_)

# Reaction: id = Activation_of_T_cells_4_1BBL, name = Activation of T cells;4-1BBL

Activatio=compartme*Functio_8(C_T, Infected_)

# Reaction: id = Production_of_T_cells, name = Production of T cells

Productio=compartme*Functi_10(chi_D, Dendritic)

# Reaction: id = natural_death_of_T_cells, name = natural death of T cells

natural_1=compartme*Functio_9(delta_T, Tumor_tar)

# Reaction: id = Treatment_with_Dendritic_Cells_D, name = Treatment with Dendritic Cells D

Treatme_1=compartme*Functi_11(U_D)

# Reaction: id = natural_decay_of_Dendritic_Cells_D, name = natural decay of Dendritic Cells D

natural_2=compartme*Functi_12(delta_D, Dendritic)

# Species:   id = Uninfected_Tumor_Cell_U, name = Uninfected Tumor Cell U, affected by kineticLaw

par Uninfecte=57.414042
aux Uninfecte=Uninfecte
dUninfecte/dt=(1/(compartme))*(( 1.0 * Tumor_cel) + (-1.0 * Tumour_ce) + (-1.0 * Tumor_C_1))

# Species:   id = Infected_Cancer_Cell_I, name = Infected Cancer Cell I, affected by kineticLaw

par Infected_=0.0
aux Infected_=Infected_
dInfected_/dt=(1/(compartme))*(( 1.0 * Tumor_C_1) + (-1.0 * Infecte_1) + (-1.0 * Infecte_2))

# Species:   id = Oncolytic_Adenovirus_V, name = Oncolytic Adenovirus V, affected by kineticLaw
# Species is changed by 3 event(s)
par Oncolytic=0.0
aux Oncolytic=Oncolytic
dOncolytic/dt=(1/(compartme))*(( 1.0 * Treatment) + (-1.0 * Natural_d) + ( 1.0 * Release_o))

# Species:   id = Tumor_targeting_T_cells_T, name = Tumor-targeting T cells T, affected by kineticLaw

par Tumor_tar=0.0
aux Tumor_tar=Tumor_tar
dTumor_tar/dt=(1/(compartme))*(( 1.0 * Activatio) + ( 1.0 * Productio) + (-1.0 * natural_1))

# Species:   id = Naive_T_cells_A, name = Naive T cells A
# Warning species is not changed by either rules or reactions

par Naive_T_c=0.0
aux Naive_T_c=Naive_T_c

# Species:   id = Dendritic_Cells_D, name = Dendritic Cells D, affected by kineticLaw
# Species is changed by 3 event(s)
par Dendritic=0.0
aux Dendritic=Dendritic
dDendritic/dt=(1/(compartme))*(( 1.0 * Treatme_1) + (-1.0 * natural_2))

# Species:   id = Total_cells_N, name = Total cells N, involved in a rule 

# Species:   id = total_tumor_cells, name = total tumor cells, involved in a rule 

# event : OV_1
OV_1=if (t == 0) then (1.5) else (0.2)
global 1 {OV_1 - 1.1} {Oncolytic_Adenovirus_V=Oncolytic+OV_dose}

# event : OV_2
OV_2=if (t == 2) then (1.5) else (0.2)
global 1 {OV_2 - 1.1} {Oncolytic_Adenovirus_V=Oncolytic+OV_dose}

# event : OV_3
OV_3=if (t == 4) then (1.5) else (0.2)
global 1 {OV_3 - 1.1} {Oncolytic_Adenovirus_V=Oncolytic+OV_dose}

# event : AD_1
AD_1=if (t == 1) then (1.5) else (0.2)
global 1 {AD_1 - 1.1} {Dendritic_Cells_D=Dendritic+D0}

# event : AD_2
AD_2=if (t == 3) then (1.5) else (0.2)
global 1 {AD_2 - 1.1} {Dendritic_Cells_D=Dendritic+D0}

# event : AD_3
AD_3=if (t == 5) then (1.5) else (0.2)
global 1 {AD_3 - 1.1} {Dendritic_Cells_D=D0+Dendritic}

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

