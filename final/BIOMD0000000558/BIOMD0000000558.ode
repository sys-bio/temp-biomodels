
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Cloutier2012 - Feedback motif for Parkinson's disease
#
# is http://identifiers.org/biomodels.db/MODEL1410300000
# is http://identifiers.org/biomodels.db/BIOMD0000000558
# isDescribedBy http://identifiers.org/pubmed/22757587
# isDerivedFrom http://identifiers.org/pubmed/22757585
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = V2_4, name = V2-4
V2_4(k,S,Sx)=(k*S*Sx)


# FunctionDefinition id = V3, name = V3
V3(k,S,Sx)=(k*S*Sx)


# FunctionDefinition id = V1, name = V1
V1(k1,Sx,d,S,k2)=(k1*(1+Sx+d*(S/k2)^4/(1+(S/k2)^4)))


# Compartment: id = Neuron, name = Neuron, constant
par Neuron=1.0

# Parameter:   id =  k1, name = k1, constant
par k1=17280.0

# Parameter:   id =  k2, name = k2, constant
par k2=17280.0

# Parameter:   id =  k3, name = k3, constant
par k3=0.168

# Parameter:   id =  k4, name = k4, constant
par k4=0.168

# Parameter:   id =  dalphasyn, name = dalphasyn, constant
par dalphasyn=15.0

# Parameter:   id =  kalphasyn, name = kalphasyn, constant
par kalphasyn=8.5

# Parameter:   id =  S1, name = S1, defined by a Rule

# Parameter:   id =  S2_4, name = S2-4, constant
par S2_4=1.0

# assignmentRule: variable = S1
S1= piecew1 
aux S1=S1

# Reaction: id = ROS_1, name = ROS 1

ROS_1=Neuron*V1(k1, S1, dalphasyn, alpha_syn, kalphasyn)

# Reaction: id = ROS_2, name = ROS 2

ROS_2=Neuron*V2_4(k2, ROS, S2_4)

# Reaction: id = aSyn_1, name = aSyn 1

aSyn_1=Neuron*V3(k3, ROS, S2_4)

# Reaction: id = aSyn_2, name = aSyn 2

aSyn_2=Neuron*V2_4(k4, alpha_syn, S2_4)

# Species:   id = ROS, name = ROS, affected by kineticLaw

init ROS=1.0
dROS/dt=(1/(Neuron))*(( 1.0 * ROS_1) + (-1.0 * ROS_2))

# Species:   id = alpha_syn, name = alpha-syn, affected by kineticLaw

init alpha_syn=1.0
dalpha_syn/dt=(1/(Neuron))*(( 1.0 * aSyn_1) + (-1.0 * aSyn_2))


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if ((t  >  10) && (t  <  150)) then (2.6) else (0)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

