
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Zhang2007 - Mechanism of DNA damage response (Model3)
#
# unknownQualifier http://identifiers.org/mamo/MAMO_0000046
# isDescribedBy http://identifiers.org/pubmed/17245126
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = MAX
MAX(a,b)=(piecewise(a,a >= b,b))


# FunctionDefinition id = mdm2_production, name = mdm2 production
mdm2_prod(ks2,p53,m,Js2,ks2_1,mdm2,ks2_2)=(ks2+ks2_1*p53+ks2_2*mdm2^m/(Js2^m+mdm2^m))


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# Compartment: id = cyt, name = cyt, constant
par cyt=1.0

# Compartment: id = nuc, name = nuc, constant
par nuc=1.0

# Parameter:   id =  kd53, name = kd53', constant
par kd53=0.005

# Parameter:   id =  kd2, name = kd2', constant
par kd2=1.4

# Parameter:   id =  kd2_0, name = kd2, defined by a Rule

# Parameter:   id =  ks2, name = ks2', constant
par ks2=0.01

# Parameter:   id =  Js2, name = Js2, constant
par Js2=0.5

# Parameter:   id =  m, name = m, constant
par m=4.0

# Parameter:   id =  kd53_0, name = kd53, defined by a Rule

# Parameter:   id =  Q, name = Q, constant
par Q=0.5

# Parameter:   id =  J1, name = J1, constant
par J1=0.1

# Parameter:   id =  J2, name = J2, constant
par J2=0.1

# Parameter:   id =  krepair, name = krepair, constant
par krepair=0.0021429

# Parameter:   id =  u, name = u, defined by a Rule

# Parameter:   id =  r, name = r, defined by a Rule

# Parameter:   id =  v, name = v, defined by a Rule

# Parameter:   id =  q, name = q, defined by a Rule

# Parameter:   id =  G_u_v_q_r, name = G(u,v,q,r), defined by a Rule

# Parameter:   id =  kd53_, name = kd53'', constant
par kd53_=0.1

# Parameter:   id =  ks2_, name = ks2'', constant
par ks2_=0.5

# Parameter:   id =  ks53, name = ks53, constant
par ks53=0.0276

# Parameter:   id =  ks2__, name = ks2''', constant
par ks2__=1.0

# Parameter:   id =  Tdam, name = Tdam, constant
par Tdam=50.0

# Parameter:   id =  Dam0, name = Dam0, constant
par Dam0=0.2

# Parameter:   id =  x, name = x, defined by a Rule

# Parameter:   id =  heav_x, name = heav(x), defined by a Rule

# Parameter:   id =  max, name = max, defined by a Rule

# Parameter:   id =  ModelValue_20, name = Initial for Tdam, constant
par ModelValu=50.0

# assignmentRule: variable = max
max_1=MAX(0, Dam0-krepair*(t-Tdam))
aux max_1=max_1

# assignmentRule: variable = u
u=MDM2
aux u=u

# assignmentRule: variable = r
r=J2/p53
aux r=r

# assignmentRule: variable = v
v=Q
aux v=v

# assignmentRule: variable = q
q_1=J1/p53
aux q_1=q_1

# assignmentRule: variable = G_u_v_q_r
G_u_v_q_r=2*u*r/(v-u+v*q_1+u*r+((v-u+v*q_1+u*r)^2-4*u*r*(v-u))^0.5)
aux G_u_v_q_r=G_u_v_q_r

# assignmentRule: variable = kd53_0
kd53_0=kd53+kd53_*G_u_v_q_r
aux kd53_0=kd53_0

# assignmentRule: variable = x
x=t-ModelValu
aux x=x

# assignmentRule: variable = heav_x
heav_x= piecew2 
aux heav_x=heav_x

# assignmentRule: variable = DNAdamage
DNAdamage=heav_x*max_1
aux DNAdamage=DNAdamage

# assignmentRule: variable = kd2_0
kd2_0=kd2*(1+DNAdamage)
aux kd2_0=kd2_0

# Reaction: id = MDM2_production, name = MDM2 production

MDM2_pr_1=mdm2_prod(ks2, p53, m, Js2, ks2_, MDM2, ks2__)

# Reaction: id = MDM2_degradation, name = MDM2 degradation

MDM2_degr=cyt*kd2_0*MDM2

# Reaction: id = p53_production, name = p53 production

p53_produ=nuc*Constant_(ks53)

# Reaction: id = p53_degradation, name = p53 degradation

p53_degra=nuc*kd53_0*p53

# Species:   id = p53, name = p53, affected by kineticLaw

init p53=0.36
dp53/dt=(1/(nuc))*(( 1.0 * p53_produ) + (-1.0 * p53_degra))

# Species:   id = DNAdamage, name = DNAdamage, involved in a rule 

# Species:   id = MDM2, name = MDM2, affected by kineticLaw

init MDM2=0.71
dMDM2/dt=(1/(cyt))*(( 1.0 * MDM2_pr_1) + (-1.0 * MDM2_degr))


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if (x  >  0) then (1) else (0)

piecew2=if (x  <  0) then (0) else ( piecew1 )


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

