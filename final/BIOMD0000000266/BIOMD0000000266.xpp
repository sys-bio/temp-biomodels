
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Voit2003_Trehalose_Cycle
#
# is http://identifiers.org/biomodels.db/MODEL1007210000
# is http://identifiers.org/biomodels.db/BIOMD0000000266
# isDescribedBy http://identifiers.org/pubmed/12782117
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = cell, name = cell, constant
par cell=1.0

# Compartment: id = external, name = external, constant
par external=1.0

# Parameter:   id =  heat_shock, name = heat_shock, constant
par heat_shoc=0.0

# Parameter:   id =  X8, name = glucose transport into cell, defined by a Rule

# Parameter:   id =  X9, name = hexokinase/glucokinase, defined by a Rule

# Parameter:   id =  X10, name = phosphofructokinase, defined by a Rule

# Parameter:   id =  X11, name = G6P dehydrogenase, defined by a Rule

# Parameter:   id =  X12r, name = phoshpoglucomutase, defined by a Rule

# Parameter:   id =  X12f, name = phoshpoglucomutase, defined by a Rule

# Parameter:   id =  X13, name = UDPG pyrophosphorylase, defined by a Rule

# Parameter:   id =  X14, name = glycogen synthase, defined by a Rule

# Parameter:   id =  X15r, name = glycogen phosphorylase, defined by a Rule

# Parameter:   id =  X15f, name = glycogen phosphorylase, defined by a Rule

# Parameter:   id =  X16, name = glycogen use, defined by a Rule

# Parameter:   id =  X17, name = alpha,alpha-T6P synthase, defined by a Rule

# Parameter:   id =  X18, name = alpha,alpha--T6P phosphatase, defined by a Rule

# Parameter:   id =  X19, name = trehalase, defined by a Rule

# Parameter:   id =  flux_X1_in, name = flux_to_glucose, defined by a Rule

# Parameter:   id =  flux_X1_out, name = flux_from_glucose, defined by a Rule

# Parameter:   id =  flux_X2_in, name = flux_to_G6P, defined by a Rule

# Parameter:   id =  flux_X2_out, name = flux_from_G6P, defined by a Rule

# Parameter:   id =  flux_X3_in, name = flux_to_G1P, defined by a Rule

# Parameter:   id =  flux_X3_out, name = flux_from_G1P, defined by a Rule

# Parameter:   id =  flux_X4_in, name = flux_to_UDPG, defined by a Rule

# Parameter:   id =  flux_X4_out, name = flux_from_UDPG, defined by a Rule

# Parameter:   id =  flux_X5_in, name = flux_to_glycogen, defined by a Rule

# Parameter:   id =  flux_X5_out, name = flux_from_glucogen, defined by a Rule

# Parameter:   id =  flux_X6_in, name = flux_to_T6P, defined by a Rule

# Parameter:   id =  flux_X6_out, name = flux_from_T6P, defined by a Rule

# Parameter:   id =  flux_X7_in, name = flux_to_trehalose, defined by a Rule

# Parameter:   id =  flux_X7_out, name = flux_from_trehalose, defined by a Rule

# assignmentRule: variable = flux_X1_in
flux_X1_i=31.912*X0^0.968*X2^(-0.194)*X7^0.00968*X8^0.968*X19^0.0323
aux flux_X1_i=flux_X1_i

# assignmentRule: variable = flux_X1_out
flux_X1_o=89.935*X1^0.75*X6^(-0.4)*X9
aux flux_X1_o=flux_X1_o

# rateRule: variable = X1
init X1=0.03
dX1/dt=flux_X1_i-flux_X1_o

# assignmentRule: variable = flux_X2_in
flux_X2_i=142.72*X1^0.517*X2^(-0.179)*X3^0.183*X6^(-0.276)*X9^0.689*X12r^0.311
aux flux_X2_i=flux_X2_i

# assignmentRule: variable = flux_X2_out
flux_X2_o=30.12*X1^(-0.00333)*X2^0.575*X3^(-0.17)*X4^0.00333*X10^0.5111*X11^0.0667*X12f^0.411*X17^0.0111
aux flux_X2_o=flux_X2_o

# rateRule: variable = X2
init X2=1.0
dX2/dt=flux_X2_i-flux_X2_o

# assignmentRule: variable = flux_X3_in
flux_X3_i=7.8819*X2^0.394*X3^(-0.392)*X4^(-0.01)*X5^0.0128*X12f^0.949*X15r^0.0513
aux flux_X3_i=flux_X3_i

# assignmentRule: variable = flux_X3_out
flux_X3_o=76.434*X2^(-0.412)*X3^0.593*X12r^0.718*X13^0.18*X15f^0.103
aux flux_X3_o=flux_X3_o

# rateRule: variable = X3
init X3=0.1
dX3/dt=flux_X3_i-flux_X3_o

# assignmentRule: variable = flux_X4_in
flux_X4_i=11.07*X3^0.5*X13
aux flux_X4_i=flux_X4_i

# assignmentRule: variable = flux_X4_out
flux_X4_o=3.4556*X1^(-0.0429)*X2^0.214*X4^0.386*X14^0.857*X17^0.143
aux flux_X4_o=flux_X4_o

# rateRule: variable = X4
init X4=0.7
dX4/dt=flux_X4_i-flux_X4_o

# assignmentRule: variable = flux_X5_in
flux_X5_i=11.06*X2^0.04*X3^0.32*X4^0.16*X14^0.6*X15f^0.4
aux flux_X5_i=flux_X5_i

# assignmentRule: variable = flux_X5_out
flux_X5_o=4.929*X2^(-0.04)*X4^(-0.04)*X5^0.25*X15r^0.2*X16^0.8
aux flux_X5_o=flux_X5_o

# rateRule: variable = X5
init X5=1.0
dX5/dt=flux_X5_i-flux_X5_o

# assignmentRule: variable = flux_X6_in
flux_X6_i=0.19424*X1^(-0.3)*X2^0.3*X4^0.3*X17
aux flux_X6_i=flux_X6_i

# assignmentRule: variable = flux_X6_out
flux_X6_o=1.0939*X6^0.2*X18
aux flux_X6_o=flux_X6_o

# rateRule: variable = X6
init X6=0.02
dX6/dt=flux_X6_i-flux_X6_o

# assignmentRule: variable = flux_X7_in
flux_X7_i=1.0939*X6^0.2*X18
aux flux_X7_i=flux_X7_i

# assignmentRule: variable = flux_X7_out
flux_X7_o=1.2288*X7^0.3*X19
aux flux_X7_o=flux_X7_o

# rateRule: variable = X7
init X7=0.05
dX7/dt=flux_X7_i-flux_X7_o

# assignmentRule: variable = X8
X8= piecew1 
aux X8=X8

# assignmentRule: variable = X9
X9= piecew2 
aux X9=X9

# assignmentRule: variable = X10
X10= piecew3 
aux X10=X10

# assignmentRule: variable = X11
X11= piecew4 
aux X11=X11

# assignmentRule: variable = X12f
X12f= piecew5 
aux X12f=X12f

# assignmentRule: variable = X12r
X12r= piecew6 
aux X12r=X12r

# assignmentRule: variable = X13
X13= piecew7 
aux X13=X13

# assignmentRule: variable = X14
X14= piecew8 
aux X14=X14

# assignmentRule: variable = X15f
X15f= piecew9 
aux X15f=X15f

# assignmentRule: variable = X15r
X15r= piecew10 
aux X15r=X15r

# assignmentRule: variable = X16
X16= piecew11 
aux X16=X16

# assignmentRule: variable = X17
X17= piecew12 
aux X17=X17

# assignmentRule: variable = X18
X18= piecew13 
aux X18=X18

# assignmentRule: variable = X19
X19= piecew14 
aux X19=X19

# Species:   id = X0, name = glucose
par X0=1.0
aux X0=X0
#WARNING speciesID: X0, constant= false  , boundaryCondition = true but is not involved in assignmentRule, rateRule or events !

# Species:   id = X1, name = glucose, involved in a rule 

# Species:   id = X2, name = G6P, involved in a rule 

# Species:   id = X3, name = G1P, involved in a rule 

# Species:   id = X4, name = UDPG, involved in a rule 

# Species:   id = X5, name = glycogen, involved in a rule 

# Species:   id = X6, name = T6P, involved in a rule 

# Species:   id = X7, name = trehalose, involved in a rule 


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if (heat_shoc  ==  1) then (8) else (1)

piecew2=if (heat_shoc  ==  8) then (1) else (1)

piecew3=if (heat_shoc  ==  1) then (1) else (1)

piecew4=if (heat_shoc  ==  6) then (1) else (1)

piecew5=if (heat_shoc  ==  16) then (1) else (1)

piecew6=if (heat_shoc  ==  1) then (16) else (1)

piecew7=if (heat_shoc  ==  1) then (16) else (1)

piecew8=if (heat_shoc  ==  16) then (1) else (1)

piecew9=if (heat_shoc  ==  50) then (1) else (1)

piecew10=if (heat_shoc  ==  1) then (50) else (1)

piecew11=if (heat_shoc  ==  1) then (16) else (1)

piecew12=if (heat_shoc  ==  12) then (1) else (1)

piecew13=if (heat_shoc  ==  1) then (18) else (1)

piecew14=if (heat_shoc  ==  6) then (1) else (1)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

