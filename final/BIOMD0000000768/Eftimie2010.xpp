
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Eftimie2010 - immunity to melanoma
#
# isDescribedBy http://identifiers.org/pubmed/20450922
# is http://identifiers.org/biomodels.db/MODEL1907300001
# is http://identifiers.org/biomodels.db/BIOMD0000000768
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = cyt, name = cyt
cyt(i,Th,c,T,h2,kp,Cp)=((i*Th+c)*T/((h2+T)*(1+kp*Cp)))


# FunctionDefinition id = tp2, name = tp2
tp2(i3t,T,h1)=(i3t*T^2/(h1^2+T^2))


# FunctionDefinition id = tp1, name = tp1
tp1(i31,Th,c,T,h2)=((i31*Th+c)*T/(h2+T))


# FunctionDefinition id = thd, name = thd
thd(cth,f)=(cth*f)


# FunctionDefinition id = the, name = the
the(dth,T,Th)=(dth*T*Th)


# FunctionDefinition id = thg, name = thg
thg(bth,Th,kth,kp,Cp)=(bth*Th*(1-kth*Th)/(1+kp*Cp))


# FunctionDefinition id = ths, name = ths
ths(ath,C,T,h2,kp,Cp)=(ath*C*T/((h2+T)*(1+kp*Cp)))


# FunctionDefinition id = td, name = td
td(gtum,Cs,T,h0)=(gtum*Cs*T/(h0+T))


# FunctionDefinition id = tg, name = tg
tg(atum,T,kp,Cp,ktum,ks,Cs)=(atum*T*(1+kp*Cp)*(1-ktum*T)/(1+ks*Cs))


# Compartment: id = tme, name = tme, constant
par tme=1.0

# Parameter:   id =  ath, name = ath, constant
par ath=0.008

# Parameter:   id =  bth, name = bth, constant
par bth=0.09

# Parameter:   id =  cth, name = cth, constant
par cth=0.1

# Parameter:   id =  kth, name = kth, constant
par kth=1.0E-8

# Parameter:   id =  k1, name = k1, constant
par k1=1.0E-8

# Parameter:   id =  kp, name = kp, constant
par kp=1.0

# Parameter:   id =  ks, name = ks, constant
par ks=1.0

# Parameter:   id =  dth, name = dth, constant
par dth=1.0E-7

# Parameter:   id =  atum, name = atum, constant
par atum=0.514

# Parameter:   id =  ktum, name = ktum, constant
par ktum=1.02E-9

# Parameter:   id =  gtum, name = gtum, constant
par gtum=0.2

# Parameter:   id =  h2, name = h2, constant
par h2=1000.0

# Parameter:   id =  h1, name = h1, constant
par h1=1000000.0

# Parameter:   id =  h0, name = h0, constant
par h0=100000.0

# Parameter:   id =  j0, name = j0, constant
par j0=34.0

# Parameter:   id =  jts, name = jts, constant
par jts=34.0

# Parameter:   id =  jtp, name = jtp, constant
par jtp=34.0

# Parameter:   id =  i11, name = i11, constant
par i11=5.4

# Parameter:   id =  i21, name = i21, constant
par i21=8.6

# Parameter:   id =  i31, name = i31, constant
par i31=3.8E-4

# Parameter:   id =  i3t, name = i3t, constant
par i3t=10.0

# Parameter:   id =  c, name = c, constant
par c=1.0

# Parameter:   id =  f, name = f, defined by a Rule

# assignmentRule: variable = f
f=Th
aux f=f

# Reaction: id = Th_stimulation, name = Th stimulation

Th_stimul=tme*ths(ath, C_1, T_renamed, h2, kp, Cp)

# Reaction: id = Th_growth, name = Th growth

Th_growth=tme*thg(bth, Th, kth, kp, Cp)

# Reaction: id = Th_death, name = Th death

Th_death=tme*thd(cth, f)

# Reaction: id = Th_exhaustion, name = Th exhaustion

Th_exhaus=tme*the(dth, T_renamed, Th)

# Reaction: id = tumor_growth, name = tumor growth

tumor_gro=tme*tg(atum, T_renamed, kp, Cp, ktum, ks, Cs)

# Reaction: id = tumor_death, name = tumor death

tumor_dea=tme*td(gtum, Cs, T_renamed, h0)

# Reaction: id = cytokine_decay, name = cytokine decay

cytokine_=tme*j0*C_1

# Reaction: id = Th_cytokine_secretion, name = Th cytokine secretion

Th_cytoki=tme*cyt(i11, Th, c, T_renamed, h2, kp, Cp)

# Reaction: id = TS_cytokine_decay, name = TS cytokine decay

TS_cytoki=tme*jts*Cs

# Reaction: id = TS_cytokine_secretion, name = TS cytokine secretion

TS_cyto_1=tme*cyt(i21, Th, c, T_renamed, h2, kp, Cp)

# Reaction: id = TP_cytokine_decay, name = TP cytokine decay

TP_cytoki=tme*jtp*Cp

# Reaction: id = TP_cytokine_secretion, name = TP cytokine secretion

TP_cyto_1=tme*tp1(i31, Th, c, T_renamed, h2)

# Reaction: id = TP_cytokine_by_tumor, name = TP cytokine by tumor

TP_cyto_2=tme*tp2(i3t, T_renamed, h1)

# Species:   id = Th, name = Th, affected by kineticLaw

init Th=0.0
dTh/dt=(1/(tme))*(( 1.0 * Th_stimul) + ( 1.0 * Th_growth) + (-1.0 * Th_death) + (-1.0 * Th_exhaus))

# Species:   id = T, name = T, affected by kineticLaw

par T_renamed=100000.0
aux T_renamed=T_renamed
dT_renamed/dt=(1/(tme))*(( 1.0 * tumor_gro) + (-1.0 * tumor_dea))

# Species:   id = Cs, name = Cs, affected by kineticLaw

init Cs=0.0
dCs/dt=(1/(tme))*((-1.0 * TS_cytoki) + ( 1.0 * TS_cyto_1))

# Species:   id = Cp, name = Cp, affected by kineticLaw

init Cp=0.0
dCp/dt=(1/(tme))*((-1.0 * TP_cytoki) + ( 1.0 * TP_cyto_1) + ( 1.0 * TP_cyto_2))

# Species:   id = C, name = C, affected by kineticLaw

par C_1=0.0
aux C_1=C_1
dC_1/dt=(1/(tme))*((-1.0 * cytokine_) + ( 1.0 * Th_cytoki))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

