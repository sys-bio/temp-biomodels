
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Kuznetsov2016(II) - ?-syn aggregation kinetics in Parkinson's Disease
#
# is http://identifiers.org/biomodels.db/MODEL1608150000
# is http://identifiers.org/biomodels.db/BIOMD0000000615
# isDescribedBy http://identifiers.org/pubmed/27211070
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_R8, name = Function for R8
Function_(As,Bs,ModelValue_2,default_compartment)=(ModelValue_2*As*Bs/default_compartment)


# FunctionDefinition id = Function_for_R17, name = Function for R17
Functio_1(Bsyn,ModelValue_7,default_compartment)=(Bsyn*log(2)/ModelValue_7/default_compartment)


# FunctionDefinition id = Function_for_R1, name = Function for R1
Functio_2(ModelValue_3,default_compartment)=(ModelValue_3/default_compartment)


# FunctionDefinition id = Function_for_R5, name = Function for R5
Functio_3(As,ModelValue_0,ModelValue_8,default_compartment)=(ModelValue_0*As/ModelValue_8/default_compartment)


# FunctionDefinition id = Function_for_R9, name = Function for R9
Functio_4(Bs,ModelValue_7,default_compartment)=(Bs*log(2)/ModelValue_7/default_compartment)


# FunctionDefinition id = Function_for_R2, name = Function for R2
Functio_5(As,ModelValue_1,default_compartment)=(ModelValue_1*As/default_compartment)


# FunctionDefinition id = Function_for_R16, name = Function for R16
Functio_6(Asyn,Bsyn,ModelValue_2,default_compartment)=(ModelValue_2*Asyn*Bsyn/default_compartment)


# FunctionDefinition id = Function_for_R15, name = Function for R15
Functio_7(Asyn,ModelValue_1,default_compartment)=(ModelValue_1*Asyn/default_compartment)


# FunctionDefinition id = Function_for_R4, name = Function for R4
Functio_8(As,ModelValue_6,default_compartment)=(As*log(2)/ModelValue_6/default_compartment)


# FunctionDefinition id = Function_for_R11, name = Function for R11
Functio_9(Asyn,ModelValue_1,default_compartment)=(ModelValue_1*Asyn/default_compartment)


# FunctionDefinition id = Function_for_R6, name = Function for R6
Functi_10(ModelValue_4,default_compartment)=(ModelValue_4/default_compartment)


# FunctionDefinition id = Function_for_R12, name = Function for R12
Functi_11(Asyn,Bsyn,ModelValue_2,default_compartment)=(ModelValue_2*Asyn*Bsyn/default_compartment)


# FunctionDefinition id = Function_for_R7, name = Function for R7
Functi_12(As,ModelValue_1,default_compartment)=(ModelValue_1*As/default_compartment)


# FunctionDefinition id = Function_for_R13, name = Function for R13
Functi_13(Asyn,ModelValue_6,default_compartment)=(Asyn*log(2)/ModelValue_6/default_compartment)


# FunctionDefinition id = Function_for_R14, name = Function for R14
Functi_14(ModelValue_5,default_compartment)=(ModelValue_5/default_compartment)


# FunctionDefinition id = Function_for_R3, name = Function for R3
Functi_15(As,Bs,ModelValue_2,default_compartment)=(ModelValue_2*As*Bs/default_compartment)


# FunctionDefinition id = Function_for_R10, name = Function for R10
Functi_16(As,ModelValue_0,ModelValue_9,default_compartment)=(ModelValue_0*As/ModelValue_9/default_compartment)


# Compartment: id = default_compartment, name = Neuron, constant
par default_c=1.0

# Parameter:   id =  nA, name = nA, constant
par nA=2.91E-20

# Parameter:   id =  k1, name = k1, constant
par k1=3.0E-7

# Parameter:   id =  k2, name = k2, constant
par k2=2.0E-9

# Parameter:   id =  qA, name = qA, constant
par qA=4.17E-8

# Parameter:   id =  QBs, name = QBs, constant
par QBs=0.0

# Parameter:   id =  QBsyn, name = QBsyn, constant
par QBsyn=0.0

# Parameter:   id =  TAh1, name = TAh1, constant
par TAh1=72000.0

# Parameter:   id =  TBh1, name = TBh1, constant
par TBh1=720000.0

# Parameter:   id =  Vs, name = Vs, constant
par Vs=4.19E-15

# Parameter:   id =  Vsyn, name = Vsyn, constant
par Vsyn=4.19E-15

# Parameter:   id =  t1, name = t1, constant
par t1=0.0

# Parameter:   id =  t2, name = t2, constant
par t2=0.0

# Reaction: id = R1, name = R1

R1=default_c*Functio_2(qA, default_c)

# Reaction: id = R2, name = R2

R2=default_c*Functio_5(As, k1, default_c)

# Reaction: id = R3, name = R3

R3=default_c*Functi_15(As, Bs, k2, default_c)

# Reaction: id = R4, name = R4

R4=default_c*Functio_8(As, TAh1, default_c)

# Reaction: id = R5, name = R5

R5=default_c*Functio_3(As, nA, Vs, default_c)

# Reaction: id = R6, name = R6

R6=default_c*Functi_10(QBs, default_c)

# Reaction: id = R7, name = R7

R7=default_c*Functi_12(As, k1, default_c)

# Reaction: id = R8, name = R8

R8=default_c*Function_(As, Bs, k2, default_c)

# Reaction: id = R9, name = R9

R9=default_c*Functio_4(Bs, TBh1, default_c)

# Reaction: id = R10, name = R10

R10=default_c*Functi_16(As, nA, Vsyn, default_c)

# Reaction: id = R11, name = R11

R11=default_c*Functio_9(Asyn, k1, default_c)

# Reaction: id = R12, name = R12

R12=default_c*Functi_11(Asyn, Bsyn, k2, default_c)

# Reaction: id = R13, name = R13

R13=default_c*Functi_13(Asyn, TAh1, default_c)

# Reaction: id = R14, name = R14

R14=default_c*Functi_14(QBsyn, default_c)

# Reaction: id = R15, name = R15

R15=default_c*Functio_7(Asyn, k1, default_c)

# Reaction: id = R16, name = R16

R16=default_c*Functio_6(Asyn, Bsyn, k2, default_c)

# Reaction: id = R17, name = R17

R17=default_c*Functio_1(Bsyn, TBh1, default_c)

# Species:   id = As, name = As, affected by kineticLaw

init As=0.006
dAs/dt=(1/(default_c))*(( 1.0 * R1) + (-1.0 * R2) + (-1.0 * R3) + (-1.0 * R4) + (-1.0 * R5))

# Species:   id = Bs, name = Bs, affected by kineticLaw

init Bs=0.0
dBs/dt=(1/(default_c))*(( 1.0 * R6) + ( 1.0 * R7) + ( 1.0 * R8) + (-1.0 * R9))

# Species:   id = Asyn, name = Asyn, affected by kineticLaw

init Asyn=0.0
dAsyn/dt=(1/(default_c))*(( 1.0 * R10) + (-1.0 * R11) + (-1.0 * R12) + (-1.0 * R13))

# Species:   id = Bsyn, name = Bsyn, affected by kineticLaw

init Bsyn=0.0
dBsyn/dt=(1/(default_c))*(( 1.0 * R14) + ( 1.0 * R15) + ( 1.0 * R16) + (-1.0 * R17))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

