
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Schaber2006_Pheromone_Starvation_Crosstalk
#
# is http://identifiers.org/biomodels.db/MODEL5952001443
# is http://identifiers.org/biomodels.db/BIOMD0000000237
# isDescribedBy http://identifiers.org/pubmed/16884493
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  alpha, name = alpha, defined by a Rule

# Parameter:   id =  beta, name = beta, defined by a Rule

# Parameter:   id =  alphaA, name = alphaA, constant
par alphaA=1.0

# Parameter:   id =  betaA, name = betaA, constant
par betaA=1.0

# Parameter:   id =  alphat, name = alphat, constant
par alphat=0.0

# Parameter:   id =  betat, name = betat, constant
par betat=0.0

# Parameter:   id =  alphas, name = alphas, constant
par alphas=2.0

# Parameter:   id =  betas, name = betas, constant
par betas=20.0

# Parameter:   id =  alphae, name = alphae, constant
par alphae=10.0

# Parameter:   id =  betae, name = betae, constant
par betae=360.0

# Parameter:   id =  k3, name = k3, constant
par k3=1.0

# Parameter:   id =  k4, name = k4, constant
par k4=1.0

# Parameter:   id =  k5, name = k5, constant
par k5=1.0

# Parameter:   id =  k6, name = k6, constant
par k6=1.0

# Parameter:   id =  k9, name = k9, constant
par k9=1.0

# Parameter:   id =  k10, name = k10, constant
par k10=1.0

# Parameter:   id =  k11, name = k11, constant
par k11=1.0

# Parameter:   id =  k12, name = k12, constant
par k12=1.0

# Parameter:   id =  k13, name = k13, constant
par k13=1.0

# Parameter:   id =  k17, name = k17, constant
par k17=1.0

# Parameter:   id =  k19, name = k19, constant
par k19=1.0

# Parameter:   id =  k20, name = k20, constant
par k20=1.0

# Parameter:   id =  k21, name = k21, constant
par k21=1.0

# Parameter:   id =  k22, name = k22, constant
par k22=1.0

# Parameter:   id =  k23, name = k23, constant
par k23=1.0

# Parameter:   id =  k25, name = k25, constant
par k25=1.0

# Parameter:   id =  k27, name = k27, constant
par k27=1.0

# Parameter:   id =  k31, name = k31, constant
par k31=1.0

# Parameter:   id =  k32, name = k32, constant
par k32=1.0

# Parameter:   id =  k33, name = k33, constant
par k33=1.0

# Parameter:   id =  k34, name = k34, constant
par k34=1.0

# Parameter:   id =  k8, name = k8, constant
par k8=0.1

# Parameter:   id =  k14, name = k14, constant
par k14=0.1

# Parameter:   id =  k15, name = k15, constant
par k15=0.1

# Parameter:   id =  k16, name = k16, constant
par k16=0.1

# Parameter:   id =  k26, name = k26, constant
par k26=0.1

# Parameter:   id =  k30, name = k30, constant
par k30=0.1

# Parameter:   id =  k7, name = k7, constant
par k7=10.0

# Parameter:   id =  k18, name = k18, constant
par k18=10.0

# Parameter:   id =  k1, name = k1, constant
par k1=0.01

# Parameter:   id =  k2, name = k2, constant
par k2=0.01

# Parameter:   id =  k24, name = k24, constant
par k24=0.01

# Parameter:   id =  k28, name = k28, constant
par k28=0.01

# Parameter:   id =  k29, name = k29, constant
par k29=0.01

# Parameter:   id =  alphastim, name = alphastim, constant
par alphastim=1.0

# Parameter:   id =  betastim, name = betastim, constant
par betastim=1.0

# assignmentRule: variable = alpha
alpha=alphastim* piecew2 
aux alpha=alpha

# assignmentRule: variable = beta
beta=betastim*betaA* piecew4 
aux beta=beta

# Reaction: id = v1, name = v1

v1=compartme*k1*Ste5*Ste11

# Reaction: id = v2, name = v2

v2=compartme*k2*Ste5Ste11*Gbg*alpha

# Reaction: id = v3, name = v3

v3=compartme*k3*Ste5Ste_1*Fus3

# Reaction: id = v4, name = v4

v4=compartme*k4*Ste5Ste_2

# Reaction: id = v5, name = v5

v5=compartme*k5*Ste5Ste_3

# Reaction: id = v6, name = v6

v6=compartme*k6*Fus3*Ste5Ste_4

# Reaction: id = v7, name = v7

v7=compartme*k7*Ste5Ste_4

# Reaction: id = v8, name = v8

v8=compartme*k8*Ste11Ubi

# Reaction: id = v9, name = v9

v9=compartme*k9*Ste5Ste_1*Kss1

# Reaction: id = v10, name = v10

v10=compartme*k10*Ste5Ste_5

# Reaction: id = v11, name = v11

v11=compartme*k11*Ste5Ste_6

# Reaction: id = v12, name = v12

v12=compartme*k12*Ste5Ste_4*Kss1

# Reaction: id = v13, name = v13

v13=compartme*k13*Ste11*beta

# Reaction: id = v14, name = v14

v14=compartme*k14*Ste11P

# Reaction: id = v15, name = v15

v15=compartme*(k15*Kss1*Ste11P+k30*Kss1*Ste11Ubi)

# Reaction: id = v16, name = v16

v16=compartme*(k16*Kss1PP+k28*Kss1PP*Fus3PP)

# Reaction: id = v17, name = v17

v17=compartme*k17*Ste12Kss1

# Reaction: id = v18, name = v18

v18=compartme*k18*Kss1*Ste12

# Reaction: id = v19, name = v19

v19=compartme*(k19*Ste12*Fus3PP+k29*Ste12*Kss1PP)

# Reaction: id = v20, name = v20

v20=compartme*k20*Ste12P

# Reaction: id = v21, name = v21

v21=compartme*k21*Ste12TeSt

# Reaction: id = v22, name = v22

v22=compartme*k22*Kss1*Ste12Te_1

# Reaction: id = v23, name = v23

v23=compartme*k23*Ste12Te_1*Kss1PP

# Reaction: id = v24, name = v24

v24=compartme*k24*Ste12Te_1*Fus3PP

# Reaction: id = v25, name = v25

v25=compartme*k25*Ste12Te_2

# Reaction: id = v26, name = v26

v26=compartme*k26*Fus3PP

# Reaction: id = v27, name = v27

v27=compartme*k27*Ste5Ste11

# Reaction: id = v28, name = v28

v28=compartme*k31*Ste12P

# Reaction: id = v29, name = v29

v29=compartme*k32*PREP

# Reaction: id = v30, name = v30

v30=compartme*k33*Ste12Te_2

# Reaction: id = v31, name = v31

v31=compartme*k34*FREP

# Species:   id = Ste5, name = Ste5, affected by kineticLaw

init Ste5=42.3
dSte5/dt=(1/(compartme))*((-1.0 * v1) + (-1.0 * v7) + ( 1.0 * v27))

# Species:   id = Ste11, name = Ste11, affected by kineticLaw

init Ste11=13.3
dSte11/dt=(1/(compartme))*((-1.0 * v1) + (-1.0 * v13) + ( 1.0 * v14) + ( 1.0 * v27))

# Species:   id = Ste5Ste11, name = Ste5Ste11, affected by kineticLaw

init Ste5Ste11=5.6
dSte5Ste11/dt=(1/(compartme))*(( 1.0 * v1) + (-1.0 * v2) + (-1.0 * v27))

# Species:   id = Gbg, name = Gbg, affected by kineticLaw

init Gbg=53.0
dGbg/dt=(1/(compartme))*((-1.0 * v2) + ( 1.0 * v7))

# Species:   id = Ste5Ste11Gbg, name = Ste5Ste11Gbg, affected by kineticLaw

par Ste5Ste_1=0.0
aux Ste5Ste_1=Ste5Ste_1
dSte5Ste_1/dt=(1/(compartme))*(( 1.0 * v2) + (-1.0 * v3) + (-1.0 * v9))

# Species:   id = Fus3, name = Fus3, affected by kineticLaw

init Fus3=217.0
dFus3/dt=(1/(compartme))*((-1.0 * v3) + (-1.0 * v6) + ( 1.0 * v26))

# Species:   id = Ste5Ste11GbgFus3, name = Ste5Ste11GbgFus3, affected by kineticLaw

par Ste5Ste_2=0.0
aux Ste5Ste_2=Ste5Ste_2
dSte5Ste_2/dt=(1/(compartme))*(( 1.0 * v3) + (-1.0 * v4))

# Species:   id = Ste5Ste11GbgFus3P, name = Ste5Ste11GbgFus3P, affected by kineticLaw

par Ste5Ste_3=0.0
aux Ste5Ste_3=Ste5Ste_3
dSte5Ste_3/dt=(1/(compartme))*(( 1.0 * v4) + (-1.0 * v5) + ( 1.0 * v6))

# Species:   id = Fus3PP, name = Fus3PP, affected by kineticLaw

init Fus3PP=0.0
dFus3PP/dt=(1/(compartme))*(( 1.0 * v5) + (-1.0 * v26))

# Species:   id = Ste5Ste11GbgP, name = Ste5Ste11GbgP, affected by kineticLaw

par Ste5Ste_4=0.0
aux Ste5Ste_4=Ste5Ste_4
dSte5Ste_4/dt=(1/(compartme))*(( 1.0 * v5) + (-1.0 * v6) + (-1.0 * v7) + ( 1.0 * v11) + (-1.0 * v12))

# Species:   id = Ste11Ubi, name = Ste11Ubi, affected by kineticLaw

init Ste11Ubi=0.0
dSte11Ubi/dt=(1/(compartme))*(( 1.0 * v7) + (-1.0 * v8))

# Species:   id = p, name = p, constant
par p=0.0


# Species:   id = Kss1, name = Kss1, affected by kineticLaw

init Kss1=54.4
dKss1/dt=(1/(compartme))*((-1.0 * v9) + (-1.0 * v12) + (-1.0 * v15) + ( 1.0 * v16) + ( 2.0 * v17) + (-2.0 * v18) + ( 1.0 * v21) + (-1.0 * v22))

# Species:   id = Ste5Ste11GbgKss1, name = Ste5Ste11GbgKss1, affected by kineticLaw

par Ste5Ste_5=0.0
aux Ste5Ste_5=Ste5Ste_5
dSte5Ste_5/dt=(1/(compartme))*(( 1.0 * v9) + (-1.0 * v10))

# Species:   id = Ste5Ste11GbgKss1P, name = Ste5Ste11GbgKss1P, affected by kineticLaw

par Ste5Ste_6=0.0
aux Ste5Ste_6=Ste5Ste_6
dSte5Ste_6/dt=(1/(compartme))*(( 1.0 * v10) + (-1.0 * v11) + ( 1.0 * v12))

# Species:   id = Kss1PP, name = Kss1PP, affected by kineticLaw

init Kss1PP=0.0
dKss1PP/dt=(1/(compartme))*(( 1.0 * v11) + ( 1.0 * v15) + (-1.0 * v16))

# Species:   id = Ste11P, name = Ste11P, affected by kineticLaw

init Ste11P=0.0
dSte11P/dt=(1/(compartme))*(( 1.0 * v13) + (-1.0 * v14))

# Species:   id = Ste12Kss1, name = Ste12Kss1, affected by kineticLaw

init Ste12Kss1=35.9
dSte12Kss1/dt=(1/(compartme))*((-1.0 * v17) + ( 1.0 * v18))

# Species:   id = Ste12, name = Ste12, affected by kineticLaw

init Ste12=0.07
dSte12/dt=(1/(compartme))*(( 1.0 * v17) + (-1.0 * v18) + (-1.0 * v19) + ( 1.0 * v28))

# Species:   id = Ste12P, name = Ste12P, affected by kineticLaw

init Ste12P=0.0
dSte12P/dt=(1/(compartme))*(( 1.0 * v19) + (-1.0 * v28))

# Species:   id = s, name = s, constant
par s=0.0


# Species:   id = PREP, name = PREP, affected by kineticLaw

init PREP=0.0
dPREP/dt=(1/(compartme))*(( 1.0 * v20) + (-1.0 * v29))

# Species:   id = Ste12TeSte5Kss1, name = Ste12TeSte5Kss1, affected by kineticLaw

par Ste12TeSt=13.7
aux Ste12TeSt=Ste12TeSt
dSte12TeSt/dt=(1/(compartme))*((-1.0 * v21) + ( 1.0 * v22))

# Species:   id = Ste12TeSte5, name = Ste12TeSte5, affected by kineticLaw

par Ste12Te_1=0.25
aux Ste12Te_1=Ste12Te_1
dSte12Te_1/dt=(1/(compartme))*(( 1.0 * v21) + (-1.0 * v22) + (-1.0 * v23) + (-1.0 * v24) + ( 1.0 * v30))

# Species:   id = Ste12TeSte5P, name = Ste12TeSte5P, affected by kineticLaw

par Ste12Te_2=0.0
aux Ste12Te_2=Ste12Te_2
dSte12Te_2/dt=(1/(compartme))*(( 1.0 * v23) + (-1.0 * v30))

# Species:   id = FREP, name = FREP, affected by kineticLaw

init FREP=0.0
dFREP/dt=(1/(compartme))*(( 1.0 * v25) + (-1.0 * v31))


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if (t  >=  alphae) then (alphaA*exp((-(t-alphat))/alphas)) else (0)

piecew2=if ((t  >=  alphat) && (t  <=  alphae)) then (alphaA*(1-exp((-(t-alphat))/alphas))) else ( piecew1 )

piecew3=if (t  >  betae) then (exp((-(t-betae))/betas)) else (0)

piecew4=if ((t  >=  betat) && (t  <=  betae)) then (1-exp((-(t-betat))/betas)) else ( piecew3 )


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

