
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Garde2020-Minimal model describing metabolic oscillations in Bacillus subtilis biofilms
#
# isDerivedFrom http://identifiers.org/go/GO:0006536
# isDerivedFrom http://identifiers.org/envo/ENVO:00002034
# isDerivedFrom http://identifiers.org/mamo/MAMO_0000046
# isDerivedFrom http://identifiers.org/ncit/C28240
# isDerivedFrom http://identifiers.org/biomodels.teddy/TEDDY_0000072
# isDerivedFrom http://identifiers.org/taxonomy/1423
# isDerivedFrom urn:miriam:doi:10.1007/BF01165134
# is http://identifiers.org/biomodels.db/MODEL2004140001
# is http://identifiers.org/biomodels.db/BIOMD0000000932
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Rate_Law_for_reaction_for_Gp_consumbtion1, name = Rate Law for reaction for Gp consumbtion1
Rate_Law_(k4,Gp)=(k4*Gp)


# FunctionDefinition id = Rate_Law_for_reaction_Gp_production, name = Rate Law for reaction Gp production
Rate_La_1(K1,GE,Gp,K2,A)=(K1*GE*Gp-K2*A*Gp)


# FunctionDefinition id = Rate_Law_for_reaction_for_A_consumbtion, name = Rate Law for reaction for A consumbtion
Rate_La_2(K3,A)=(K3*A)


# FunctionDefinition id = Rate_Law_for_reaction_Gi_consumbtion, name = Rate Law for reaction Gi consumbtion
Rate_La_3(K5,Gi)=(K5*Gi)


# FunctionDefinition id = Rate_Law_for_reaction_for_Biomass, name = Rate Law for reaction for Biomass
Rate_La_4(b,A,Gp,B)=(b*A*Gp*B)


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  k1, name = k1, constant
par k1=0.3426

# Parameter:   id =  k2, name = k2, constant
par k2=5.3

# Parameter:   id =  k3, name = k3, constant
par k3=4.0

# Parameter:   id =  k4, name = k4, constant
par k4=2.0

# Parameter:   id =  k5, name = k5, constant
par k5=2.3

# Parameter:   id =  GE, name = GE, constant
par GE=30.0

# Parameter:   id =  b, name = b, constant
par b=0.1

# Reaction: id = The_uptake_of_glutamate_and_Consumption_of_glutamate_and_ammonia, name = The uptake of glutamate and Consumption of glutamate and ammonia

The_uptak=compartme*Rate_La_1(k1, GE, Gp, k2, A)

# Reaction: id = Diffusion_of_glutamate, name = Diffusion of glutamate

Diffusion=compartme*Rate_Law_(k4, Gp)

# Reaction: id = Consumption_of_glutamate_to_produce_ammonia, name = Consumption of glutamate to produce ammonia

Consumpti=compartme*Rate_La_3(k5, Gi)

# Reaction: id = Diffusion_of_ammonia, name = Diffusion of ammonia

Diffusi_1=compartme*Rate_La_2(k3, A)

# Reaction: id = The_synthesis_of_biomass_from_ammonia_and_glutamate, name = The synthesis of biomass from ammonia and glutamate

The_synth=compartme*Rate_La_4(b, A, Gp, B_1)

# Species:   id = Gp, name = Gp, affected by kineticLaw

init Gp=1.0
dGp/dt=(1/(compartme))*(( 1.0 * The_uptak) + (-1.0 * Diffusion))

# Species:   id = Gi, name = Gi, affected by kineticLaw

init Gi=1.0
dGi/dt=(1/(compartme))*(( 1.0 * Diffusion) + (-1.0 * Consumpti))

# Species:   id = A, name = A, affected by kineticLaw

init A=1.0
dA/dt=(1/(compartme))*(( 1.0 * Consumpti) + (-1.0 * Diffusi_1))

# Species:   id = B, name = B, affected by kineticLaw

par B_1=1.0E11
aux B_1=B_1
dB_1/dt=(1/(compartme))*(( 1.0 * The_synth))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

