
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Palmer2014 - Effect of IL-1?-Blocking therapies in T2DM - Healthy Condition
#
# is http://identifiers.org/biomodels.db/MODEL1611040000
# is http://identifiers.org/biomodels.db/BIOMD0000000621
# isDescribedBy http://identifiers.org/pubmed/24918743
# isDerivedFrom http://identifiers.org/biomodels.db/MODEL1112110003
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = default_compartment, name = default_compartment, constant
par default_c=1.0

# Parameter:   id =  Kxg, name = Kxg, constant
par Kxg=1.6E-5

# Parameter:   id =  Kxi, name = Kxi, constant
par Kxi=0.05

# Parameter:   id =  Gh, name = Gh, constant
par Gh=9.0

# Parameter:   id =  vh, name = vh, constant
par vh=4.0

# Parameter:   id =  Ktr, name = Ktr, constant
par Ktr=0.12

# Parameter:   id =  Kin, name = Kin, constant
par Kin=1.05

# Parameter:   id =  lambda, name = lambda, constant
par lambda=0.743

# Parameter:   id =  Kglucose, name = Kglucose, constant
par Kglucose=2.92E-4

# Parameter:   id =  vs, name = vs, constant
par vs=0.7

# Parameter:   id =  kms, name = kms, constant
par kms=0.021

# Parameter:   id =  taus, name = taus, constant
par taus=0.5

# Parameter:   id =  kmf, name = kmf, constant
par kmf=0.021

# Parameter:   id =  tauf, name = tauf, constant
par tauf=0.5

# Parameter:   id =  vfg, name = vfg, constant
par vfg=4.0

# Parameter:   id =  xfg, name = xfg, constant
par xfg=4.0

# Parameter:   id =  kmfg, name = kmfg, constant
par kmfg=9.0

# Parameter:   id =  vf, name = vf, constant
par vf=0.4

# Parameter:   id =  vlr, name = vlr, constant
par vlr=1.8

# Parameter:   id =  kmlr, name = kmlr, constant
par kmlr=0.0011

# Parameter:   id =  xlr, name = xlr, constant
par xlr=3.0

# Parameter:   id =  vhr, name = vhr, constant
par vhr=2.7

# Parameter:   id =  kmhr, name = kmhr, constant
par kmhr=0.018

# Parameter:   id =  xhr, name = xhr, constant
par xhr=0.5

# Parameter:   id =  vla, name = vla, constant
par vla=0.65

# Parameter:   id =  kmla, name = kmla, constant
par kmla=1.8E-4

# Parameter:   id =  xla, name = xla, constant
par xla=3.0

# Parameter:   id =  vha, name = vha, constant
par vha=4.6

# Parameter:   id =  kmha, name = kmha, constant
par kmha=0.155

# Parameter:   id =  xha, name = xha, constant
par xha=0.6666666667

# Parameter:   id =  km, name = km, constant
par km=8.5

# Parameter:   id =  ki, name = ki, constant
par ki=1.7

# Parameter:   id =  ka, name = ka, constant
par ka=5.52022E-4

# Parameter:   id =  kr, name = kr, constant
par kr=3.76393E-4

# Parameter:   id =  kf, name = kf, constant
par kf=0.00957754

# Parameter:   id =  ks, name = ks, constant
par ks=0.291008

# Parameter:   id =  Tgl, name = Tgl, constant
par Tgl=0.025405

# Parameter:   id =  Kxgi, name = Kxgi, constant
par Kxgi=1.0E-4

# Parameter:   id =  il1bH, name = il1bH, constant
par il1bH=0.05

# Parameter:   id =  il1b0, name = il1b0
# Warning parameter il1b0 is not constant, it should be controled by a Rule and/or events
par il1b0=0.05

# Parameter:   id =  kplacebo, name = kplacebo, constant
par kplacebo=0.00137

# Parameter:   id =  k1, name = k1, constant
par k1=0.2

# Parameter:   id =  k2, name = k2, constant
par k2=0.0025

# Parameter:   id =  kab, name = kab, constant
par kab=3.94

# Parameter:   id =  CL, name = CL, constant
par CL=432.0

# Parameter:   id =  Vp, name = Vp, constant
par Vp=48.0

# Parameter:   id =  apoptosis, name = apoptosis, defined by a Rule

# Parameter:   id =  IL1R, name = IL1R, defined by a Rule

# Parameter:   id =  replication, name = replication, defined by a Rule

# Parameter:   id =  Ana_on, name = Ana_on, constant
par Ana_on=1.0

# Parameter:   id =  placebo_on, name = placebo_on, constant
par placebo_o=0.0

# Parameter:   id =  Anakinra_dose_counter, name = Anakinra_dose_counter
par Anakinra_=0.5

# Parameter:   id =  PI_I, name = PI_I, defined by a Rule

# rateRule: variable = a1c1
init a1c1=0.122997
da1c1/dt=Kglucose*Glucose^lambda*rbc1-Ktr*a1c1

# rateRule: variable = rbc1
init rbc1=8.627
drbc1/dt=Kin-Ktr*rbc1-Kglucose*Glucose^lambda*rbc1

# rateRule: variable = a1c2
init a1c2=0.244266
da1c2/dt=Kglucose*Glucose^lambda*rbc2+Ktr*a1c1-Ktr*a1c2

# rateRule: variable = rbc2
init rbc2=8.50573
drbc2/dt=Ktr*rbc1-Ktr*rbc2-Kglucose*Glucose^lambda*rbc2

# rateRule: variable = a1c3
init a1c3=0.363829
da1c3/dt=Kglucose*Glucose^lambda*rbc3+Ktr*a1c2-Ktr*a1c3

# rateRule: variable = rbc3
init rbc3=8.38617
drbc3/dt=Ktr*rbc2-Ktr*rbc3-Kglucose*Glucose^lambda*rbc3

# rateRule: variable = a1c4
init a1c4=0.481712
da1c4/dt=Kglucose*Glucose^lambda*rbc4+Ktr*a1c3-Ktr*a1c4

# rateRule: variable = rbc4
init rbc4=8.26829
drbc4/dt=Ktr*rbc3-Ktr*rbc4-Kglucose*Glucose^lambda*rbc4

# rateRule: variable = a1c5
init a1c5=0.597938
da1c5/dt=Kglucose*Glucose^lambda*rbc5+Ktr*a1c4-Ktr*a1c5

# rateRule: variable = rbc5
init rbc5=8.15206
drbc5/dt=Ktr*rbc4-Ktr*rbc5-Kglucose*Glucose^lambda*rbc5

# rateRule: variable = a1c6
init a1c6=0.71253
da1c6/dt=Kglucose*Glucose^lambda*rbc6+Ktr*a1c5-Ktr*a1c6

# rateRule: variable = rbc6
init rbc6=8.03747
drbc6/dt=Ktr*rbc5-Ktr*rbc6-Kglucose*Glucose^lambda*rbc6

# rateRule: variable = a1c7
init a1c7=0.825512
da1c7/dt=Kglucose*Glucose^lambda*rbc7+Ktr*a1c6-Ktr*a1c7

# rateRule: variable = rbc7
init rbc7=7.92449
drbc7/dt=Ktr*rbc6-Ktr*rbc7-Kglucose*Glucose^lambda*rbc7

# rateRule: variable = a1c8
init a1c8=0.936905
da1c8/dt=Kglucose*Glucose^lambda*rbc8+Ktr*a1c7-Ktr*a1c8

# rateRule: variable = rbc8
init rbc8=7.8131
drbc8/dt=Ktr*rbc7-Ktr*rbc8-Kglucose*Glucose^lambda*rbc8

# rateRule: variable = a1c9
init a1c9=1.04673
da1c9/dt=Kglucose*Glucose^lambda*rbc9+Ktr*a1c8-Ktr*a1c9

# rateRule: variable = rbc9
init rbc9=7.70327
drbc9/dt=Ktr*rbc8-Ktr*rbc9-Kglucose*Glucose^lambda*rbc9

# rateRule: variable = a1c10
init a1c10=1.15502
da1c10/dt=Kglucose*Glucose^lambda*rbc10+Ktr*a1c9-Ktr*a1c10

# rateRule: variable = rbc10
init rbc10=7.59498
drbc10/dt=Ktr*rbc9-Ktr*rbc10-Kglucose*Glucose^lambda*rbc10

# rateRule: variable = a1c11
init a1c11=1.26178
da1c11/dt=Kglucose*Glucose^lambda*rbc11+Ktr*a1c10-Ktr*a1c11

# rateRule: variable = rbc11
init rbc11=7.48822
drbc11/dt=Ktr*rbc10-Ktr*rbc11-Kglucose*Glucose^lambda*rbc11

# rateRule: variable = a1c12
init a1c12=1.36704
da1c12/dt=Kglucose*Glucose^lambda*rbc12+Ktr*a1c11-Ktr*a1c12

# rateRule: variable = rbc12
init rbc12=7.38296
drbc12/dt=Ktr*rbc11-Ktr*rbc12-Kglucose*Glucose^lambda*rbc12

# assignmentRule: variable = hba1c
hba1c=100*(a1c1+a1c2+a1c3+a1c4+a1c5+a1c6+a1c7+a1c8+a1c9+a1c10+a1c11+a1c12)/(a1c1+a1c2+a1c3+a1c4+a1c5+a1c6+a1c7+a1c8+a1c9+a1c10+a1c11+a1c12+rbc1+rbc2+rbc3+rbc4+rbc5+rbc6+rbc7+rbc8+rbc9+rbc10+rbc11+rbc12)
aux hba1c=hba1c

# assignmentRule: variable = apoptosis
apoptosis=ka*(1+vha*IL1R^xha/(kmha^xha+IL1R^xha)-vla*IL1R^xla/(kmla^xla+IL1R^xla))
aux apoptosis=apoptosis

# assignmentRule: variable = IL1R
IL1R=IL1b/(IL1b+km*(1+(IL1Ra+Anakinra)/ki))
aux IL1R=IL1R

# assignmentRule: variable = replication
replicati=kr*(1-vhr*IL1R^xhr/(kmhr^xhr+IL1R^xhr)+vlr*IL1R^xlr/(kmlr^xlr+IL1R^xlr))
aux replicati=replicati

# assignmentRule: variable = PI_I
PI_I=Proinsuli/Insulin
aux PI_I=PI_I

# Reaction: id = TigB_up

TigB_up=taus*ks*(1-vs*IL1R/(kms+IL1R))

# Reaction: id = TigB_down

TigB_down=taus*TigB

# Reaction: id = Bcell_replication

Bcell_rep=replicati*B

# Reaction: id = Bcell_apoptosis

Bcell_apo=apoptosis*B

# Reaction: id = proinsulin_sec_up

proinsu_1=tauf*kf*(1+vfg*Glucose^xfg/(kmfg^xfg+Glucose^xfg))*(1+vf*IL1R/(kmf+IL1R))

# Reaction: id = proinsulin_sec_down

proinsu_2=tauf*f

# Reaction: id = IL1b_treatment

IL1b_trea= piecew1 

# Reaction: id = IL1b_degradation

IL1b_degr= piecew2 

# Reaction: id = IL1b_placebo

IL1b_plac=placebo_o*kplacebo

# Reaction: id = AnakinraSC_elimination

Anakinr_1=kab*Anakinras

# Reaction: id = Anakinra_absorption

Anakinr_2=kab*Anakinras/Vp

# Reaction: id = Anakinra_elimination

Anakinr_3=CL/Vp*Anakinra

# Reaction: id = Glucose_production

Glucose_p=Tgl

# Reaction: id = Basal_glucose_uptake

Basal_glu=Kxg*Glucose

# Reaction: id = Insulin_dependent_glucose_uptake

Insulin_d=Kxgi*Insulin*Glucose

# Reaction: id = Proinsulin_dependent_glucose_uptake

Proinsu_3=0.1*Kxgi*Proinsuli*Glucose

# Reaction: id = Glucose_dependent_insulin_secretion

Glucose_d=(Glucose/Gh)^vh/(1+(Glucose/Gh)^vh)*TigB*B

# Reaction: id = Insulin_elimination

Insulin_e=Kxi*Insulin

# Reaction: id = Glucose_dependent_proinsulin_secretion

Glucose_1=f*(Glucose/Gh)^vh/(1+(Glucose/Gh)^vh)*TigB*B

# Reaction: id = Proinsulin_elimination

Proinsu_4=0.1*Kxi*Proinsuli

# Species:   id = IL1b, name = IL1b, affected by kineticLaw

init IL1b=0.05
dIL1b/dt=(1/(default_c))*(( 1.0 * IL1b_trea) + (-1.0 * IL1b_degr) + ( 1.0 * IL1b_plac))

# Species:   id = IL1Ra, name = IL1Ra
# Warning species is not changed by either rules or reactions

par IL1Ra=25.0
aux IL1Ra=IL1Ra

# Species:   id = Anakinra, name = Anakinra, affected by kineticLaw

init Anakinra=0.0
dAnakinra/dt=(1/(default_c))*(( 1.0 * Anakinr_2) + (-1.0 * Anakinr_3))

# Species:   id = Proinsulin, name = Proinsulin, affected by kineticLaw

par Proinsuli=6.5
aux Proinsuli=Proinsuli
dProinsuli/dt=(1/(default_c))*(( 1.0 * Glucose_1) + (-1.0 * Proinsu_4))

# Species:   id = Insulin, name = Insulin, affected by kineticLaw

init Insulin=50.0
dInsulin/dt=(1/(default_c))*(( 1.0 * Glucose_d) + (-1.0 * Insulin_e))

# Species:   id = TigB, name = TigB, affected by kineticLaw

init TigB=0.29
dTigB/dt=(1/(default_c))*(( 1.0 * TigB_up) + (-1.0 * TigB_down))

# Species:   id = B, name = B, affected by kineticLaw

init B=100.0
dB/dt=(1/(default_c))*(( 1.0 * Bcell_rep) + (-1.0 * Bcell_apo))

# Species:   id = f, name = f, affected by kineticLaw

init f=0.0427776
df/dt=(1/(default_c))*(( 1.0 * proinsu_1) + (-1.0 * proinsu_2))

# Species:   id = Anakinrasc, name = Anakinrasc, affected by kineticLaw
# Species is changed by 1 event(s)
par Anakinras=0.0
aux Anakinras=Anakinras
dAnakinras/dt=(1/(default_c))*((-1.0 * Anakinr_1))

# Species:   id = Glucose, name = Glucose, affected by kineticLaw

init Glucose=5.0
dGlucose/dt=(1/(default_c))*(( 1.0 * Glucose_p) + (-1.0 * Basal_glu) + (-1.0 * Insulin_d) + (-1.0 * Proinsu_3))

# Species:   id = a1c1, name = a1c1, defined in a rule 

# Species:   id = rbc1, name = rbc1, defined in a rule 

# Species:   id = a1c2, name = a1c2, defined in a rule 

# Species:   id = rbc2, name = rbc2, defined in a rule 

# Species:   id = a1c3, name = a1c3, defined in a rule 

# Species:   id = rbc3, name = rbc3, defined in a rule 

# Species:   id = a1c4, name = a1c4, defined in a rule 

# Species:   id = rbc4, name = rbc4, defined in a rule 

# Species:   id = a1c5, name = a1c5, defined in a rule 

# Species:   id = rbc5, name = rbc5, defined in a rule 

# Species:   id = a1c6, name = a1c6, defined in a rule 

# Species:   id = rbc6, name = rbc6, defined in a rule 

# Species:   id = a1c7, name = a1c7, defined in a rule 

# Species:   id = rbc7, name = rbc7, defined in a rule 

# Species:   id = a1c8, name = a1c8, defined in a rule 

# Species:   id = rbc8, name = rbc8, defined in a rule 

# Species:   id = a1c9, name = a1c9, defined in a rule 

# Species:   id = rbc9, name = rbc9, defined in a rule 

# Species:   id = a1c10, name = a1c10, defined in a rule 

# Species:   id = rbc10, name = rbc10, defined in a rule 

# Species:   id = a1c11, name = a1c11, defined in a rule 

# Species:   id = rbc11, name = rbc11, defined in a rule 

# Species:   id = a1c12, name = a1c12, defined in a rule 

# Species:   id = rbc12, name = rbc12, defined in a rule 

# Species:   id = hba1c, name = hba1c, involved in a rule 

# event : Anakinra_Administration_event
# unable to handle events with delays currently.
# event ignored.



# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if (t  <  91) then ((1-placebo_o)*k1*il1bH) else ((1-placebo_o)*k2*(il1b0+kplacebo*t))

piecew2=if (t  <  91) then ((1-placebo_o)*k1*IL1b) else ((1-placebo_o)*k2*IL1b)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

