
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Chaudhury2020 - EC50 expansion and killing mathematical model of CAR-T cell and tumour kinetics
#
# is http://identifiers.org/biomodels.db/MODEL2108050002
# is http://identifiers.org/biomodels.db/BIOMD0000001025
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Rate_Law_for_Tumour_cell_death, name = Rate Law for Tumour_cell_death
Rate_Law_(d,C_E,U,EC_50_d)=(d*C_E*U/(EC_50_d+C_E+U))


# FunctionDefinition id = Rate_Law_for_Tumour_cell_growth, name = Rate Law for Tumour_cell_growth
Rate_La_1(F_cure,g,U,U_max)=(F_cure*g*U*(log(10,U_max)-log(10,U))/log(10,U_max))


# Compartment: id = Whole_organism_blood, name = Whole_organism_blood, constant
par Whole_org=1.0

# Parameter:   id =  rho, name = rho, constant
par rho=8.8

# Parameter:   id =  k_E, name = k_E, constant
par k_E=0.16

# Parameter:   id =  EC_50_rho, name = EC_50,rho, constant
par EC_50_rho=1.0

# Parameter:   id =  g, name = g, constant
par g=0.2

# Parameter:   id =  d, name = d, constant
par d=0.35

# Parameter:   id =  k_EP, name = k_EP, constant
par k_EP=0.0012

# Parameter:   id =  beta, name = beta, constant
par beta=0.0032

# Parameter:   id =  U_crit, name = U_crit, constant
par U_crit=0.1

# Parameter:   id =  U_max, name = U_max, constant
par U_max=1000.0

# Parameter:   id =  h, name = h, constant
par h=3.0

# Parameter:   id =  EC_50_d, name = EC_50,d, constant
par EC_50_d=10.0

# Parameter:   id =  T_max, name = T_max, constant
par T_max=9.3

# Parameter:   id =  h_T, name = h_T, constant
par h_T=3.0

# Parameter:   id =  F_cure, name = F_cure, defined by a Rule

# assignmentRule: variable = CAR_T_cells
CAR_T_cel=Expanding+Persisten
aux CAR_T_cel=CAR_T_cel

# assignmentRule: variable = F_cure
F_cure=1/(1+(U_crit/Tumor_cel)^h)
aux F_cure=F_cure

# rateRule: variable = Expanding_CAR_T_cells
init Expanding=10.0
dExpanding/dt= piecew1 

# rateRule: variable = Persistent_CAR_T_cells
init Persisten=0.0
dPersisten/dt= piecew2 

# Reaction: id = Tumor_cell_growth, name = Tumor_cell_growth

Tumor_c_1=Whole_org*Rate_La_1(F_cure, g, Tumor_cel, U_max)

# Reaction: id = Tumor_cell_death, name = Tumor_cell_death

Tumor_c_2=Whole_org*Rate_Law_(d, Expanding, Tumor_cel, EC_50_d)

# Species:   id = Expanding_CAR_T_cells, name = Expanding_CAR-T_cells, involved in a rule 

# Species:   id = Persistent_CAR_T_cells, name = Persistent_CAR-T_cells, involved in a rule 

# Species:   id = Tumor_cells, name = Tumor_cells, affected by kineticLaw

par Tumor_cel=900.0
aux Tumor_cel=Tumor_cel
dTumor_cel/dt=(1/(Whole_org))*(( 1.0 * Tumor_c_1) + (-1.0 * Tumor_c_2))

# Species:   id = CAR_T_cells, name = CAR-T_cells, involved in a rule 


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if (t  <=  T_max) then (rho*Expanding*Tumor_cel/(EC_50_rho+Expanding+Tumor_cel)) else ((-(k_EP+k_E))*Expanding)

piecew2=if (t  <=  T_max) then (0) else (k_EP*Expanding-beta*Persisten)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

