
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Cortes2019 - Optimality of the spontaneous prophage induction rate.
#
# isDescribedBy http://identifiers.org/pubmed/31525321
# is http://identifiers.org/biomodels.db/MODEL1912040001
# is http://identifiers.org/biomodels.db/BIOMD0000000884
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_production_of_Lysogens, name = Function for production of Lysogens
Function_(r,L,p,alpha,U,V)=(r*L+p*alpha*U*V)


# FunctionDefinition id = Fucntion_for_removal_of_Lysogens, name = Fucntion for removal of Lysogens
Fucntion_(delta,L,phi)=(delta*L+phi*L)


# FunctionDefinition id = Function_for_production_of_uninfected_cells, name = Function for production of uninfected cells
Functio_1(g,U)=(g*U)


# FunctionDefinition id = Function_for_removal_of_uninfected_cells, name = Function for removal of uninfected cells
Functio_2(alpha,U,V,phi)=(alpha*U*V+phi*U)


# FunctionDefinition id = Function_for_production_of_viruses, name = Function for production of viruses
Functio_3(p,b,alpha,U,V,L,delta)=((1-p)*b*alpha*U*V+b*delta*L)


# FunctionDefinition id = Function_for_removal_of_viruses, name = Function for removal of viruses
Functio_4(gamma,V,alpha,L)=(gamma*V+alpha*V*L)


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  r, name = r, constant
par r=0.99

# Parameter:   id =  delta, name = delta, constant
par delta=1.0E-4

# Parameter:   id =  p, name = p, constant
par p=0.3

# Parameter:   id =  alpha, name = alpha, constant
par alpha=1.0E-7

# Parameter:   id =  phi, name = phi, defined by a Rule

# Parameter:   id =  g, name = g, constant
par g=1.0

# Parameter:   id =  b, name = b, constant
par b=150.0

# Parameter:   id =  gamma, name = gamma, constant
par gamma=0.001

# Parameter:   id =  K, name = K, defined by a Rule

# assignmentRule: variable = K
K=L+U
aux K=K

# assignmentRule: variable = phi
phi=((r-delta)*L+g*U-alpha*U*V*(1-p))/K
aux phi=phi

# Reaction: id = Production_of_Lysogens, name = Production of Lysogens

Productio=compartme*Function_(r, L, p, alpha, U, V)

# Reaction: id = Removal_of_Lysogens, name = Removal of Lysogens

Removal_o=compartme*Fucntion_(delta, L, phi)

# Reaction: id = Production_of_uninfected_cells, name = Production of uninfected cells

Product_1=compartme*Functio_1(g, U)

# Reaction: id = Removal_of_uninfected_cells, name = Removal of uninfected cells

Removal_1=compartme*Functio_2(alpha, U, V, phi)

# Reaction: id = Production_of_viruses, name = Production of viruses

Product_2=compartme*Functio_3(p, b, alpha, U, V, L, delta)

# Reaction: id = Removal_of_viruses, name = Removal of viruses

Removal_2=compartme*Functio_4(gamma, V, alpha, L)

# Species:   id = L, name = L, affected by kineticLaw

init L=10000.0
dL/dt=(1/(compartme))*(( 1.0 * Productio) + (-1.0 * Removal_o))

# Species:   id = U, name = U, affected by kineticLaw

init U=990000.0
dU/dt=(1/(compartme))*(( 1.0 * Product_1) + (-1.0 * Removal_1))

# Species:   id = V, name = V, affected by kineticLaw

init V=0.0
dV/dt=(1/(compartme))*(( 1.0 * Product_2) + (-1.0 * Removal_2))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

