
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Boada2016 - Incoherent type 1 feed-forward loop (I1-FFL)
#
# is http://identifiers.org/biomodels.db/MODEL1511290000
# is http://identifiers.org/biomodels.db/BIOMD0000000696
# isDescribedBy http://identifiers.org/pubmed/26968941
# is http://identifiers.org/biomodels.db/MODEL1511290000
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = rateOf
# Inconsistent mathML operators in Function Definition, function ignored
# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = function_for_r014___C_translation, name = function for r014 - C_translation
function_(KmCCgC,x4,Beta1,gamma4,x6,Beta2,gamma5,gamma2,gamma3)=(KmCCgC*(x4+Beta1*gamma4*x6+Beta2*gamma5*x4*x6)/(gamma2+gamma3*x4+gamma4*x6+gamma5*x4*x6))


# FunctionDefinition id = function_for_r020___AI2_dim_4, name = function for r020 - AI2_dim_4
functio_1(k3,M)=(k3*M*M)


# FunctionDefinition id = function_for_r019___AI2_dim_3, name = function for r019 - AI2_dim_3
functio_2(k_2r,M)=(k_2r*M)


# FunctionDefinition id = function_for_r006d, name = function for r006d
functio_3(Kcells,kd,x3)=(Kcells*kd*x3)


# FunctionDefinition id = function_for_r010___x5_transcription, name = function for r010 - x5 transcription
functio_4(K_mbC_gB,x4,gamma1)=(K_mbC_gB*x4/(gamma1+x4))


# FunctionDefinition id = function_for_r006c, name = function for r006c
functio_5(Kcells,kd,x9)=(Kcells*kd*x9)


# Compartment: id = Cell, name = Cell, constant
par Cell=1.0

# Compartment: id = Extracellular, name = Extracellular, constant
par Extracell=1.0

# Parameter:   id =  k_mA_C_gA, name = k_mA*C_gA, constant
par k_mA_C_gA=104.0

# Parameter:   id =  k_mB_C_gB, name = k_mB*C_gB, constant
par k_mB_C_gB=1.0

# Parameter:   id =  k_mC_C_gC, name = k_mC*C_gC, constant
par k_mC_C_gC=1.0

# Parameter:   id =  d_mA, name = d_mA, constant
par d_mA=0.3624

# Parameter:   id =  d_mB, name = d_mB, constant
par d_mB=0.3624

# Parameter:   id =  d_mC, name = d_mC, constant
par d_mC=0.3624

# Parameter:   id =  k_pA, name = k_pA, constant
par k_pA=80.0

# Parameter:   id =  k_pB, name = k_pB, constant
par k_pB=1.0

# Parameter:   id =  k_pC, name = k_pC, constant
par k_pC=11.42

# Parameter:   id =  d_A, name = d_A, constant
par d_A=0.035

# Parameter:   id =  d_B, name = d_B, constant
par d_B=0.016

# Parameter:   id =  d_C, name = d_C, constant
par d_C=0.2784

# Parameter:   id =  k_d, name = k_d, constant
par k_d=0.06

# Parameter:   id =  k_2f, name = k_2f, constant
par k_2f=0.1

# Parameter:   id =  k_3f, name = k_3f, constant
par k_3f=0.1

# Parameter:   id =  k_2r, name = k_2r, constant
par k_2r=20.0

# Parameter:   id =  k_3r, name = k_3r, constant
par k_3r=1.0

# Parameter:   id =  gamma_1, name = gamma_1, constant
par gamma_1=107.4

# Parameter:   id =  gamma_2, name = gamma_2, constant
par gamma_2=0.2

# Parameter:   id =  gamma_3, name = gamma_3, constant
par gamma_3=0.01

# Parameter:   id =  gamma_4, name = gamma_4, constant
par gamma_4=1.15

# Parameter:   id =  gamma_5, name = gamma_5, constant
par gamma_5=8.56

# Parameter:   id =  Beta_1, name = Beta_1, constant
par Beta_1=0.05

# Parameter:   id =  Beta_2, name = Beta_2, constant
par Beta_2=0.05

# Parameter:   id =  d_I, name = d_I, constant
par d_I=0.0164

# Parameter:   id =  d_Ie, name = d_Ie, constant
par d_Ie=0.0164

# Parameter:   id =  d_AI, name = d_AI, constant
par d_AI=0.035

# Parameter:   id =  d_AI2, name = d_AI2, constant
par d_AI2=0.035

# Parameter:   id =  M, name = M, defined by a Rule

# Parameter:   id =  K_cells, name = K_cells, defined by a Rule

# Parameter:   id =  V_cell, name = V_cell, constant
par V_cell=1.0E-15

# Parameter:   id =  N_cells, name = N_cells, constant
par N_cells=2.4E8

# Parameter:   id =  V_medium, name = V_medium, constant
par V_medium=180.0

# Parameter:   id =  sum_abs_dx8, name = sum(abs_dx8), defined by a Rule

# Parameter:   id =  J1, name = J1, defined by a Rule

# Parameter:   id =  J2, name = J2, defined by a Rule

# Parameter:   id =  Sensitivity, name = Sensitivity, defined by a Rule

# Parameter:   id =  Precision, name = Precision, defined by a Rule

# Parameter:   id =  P_theta, name = P_theta, defined by a Rule

# Parameter:   id =  Metabolite_16, name = Initial for x8, constant
par Metabolit=0.0

# Parameter:   id =  Metabolite_17, name = Initial for x9, constant
par Metabol_1=9000.0

# assignmentRule: variable = J1
J1=2*abs(x9-Metabol_1)/sum_abs_d
aux J1=J1

# assignmentRule: variable = Sensitivity
Sensitivi=1/J1
aux Sensitivi=Sensitivi

# assignmentRule: variable = J2
J2=(x8-Metabolit)/(x9-Metabol_1)
aux J2=J2

# assignmentRule: variable = Precision
Precision=1/J2
aux Precision=Precision

# assignmentRule: variable = M
M=-(d_AI+k_2r)/(4*k_3f)+1/(4*k_3f)*((d_AI+k_2r)^2+8*k_3f*(k_2f*x2*x3+2*k_3r*x4))^(0.5)
aux M=M

# assignmentRule: variable = K_cells
K_cells=V_cell*N_cells/V_medium
aux K_cells=K_cells

# rateRule: variable = sum_abs_dx8
init sum_abs_d=0.0
dsum_abs_d/dt=abs(rateOf(x8))

# rateRule: variable = P_theta
init P_theta=0.0
dP_theta/dt=abs(rateOf(x6))

# Reaction: id = r001___mA_transcription, name = r001 - mA_transcription

r001___mA=Cell*Constant_(k_mA_C_gA)

# Reaction: id = r002___A_translation, name = r002 - A_translation

r002___A_=Cell*k_pA*x1

# Reaction: id = r003___mA_degradation, name = r003 - mA_degradation

r003___mA=Cell*d_mA*x1

# Reaction: id = r004___A_degradation, name = r004 - A_degradation

r004___A_=Cell*d_A*x2

# Reaction: id = r005___AI2_dim_1, name = r005 - AI2_dim_1

r005___AI=Cell*k_2f*x2*x3

# Reaction: id = r006a___I_transport, name = r006a - I_transport

r006a___I=Cell*k_d*x3

# Reaction: id = r007___I_degradation, name = r007 - I_degradation

r007___I_=Cell*d_I*x3

# Reaction: id = r008___Ie_degradation, name = r008 - Ie_degradation

r008___Ie=Extracell*d_Ie*x9

# Reaction: id = r009___AI2_degradation, name = r009 - AI2_degradation

r009___AI=Cell*d_AI2*x4

# Reaction: id = r010___mB_transcription, name = r010 - mB_transcription

r010___mB=Cell*functio_4(k_mB_C_gB, x4, gamma_1)

# Reaction: id = r011___B_translation, name = r011 - B_translation

r011___B_=Cell*k_pB*x5

# Reaction: id = r012___B_degradation, name = r012 - B_degradation

r012___B_=Cell*d_B*x6

# Reaction: id = r013___mB_degradation, name = r013 - mB_degradation

r013___mB=Cell*d_mB*x5

# Reaction: id = r014___mC_transcription, name = r014 - mC_transcription

r014___mC=Cell*function_(k_mC_C_gC, x4, Beta_1, gamma_4, x6, Beta_2, gamma_5, gamma_2, gamma_3)

# Reaction: id = r015___C_translation, name = r015 - C_translation

r015___C_=Cell*k_pC*x7

# Reaction: id = r016___C_degradation, name = r016 - C_degradation

r016___C_=Cell*d_C*x8

# Reaction: id = r017___mC_degradation, name = r017 - mC_degradation

r017___mC=Cell*d_mC*x7

# Reaction: id = r018___AI2_dim_2, name = r018 - AI2_dim_2

r018___AI=Cell*k_3r*x4

# Reaction: id = r019___AI2_dim_3, name = r019 - AI2_dim_3

r019___AI=Cell*functio_2(k_2r, M)

# Reaction: id = r020___AI2_dim_4, name = r020 - AI2_dim_4

r020___AI=Cell*functio_1(k_3f, M)

# Reaction: id = r006b___I_transport, name = r006b - I_transport

r006b___I=k_d*x9

# Reaction: id = r006c___I_transport, name = r006c - I_transport

r006c___I=Extracell*functio_5(K_cells, k_d, x9)

# Reaction: id = r006d___I_transport, name = r006d - I_transport

r006d___I=functio_3(K_cells, k_d, x3)

# Species:   id = x1, name = x1, affected by kineticLaw

init x1=12.3973509933775
dx1/dt=(1/(Cell))*(( 1.0 * r001___mA) + (-1.0 * r002___A_) + ( 1.0 * r002___A_) + (-1.0 * r003___mA))

# Species:   id = x2, name = x2, affected by kineticLaw

init x2=28336.8022705771
dx2/dt=(1/(Cell))*(( 1.0 * r002___A_) + (-1.0 * r004___A_) + (-1.0 * r005___AI) + ( 1.0 * r019___AI))

# Species:   id = x3, name = x3, affected by kineticLaw

init x3=0.0
dx3/dt=(1/(Cell))*((-1.0 * r005___AI) + (-1.0 * r006a___I) + (-1.0 * r007___I_) + ( 1.0 * r019___AI) + ( 1.0 * r006b___I))

# Species:   id = x4, name = x4, affected by kineticLaw

init x4=0.0
dx4/dt=(1/(Cell))*((-1.0 * r009___AI) + (-1.0 * r018___AI) + ( 1.0 * r020___AI))

# Species:   id = x5, name = x5, affected by kineticLaw

init x5=0.0
dx5/dt=(1/(Cell))*(( 1.0 * r010___mB) + (-1.0 * r011___B_) + ( 1.0 * r011___B_) + (-1.0 * r013___mB))

# Species:   id = x6, name = x6, affected by kineticLaw

init x6=0.0
dx6/dt=(1/(Cell))*(( 1.0 * r011___B_) + (-1.0 * r012___B_))

# Species:   id = x7, name = x7, affected by kineticLaw

init x7=0.0
dx7/dt=(1/(Cell))*(( 1.0 * r014___mC) + (-1.0 * r015___C_) + ( 1.0 * r015___C_) + (-1.0 * r017___mC))

# Species:   id = x8, name = x8, affected by kineticLaw

init x8=0.0
dx8/dt=(1/(Cell))*(( 1.0 * r015___C_) + (-1.0 * r016___C_))

# Species:   id = x9, name = x9, affected by kineticLaw

init x9=9000.0
dx9/dt=(1/(Extracell))*((-1.0 * r008___Ie) + (-1.0 * r006b___I) + ( 1.0 * r006b___I) + (-1.0 * r006c___I) + ( 1.0 * r006d___I))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

