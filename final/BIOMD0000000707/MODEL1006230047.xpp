
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Revilla2003 - Controlling HIV infection using recombinant viruses
#
# is http://identifiers.org/biomodels.db/MODEL1006230047
# is http://identifiers.org/biomodels.db/BIOMD0000000707
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_the_infection_of_normal_cell, name = Function for the infection of normal cell
Function_(beta,x,v)=(beta*x*v)


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = Funtion_for_the_infection_of_single_infected_cel, name = Funtion for the infection of single infected cel
Funtion_f(alpha,w,y)=(alpha*w*y)


# FunctionDefinition id = Function_for_the_release_of_the_pathogen, name = Function for the release of the pathogen
Functio_1(k,y)=(k*y)


# FunctionDefinition id = Function_for_the_release_of_recombinant_virus, name = Function for the release of recombinant virus
Functio_2(c,z)=(c*z)


# Compartment: id = Plasma, name = Plasma, constant
par Plasma=1.0

# Parameter:   id =  d, name = d, constant
par d=0.01

# Parameter:   id =  lamda, name = lamda, constant
par lamda=2.0

# Parameter:   id =  beta, name = beta, constant
par beta=0.004

# Parameter:   id =  a, name = a, constant
par a=0.33

# Parameter:   id =  alpha, name = alpha, constant
par alpha=0.004

# Parameter:   id =  b, name = b, constant
par b=2.0

# Parameter:   id =  k, name = k, constant
par k=50.0

# Parameter:   id =  u, name = u, constant
par u=2.0

# Parameter:   id =  c, name = c, constant
par c=2000.0

# Parameter:   id =  q, name = q, constant
par q=2.0

# Reaction: id = Production_of_Normal_cells, name = Production of Normal cells

Productio=Plasma*Constant_(lamda)

# Reaction: id = Degradation_of_Normal_cells, name = Degradation of Normal cells

Degradati=Plasma*d*Normal_Th

# Reaction: id = Infection_of_Normal_cells_with_Pathogen, name = Infection of Normal cells with Pathogen

Infection=Plasma*Function_(beta, Normal_Th, Pathogen_)

# Reaction: id = Degradation_of_Single_Infected_Cells, name = Degradation of Single Infected Cells

Degrada_1=Plasma*a*Single_In

# Reaction: id = Infection_of_Single_Infeced_Cells_with_Recombinant_Virus, name = Infection of Single Infeced Cells with Recombinant Virus

Infecti_1=Plasma*Funtion_f(alpha, Recombina, Single_In)

# Reaction: id = Release_of_Pathogen, name = Release of Pathogen

Release_o=Plasma*Functio_1(k, Single_In)

# Reaction: id = Degradation_of_Double_Infected_Cells, name = Degradation of Double Infected Cells

Degrada_2=Plasma*b*Double_In

# Reaction: id = Release_of_Recombinant_Virus, name = Release of Recombinant Virus

Release_1=Plasma*Functio_2(c, Double_In)

# Reaction: id = Degradation_of_Pathogen_Virus, name = Degradation of Pathogen Virus

Degrada_3=Plasma*u*Pathogen_

# Reaction: id = Degradation_of_Recombinant_Virus, name = Degradation of Recombinant Virus

Degrada_4=Plasma*q*Recombina

# Species:   id = Normal_Th_cells, name = Normal Th cells, affected by kineticLaw

par Normal_Th=3.0
aux Normal_Th=Normal_Th
dNormal_Th/dt=(1/(Plasma))*(( 1.0 * Productio) + (-1.0 * Degradati) + (-1.0 * Infection))

# Species:   id = Pathogen_Virus, name = Pathogen Virus, affected by kineticLaw

par Pathogen_=149.0
aux Pathogen_=Pathogen_
dPathogen_/dt=(1/(Plasma))*(( 1.0 * Release_o) + (-1.0 * Degrada_3))

# Species:   id = Single_Infected_Th_Cells, name = Single Infected Th Cells, affected by kineticLaw

par Single_In=6.0
aux Single_In=Single_In
dSingle_In/dt=(1/(Plasma))*(( 1.0 * Infection) + (-1.0 * Degrada_1) + (-1.0 * Infecti_1))

# Species:   id = Recombinant_Virus, name = Recombinant Virus, affected by kineticLaw

par Recombina=1.0
aux Recombina=Recombina
dRecombina/dt=(1/(Plasma))*(( 1.0 * Release_1) + (-1.0 * Degrada_4))

# Species:   id = Double_Infected_Th_Cells, name = Double Infected Th Cells, affected by kineticLaw

par Double_In=0.0
aux Double_In=Double_In
dDouble_In/dt=(1/(Plasma))*(( 1.0 * Infecti_1) + (-1.0 * Degrada_2))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

