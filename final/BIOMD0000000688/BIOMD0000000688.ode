
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Wodarz2007 - Cytomegalovirus infection model with cytotoxic T lymphocyte and natural killer cell response
#
# is http://identifiers.org/biomodels.db/MODEL1006230097
# is http://identifiers.org/biomodels.db/BIOMD0000000688
# isDescribedBy http://identifiers.org/pubmed/17251133
# isDerivedFrom http://identifiers.org/doi/10.1093/intimm/dxh303
# is http://identifiers.org/biomodels.db/MODEL1006230097
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = function, name = function
function(parameter,modifier,substrate)=(parameter*modifier*substrate)


# FunctionDefinition id = function_1, name = function_1
function_(param,mod)=(param*mod)


# FunctionDefinition id = function_2, name = function_2
functio_1(parameter,modifier)=(parameter*modifier)


# FunctionDefinition id = function_3, name = function_3
functio_2(c_a,y0,y1,za)=(c_a*(y0+y1)*za)


# FunctionDefinition id = function_4, name = function_4
functio_3(c_i,y0,y1,zi)=(c_i*(y0+y1)*zi)


# Compartment: id = COMpartment, name = Mouse, constant
par COMpartme=1.0

# Parameter:   id =  R0, name = R0, defined by a Rule

# Parameter:   id =  a0, name = a0, constant
par a0=0.1

# Parameter:   id =  a1, name = a1, constant
par a1=0.2

# Parameter:   id =  k, name = k, constant
par k=1.0

# Parameter:   id =  u, name = u, constant
par u=1.0

# Parameter:   id =  lambda, name = lambda, constant
par lambda=10.0

# Parameter:   id =  d, name = d, constant
par d=0.1

# Parameter:   id =  beta, name = beta, constant
par beta=0.1

# Parameter:   id =  gamma, name = gamma, constant
par gamma=0.5

# Parameter:   id =  alpha, name = alpha, constant
par alpha=0.2

# Parameter:   id =  phi, name = phi, constant
par phi=0.1

# Parameter:   id =  eta, name = eta, constant
par eta=0.01

# Parameter:   id =  pa, name = pa, constant
par pa=1.0E-6

# Parameter:   id =  ca, name = ca, constant
par ca=15.5

# Parameter:   id =  r, name = r, constant
par r=1.0

# Parameter:   id =  ba, name = ba, constant
par ba=0.1

# Parameter:   id =  p_i, name = p_i, constant
par p_i=1.0

# Parameter:   id =  ci, name = ci, constant
par ci=12.0

# Parameter:   id =  bi, name = bi, constant
par bi=0.1

# Parameter:   id =  xi, name = xi, constant
par xi=0.01

# assignmentRule: variable = R0
R0=lambda*eta/(d*a1*(a0+eta))*(beta+gamma*phi/(phi+d))
aux R0=R0

# Reaction: id = Host_cell_proliferation, name = Host cell proliferation

Host_cell=COMpartme*Constant_(lambda)

# Reaction: id = Host_cell_death, name = Host cell death

Host_ce_1=COMpartme*d*x

# Reaction: id = Infection_1, name = Infection 1

Infection=COMpartme*function(beta, v, x)

# Reaction: id = Infection_2, name = Infection 2

Infecti_1=COMpartme*function(gamma, v, x)

# Reaction: id = Infected_cell_death_1, name = Infected cell death 1

Infected_=COMpartme*a0*y_0

# Reaction: id = Infected_cell_infection_progression_1, name = Infected cell infection progression 1

Infecte_1=COMpartme*eta*y_0

# Reaction: id = Infected_cell_infection_progression_2, name = Infected cell infection progression 2

Infecte_2=COMpartme*phi*L

# Reaction: id = CTL_induced_infected_cell_death_1, name = CTL-induced infected cell death 1

CTL_induc=COMpartme*function(pa, z_a, y_0)

# Reaction: id = Infected_cell_death_2, name = Infected cell death 2

Infecte_3=COMpartme*a1*y_1

# Reaction: id = CTL_induced_infected_cell_death_2, name = CTL-induced infected cell death 2

CTL_ind_1=COMpartme*function(pa, z_a, y_1)

# Reaction: id = Infected_cell_death_3, name = Infected cell death 3

Infecte_4=COMpartme*d*L

# Reaction: id = Virus_particle_production, name = Virus particle production

Virus_par=COMpartme*function_(k, y_1)

# Reaction: id = Viral_particle_degradation, name = Viral particle degradation

Viral_par=COMpartme*u*v

# Reaction: id = Precursor_T_cell_differentiation_2, name = Precursor T-cell differentiation 2

Precursor=COMpartme*functio_1(alpha, m_8)

# Reaction: id = Infection_induced_CTL_proliferation_stimulation, name = Infection-induced CTL proliferation stimulation

Infecti_2=COMpartme*functio_2(ca, y_0, y_1, z_a)

# Reaction: id = CTL_cell_death, name = CTL cell death

CTL_cell_=COMpartme*ba*z_a

# Reaction: id = Naive_CTL_division_1, name = Naive CTL division 1

Naive_CTL=COMpartme*r*m_0

# Reaction: id = Naive_CTL_division_2, name = Naive CTL division 2

Naive_C_1=COMpartme*r*m_1

# Reaction: id = Naive_CTL_division_3, name = Naive CTL division 3

Naive_C_2=COMpartme*r*m_2

# Reaction: id = Naive_CTL_division_4, name = Naive CTL division 4

Naive_C_3=COMpartme*r*m_3

# Reaction: id = Naive_CTL_division_5, name = Naive CTL division 5

Naive_C_4=COMpartme*r*m_4

# Reaction: id = Naive_CTL_division_6, name = Naive CTL division 6

Naive_C_5=COMpartme*r*m_5

# Reaction: id = Naive_CTL_division_7, name = Naive CTL division 7

Naive_C_6=COMpartme*r*m_6

# Reaction: id = Naive_CTL_division_8, name = Naive CTL division 8

Naive_C_7=COMpartme*r*m_7

# Reaction: id = Precursor_T_cell_differentiation_1, name = Precursor T-cell differentiation 1

Precurs_1=COMpartme*r*m_8

# Reaction: id = NK_cell_production, name = NK cell production

NK_cell_p=COMpartme*Constant_(xi)

# Reaction: id = NK_infection_induced_production, name = NK infection-induced production

NK_infect=COMpartme*functio_3(ci, y_0, y_1, z_i)

# Reaction: id = NK_cell_death, name = NK cell death

NK_cell_d=COMpartme*bi*z_i

# Reaction: id = NK_induced_infected_cell_death_1, name = NK-induced infected cell death 1

NK_induce=COMpartme*function(p_i, z_i, y_0)

# Reaction: id = NK_induced_infected_cell_death_2, name = NK-induced infected cell death 2

NK_indu_1=COMpartme*function(p_i, z_i, y_1)

# Species:   id = x, name = x, affected by kineticLaw

init x=1.0
dx/dt=(1/(COMpartme))*(( 1.0 * Host_cell) + (-1.0 * Host_ce_1) + (-1.0 * Infection) + (-1.0 * Infecti_1))

# Species:   id = y_0, name = y_0, affected by kineticLaw

init y_0=0.0
dy_0/dt=(1/(COMpartme))*(( 1.0 * Infection) + (-1.0 * Infected_) + (-1.0 * Infecte_1) + ( 1.0 * Infecte_2) + (-1.0 * CTL_induc) + (-1.0 * NK_induce))

# Species:   id = y_1, name = y_1, affected by kineticLaw

init y_1=0.0
dy_1/dt=(1/(COMpartme))*(( 1.0 * Infecte_1) + (-1.0 * Infecte_3) + (-1.0 * CTL_ind_1) + (-1.0 * NK_indu_1))

# Species:   id = L, name = L, affected by kineticLaw

init L=0.0
dL/dt=(1/(COMpartme))*(( 1.0 * Infecti_1) + (-1.0 * Infecte_2) + (-1.0 * Infecte_4))

# Species:   id = v, name = v, affected by kineticLaw

init v=1.0
dv/dt=(1/(COMpartme))*(( 1.0 * Virus_par) + (-1.0 * Viral_par))

# Species:   id = z_a, name = z_a, affected by kineticLaw

init z_a=1.0
dz_a/dt=(1/(COMpartme))*(( 1.0 * Precursor) + ( 1.0 * Infecti_2) + (-1.0 * CTL_cell_))

# Species:   id = m_0, name = m_0, affected by kineticLaw

init m_0=0.0
dm_0/dt=(1/(COMpartme))*((-1.0 * Naive_CTL))

# Species:   id = m_1, name = m_1, affected by kineticLaw

init m_1=0.0
dm_1/dt=(1/(COMpartme))*(( 2.0 * Naive_CTL) + (-1.0 * Naive_C_1))

# Species:   id = m_2, name = m_2, affected by kineticLaw

init m_2=0.0
dm_2/dt=(1/(COMpartme))*(( 2.0 * Naive_C_1) + (-1.0 * Naive_C_2))

# Species:   id = m_3, name = m_3, affected by kineticLaw

init m_3=0.0
dm_3/dt=(1/(COMpartme))*(( 2.0 * Naive_C_2) + (-1.0 * Naive_C_3))

# Species:   id = m_4, name = m_4, affected by kineticLaw

init m_4=0.0
dm_4/dt=(1/(COMpartme))*(( 2.0 * Naive_C_3) + (-1.0 * Naive_C_4))

# Species:   id = m_5, name = m_5, affected by kineticLaw

init m_5=0.0
dm_5/dt=(1/(COMpartme))*(( 2.0 * Naive_C_4) + (-1.0 * Naive_C_5))

# Species:   id = m_6, name = m_6, affected by kineticLaw

init m_6=0.0
dm_6/dt=(1/(COMpartme))*(( 2.0 * Naive_C_5) + (-1.0 * Naive_C_6))

# Species:   id = m_7, name = m_7, affected by kineticLaw

init m_7=0.0
dm_7/dt=(1/(COMpartme))*(( 2.0 * Naive_C_6) + (-1.0 * Naive_C_7))

# Species:   id = m_8, name = m_8, affected by kineticLaw

init m_8=0.0
dm_8/dt=(1/(COMpartme))*(( 2.0 * Naive_C_7) + (-1.0 * Precurs_1))

# Species:   id = z_i, name = z_i, affected by kineticLaw

init z_i=0.1
dz_i/dt=(1/(COMpartme))*(( 1.0 * NK_cell_p) + ( 1.0 * NK_infect) + (-1.0 * NK_cell_d))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

