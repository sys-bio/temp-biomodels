
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Zhu2015 - Combined gemcitabine and birinapant in pancreatic cancer cells - mechanistic PD model
#
# is http://identifiers.org/biomodels.db/MODEL1604270001
# isInstanceOf http://identifiers.org/kegg.drug/D02368
# isInstanceOf http://identifiers.org/kegg.drug/D10417
# isInstanceOf http://identifiers.org/biomodels.db/MODEL1604270001
# isInstanceOf http://identifiers.org/bto/BTO:0000988
# isInstanceOf http://identifiers.org/ncit/C49662
# isInstanceOf http://identifiers.org/ncit/C191
# isDescribedBy http://identifiers.org/pubmed/26252969
# is http://identifiers.org/biomodels.db/BIOMD0000000669
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = Pancreas, name = Pancreas, constant
par Pancreas=1.0

# Parameter:   id =  Inh_1, name = Inh_1, defined by a Rule

# Parameter:   id =  IR50, name = IR50, constant
par IR50=123000.0

# Parameter:   id =  Inh_3, name = Inh_3, defined by a Rule

# Parameter:   id =  Imax_3, name = Imax_3, constant
par Imax_3=0.753

# Parameter:   id =  k3, name = k3, constant
par k3=0.222

# Parameter:   id =  k1, name = k1, constant
par k1=0.357

# Parameter:   id =  k_apo, name = k_apo, constant
par k_apo=0.00394

# Parameter:   id =  k2, name = k2, constant
par k2=0.114

# Parameter:   id =  Imax_g, name = Imax_g, constant
par Imax_g=0.878

# Parameter:   id =  C_g, name = C_g, constant
par C_g=20.0

# Parameter:   id =  C_b, name = C_b, constant
par C_b=500.0

# Parameter:   id =  Hi_g, name = Hi_g, constant
par Hi_g=4.34

# Parameter:   id =  Hs_b, name = Hs_b, constant
par Hs_b=1.24

# Parameter:   id =  Hi_b, name = Hi_b, constant
par Hi_b=1.0

# Parameter:   id =  Hs_g, name = Hs_g, constant
par Hs_g=3.0

# Parameter:   id =  Tlag_re, name = Tlag_re, defined by a Rule

# Parameter:   id =  Tlag_sg, name = Tlag_sg, constant
par Tlag_sg=38.7

# Parameter:   id =  k_other, name = k_other, defined by a Rule

# Parameter:   id =  Hother_g, name = Hother_g, constant
par Hother_g=0.1

# Parameter:   id =  Smax_b, name = Smax_b, constant
par Smax_b=3.72

# Parameter:   id =  Psi_i, name = Psi_i, constant
par Psi_i=0.949

# Parameter:   id =  Psi_s, name = Psi_s, constant
par Psi_s=1.26

# Parameter:   id =  Smax_g, name = Smax_g, constant
par Smax_g=2.74

# Parameter:   id =  SC50_g, name = SC50_g, constant
par SC50_g=23.6

# Parameter:   id =  SC50_b, name = SC50_b, constant
par SC50_b=50.1

# Parameter:   id =  k_comb2, name = k_comb2, constant
par k_comb2=7.75E-4

# Parameter:   id =  k_comb1, name = k_comb1, constant
par k_comb1=9.19E-4

# Parameter:   id =  k_repair, name = k_repair, constant
par k_repair=0.0495

# Parameter:   id =  Tlag_r, name = Tlag_r, defined by a Rule

# Parameter:   id =  k_delay, name = k_delay, constant
par k_delay=18.6

# Parameter:   id =  R_0, name = R_0, constant
par R_0=236000.0

# Parameter:   id =  f_G1__0, name = f(G1)_0, constant
par f_G1__0=48.1

# Parameter:   id =  f_S__0, name = f(S)_0, constant
par f_S__0=10.8

# Parameter:   id =  f_apo__0, name = f(apo)_0, constant
par f_apo__0=5.0

# Parameter:   id =  f_other__0, name = f(other)_0, constant
par f_other__=1.5

# Parameter:   id =  f1, name = f1, constant
par f1=0.467

# Parameter:   id =  Imax_b, name = Imax_b, constant
par Imax_b=0.177

# Parameter:   id =  IC50_g, name = IC50_g, constant
par IC50_g=6.0

# Parameter:   id =  IC50_b, name = IC50_b, constant
par IC50_b=154.0

# Parameter:   id =  k_tau, name = k_tau, constant
par k_tau=0.376

# Parameter:   id =  Kother_g, name = Kother_g, constant
par Kother_g=1.0E-5

# Parameter:   id =  Kother_b, name = Kother_b, constant
par Kother_b=0.0055

# Parameter:   id =  Hother_b, name = Hother_b, constant
par Hother_b=1.0

# Parameter:   id =  Inh_g, name = Inh_g, defined by a Rule

# Parameter:   id =  Inh_b, name = Inh_b, defined by a Rule

# Parameter:   id =  Sti_g, name = Sti_g, defined by a Rule

# Parameter:   id =  Sti_other_g, name = Sti_other_g, defined by a Rule

# Parameter:   id =  Sti_other_b, name = Sti_other_b, defined by a Rule

# Parameter:   id =  Sti_b, name = Sti_b, defined by a Rule

# Parameter:   id =  Sti_apo_g, name = Sti_apo_g, constant
par Sti_apo_g=0.0

# Parameter:   id =  Sti_apo_b, name = Sti_apo_b, constant
par Sti_apo_b=0.0

# Parameter:   id =  f_G2__0, name = f(G2)_0, constant
par f_G2__0=34.6

# Parameter:   id =  CURVE_G1, name = CURVE_G1, defined by a Rule

# Parameter:   id =  CURVE_S, name = CURVE_S, defined by a Rule

# Parameter:   id =  CURVE_G2, name = CURVE_G2, defined by a Rule

# Parameter:   id =  CURVE_FIGURE_7a_d_g, name = CURVE_FIGURE_7a/d/g, defined by a Rule

# Parameter:   id =  CURVE_FIGURE_7b_r_h, name = CURVE_FIGURE_7b/r/h, defined by a Rule

# Parameter:   id =  CURVE_FIGURE_7c_f_i, name = CURVE_FIGURE_7c/f/i, constant
par CURVE_F_2=0.0

# assignmentRule: variable = R_total
R_total=G1+S+G2+R_apo+R_other
aux R_total=R_total

# assignmentRule: variable = R_live
R_live=G1+S+G2
aux R_live=R_live

# assignmentRule: variable = Inh_1
Inh_1=R_live/(IR50+R_live)
aux Inh_1=Inh_1

# assignmentRule: variable = Inh_3
Inh_3=Imax_3*R_live/(IR50+R_live)
aux Inh_3=Inh_3

# assignmentRule: variable = k_other
k_other= piecew1 
aux k_other=k_other

# assignmentRule: variable = Tlag_r
Tlag_r= piecew2 
aux Tlag_r=Tlag_r

# assignmentRule: variable = Tlag_re
Tlag_re=(1+k_comb1*C_b)*Tlag_r
aux Tlag_re=Tlag_re

# assignmentRule: variable = Inh_g
Inh_g= piecew6 
aux Inh_g=Inh_g

# assignmentRule: variable = Inh_b
Inh_b=Imax_b*C_b^Hi_b/(IC50_b^Hi_b+C_b^Hi_b)
aux Inh_b=Inh_b

# assignmentRule: variable = Sti_g
Sti_g= piecew7 
aux Sti_g=Sti_g

# assignmentRule: variable = Sti_other_g
Sti_other=Kother_g*C_g^Hother_g
aux Sti_other=Sti_other

# assignmentRule: variable = Sti_other_b
Sti_oth_1=Kother_b*C_b^Hother_b
aux Sti_oth_1=Sti_oth_1

# assignmentRule: variable = Sti_b
Sti_b=Smax_b*C_b^Hs_b/((Psi_s*SC50_b)^Hs_b+C_b^Hs_b)
aux Sti_b=Sti_b

# assignmentRule: variable = CURVE_G1
CURVE_G1=G1/R_total
aux CURVE_G1=CURVE_G1

# assignmentRule: variable = CURVE_S
CURVE_S=S/R_total
aux CURVE_S=CURVE_S

# assignmentRule: variable = CURVE_G2
CURVE_G2=G2/R_total
aux CURVE_G2=CURVE_G2

# assignmentRule: variable = CURVE_FIGURE_7a_d_g
CURVE_FIG=R_live/R_total
aux CURVE_FIG=CURVE_FIG

# assignmentRule: variable = CURVE_FIGURE_7b_r_h
CURVE_F_1=R_apo/R_total
aux CURVE_F_1=CURVE_F_1

# rateRule: variable = G1
init G1=113516.0
dG1/dt=((2*(1-Inh_3)*(1-Inh_b)*k3*G2-(1-Inh_1)*(1-Inh_b)*k1*G1)-(1+Sti_apo_g)*(1+Sti_apo_b)*k_apo*G1)-(1+Sti_other)*(1+Sti_oth_1)*k_other*G1

# rateRule: variable = S
init S=25488.0
dS/dt=(((1-Inh_1)*(1-Inh_b)*k1*G1-(1-Inh_g)*k2*S)-(1+Sti_apo_g)*(1+Sti_apo_b)*k_apo*S)-(1+Sti_other)*(1+Sti_oth_1)*k_other*S

# rateRule: variable = G2
init G2=81656.0
dG2/dt=(((1-Inh_g)*k2*S-(1-Inh_3)*(1-Inh_b)*k3*G2)-(1+Sti_apo_g)*(1+Sti_apo_b)*k_apo*G2)-(1+Sti_other)*(1+Sti_oth_1)*k_other*G2

# rateRule: variable = R_apo
init R_apo=11800.0
dR_apo/dt=(1+Sti_apo_g)*(1+Sti_apo_b)*k_apo*(G1+S+G2)-(1+Sti_apo_g)*(1+Sti_apo_b)*f1*k_apo*R_apo

# rateRule: variable = R_other
init R_other=3540.0
dR_other/dt=(1+Sti_other)*(1+Sti_oth_1)*k_other*(G1+S+G2)-k_other*R_other

# Species:   id = G1, name = G1, involved in a rule 

# Species:   id = S, name = S, involved in a rule 

# Species:   id = G2, name = G2, involved in a rule 

# Species:   id = R_apo, name = R_apo, involved in a rule 

# Species:   id = R_other, name = R_other, involved in a rule 

# Species:   id = R_total, name = R_total, involved in a rule 

# Species:   id = R_live, name = R_live, involved in a rule 


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if ((C_b  !=  0) && (C_g  !=  0)) then (0.000297) else (0)

piecew2=if (C_g  ==  0) then (0) else (k_delay*ln(C_g))

piecew3=if ((C_b  !=  0) && (t  >  Tlag_re)) then (Imax_g*C_g^Hi_g/((Psi_i*IC50_g)^Hi_g+C_g^Hi_g)*exp((-1)*(1-k_comb2*C_b)*k_repair*(t-Tlag_re))) else (0)

piecew4=if ((C_b  !=  0) && (t  <=  Tlag_re)) then (Imax_g*C_g^Hi_g/((Psi_i*IC50_g)^Hi_g+C_g^Hi_g)) else ( piecew3 )

piecew5=if ((C_b  ==  0) && (t  >  Tlag_r)) then (Imax_g*C_g^Hi_g/(IC50_g^Hi_g+C_g^Hi_g)*exp((-1)*k_repair*(t-Tlag_r))) else ( piecew4 )

piecew6=if ((C_b  ==  0) && (t  <=  Tlag_r)) then (Imax_g*C_g^Hi_g/(IC50_g^Hi_g+C_g^Hi_g)) else ( piecew5 )

piecew7=if (t  <=  Tlag_sg) then (0) else (Smax_g*C_g^Hs_g/(SC50_g^Hs_g+C_g^Hs_g))


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

