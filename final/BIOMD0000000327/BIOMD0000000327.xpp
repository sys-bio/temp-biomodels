
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Whitcomb2004_Bicarbonate_Pancreas
#
# is http://identifiers.org/biomodels.db/MODEL1104180000
# is http://identifiers.org/biomodels.db/BIOMD0000000327
# isDescribedBy http://identifiers.org/pubmed/15257112
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = ap
ap(ao,ai,bo,bi,ka,kb)=((ao*bi-bo*ai)/(ka*kb*((1+ai/ka+bi/kb)*(ao/ka+bo/kb)+(1+ao/ka+bo/kb)*(ai/ka+bi/kb))))


# FunctionDefinition id = g
g(xi,xo)=(xi*xo*log(xi/xo)/(xi-xo))


# Compartment: id = plasma, name = plasma, constant
par plasma=1.0

# Compartment: id = cell, name = cell, constant
par cell=1.0

# Compartment: id = lumen, name = lumen, constant
par lumen=0.1

# Parameter:   id =  g_bi, name = g_bi, constant
par g_bi=0.2

# Parameter:   id =  g_cl, name = g_cl, constant
par g_cl=1.0

# Parameter:   id =  zeta, name = zeta, constant
par zeta=50.0

# Parameter:   id =  kbi, name = kbi, constant
par kbi=1.0

# Parameter:   id =  kcl, name = kcl, constant
par kcl=10.0

# Parameter:   id =  gnbc, name = gnbc, constant
par gnbc=2.0

# Parameter:   id =  gapl, name = gapl, constant
par gapl=0.25

# Parameter:   id =  gapbl, name = gapbl, constant
par gapbl=0.005

# Parameter:   id =  vr, name = vr, constant
par vr=10.0

# Parameter:   id =  bi0, name = bi0, constant
par bi0=15.0

# Parameter:   id =  buf, name = buf, constant
par buf=0.1

# Parameter:   id =  gcftron, name = gcftron, constant
par gcftron=1.0

# Parameter:   id =  gcftrbase, name = gcftrbase, constant
par gcftrbase=7.0E-5

# Parameter:   id =  ek, name = ek, constant
par ek=-0.085

# Parameter:   id =  gk, name = gk, constant
par gk=1.0

# Parameter:   id =  r, name = gas constant, constant
par r=8.31451

# Parameter:   id =  f, name = Faraday constant, constant
par f=96485.0

# Parameter:   id =  temp, name = temp, constant
par temp=310.0

# Parameter:   id =  ionstr, name = ionstr, constant
par ionstr=160.0

# Parameter:   id =  gnak, name = gnak, constant
par gnak=3.125

# Parameter:   id =  np0, name = np0, constant
par np0=25.0

# Parameter:   id =  epump, name = epump, constant
par epump=-0.2

# Parameter:   id =  gnaleak, name = gnaleak, constant
par gnaleak=0.4

# Parameter:   id =  jac, name = jac, constant
par jac=0.025

# Parameter:   id =  rat, name = rat, constant
par rat=0.25

# Parameter:   id =  ton, name = ton, constant
par ton=60.0

# Parameter:   id =  toff, name = toff, constant
par toff=360.0

# Parameter:   id =  gcftr, name = gcftr
par gcftr=NaN

# Parameter:   id =  eb, name = eb, defined by a Rule

# Parameter:   id =  enbc, name = enbc, defined by a Rule

# Parameter:   id =  ec, name = ec, defined by a Rule

# Parameter:   id =  ena, name = ena, defined by a Rule

# Parameter:   id =  kccf, name = kccf, defined by a Rule

# Parameter:   id =  kbcf, name = kbcf, defined by a Rule

# Parameter:   id =  knbc, name = knbc, defined by a Rule

# Parameter:   id =  v, name = v, defined by a Rule

# Parameter:   id =  jnbc, name = jnbc, defined by a Rule

# Parameter:   id =  jbcftr, name = jbcftr, defined by a Rule

# Parameter:   id =  jccftr, name = jccftr, defined by a Rule

# Parameter:   id =  japl, name = japl, defined by a Rule

# Parameter:   id =  japbl, name = japbl, defined by a Rule

# Parameter:   id =  jlum, name = jlum, defined by a Rule

# Parameter:   id =  jnak, name = jnak, defined by a Rule

# Parameter:   id =  jnaleak, name = jnaleak, defined by a Rule

# assignmentRule: variable = cl
cl=160-bl
aux cl=cl

# assignmentRule: variable = eb
eb=r*temp/f*log(bi/bl)
aux eb=eb

# assignmentRule: variable = enbc
enbc=r*temp/f*log(bi^2*ni/(bb^2*nb))
aux enbc=enbc

# assignmentRule: variable = ec
ec=r*temp/f*log(ci/cl)
aux ec=ec

# assignmentRule: variable = ena
ena=r*temp/f*log(nb/ni)
aux ena=ena

# assignmentRule: variable = kccf
kccf=g(ci, cl)*gcftr*g_cl
aux kccf=kccf

# assignmentRule: variable = kbcf
kbcf=g(bi, bl)*gcftr*g_bi
aux kbcf=kbcf

# assignmentRule: variable = knbc
knbc=gnbc
aux knbc=knbc

# assignmentRule: variable = v
v=(knbc*enbc+kbcf*eb+kccf*ec+gk*ek+gnaleak*ena)/(knbc+kbcf+kccf+gk)
aux v=v

# assignmentRule: variable = jnbc
jnbc=knbc*(v-enbc)
aux jnbc=jnbc

# assignmentRule: variable = jbcftr
jbcftr=kbcf*(v-eb)
aux jbcftr=jbcftr

# assignmentRule: variable = jccftr
jccftr=kccf*(v-ec)
aux jccftr=jccftr

# assignmentRule: variable = japl
japl=ap(bl, bi, cl, ci, kbi, kcl)*gapl
aux japl=japl

# assignmentRule: variable = japbl
japbl=ap(bb, bi, cb, ci, kbi, kcl)*gapbl
aux japbl=japbl

# assignmentRule: variable = jlum
jlum=((-(jccftr+jbcftr))*vr+jac*(1+rat))/ionstr
aux jlum=jlum

# assignmentRule: variable = jnak
jnak=gnak*(v-epump)*(ni/np0)^3
aux jnak=jnak

# assignmentRule: variable = jnaleak
jnaleak=gnaleak*(v-ena)
aux jnaleak=jnaleak

# Reaction: id = nbc

nbc=cell*zeta*japl

# Reaction: id = bcftr

bcftr=cell*zeta*jbcftr

# Reaction: id = ccftr

ccftr=cell*zeta*jccftr

# Reaction: id = apl

apl=cell*zeta*japl

# Reaction: id = apbl

apbl=cell*zeta*japbl

# Reaction: id = nak

nak=cell*zeta*jnak

# Reaction: id = naleak

naleak=cell*zeta*jnaleak

# Reaction: id = buffering

buffering=cell*zeta*buf*(bi0-bi)

# Reaction: id = bac

bac=lumen*zeta*jac*rat

# Reaction: id = cac

cac=lumen*zeta*jac

# Reaction: id = outflow

outflow=lumen*zeta*jlum*bl

# Species:   id = bb, name = HCO3-, constant
par bb=22.0


# Species:   id = cb, name = CL-, constant
par cb=130.0


# Species:   id = nb, name = Na+, constant
par nb=140.0


# Species:   id = bi, name = HCO3-, affected by kineticLaw

init bi=15.0
dbi/dt=(1/(cell))*(( 2.0 * nbc) + ( 1.0 * bcftr) + ( 1.0 * apl) + ( 1.0 * apbl) + ( 1.0 * buffering))

# Species:   id = ci, name = CL-, affected by kineticLaw

init ci=60.0
dci/dt=(1/(cell))*(( 1.0 * ccftr) + (-1.0 * apl) + (-1.0 * apbl))

# Species:   id = ni, name = Na+, affected by kineticLaw

init ni=14.0
dni/dt=(1/(cell))*(( 1.0 * nbc) + (-1.0 * nak) + (-1.0 * naleak))

# Species:   id = bl, name = HCO3-, affected by kineticLaw

init bl=32.0
dbl/dt=(1/(lumen))*((-1.0 * bcftr) + (-1.0 * apl) + ( 1.0 * bac) + (-1.0 * outflow))

# Species:   id = cl, name = CL-, involved in a rule 

# event : event1
event1=if (t >= ton) then (1.5) else (0.2)
global 1 {event1 - 1.1} {gcftr=gcftron}

# event : event2
event2=if (t >= toff) then (1.5) else (0.2)
global 1 {event2 - 1.1} {gcftr=gcftrbase}

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

