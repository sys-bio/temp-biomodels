
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Novak2001_FissionYeast_CellCycle
#
# is http://identifiers.org/biomodels.db/MODEL6488296959
# is http://identifiers.org/biomodels.db/BIOMD0000000111
# isDescribedBy http://identifiers.org/pubmed/12779461
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = cell, name = cell, constant
par cell=1.0

# Parameter:   id =  flag_MPF, name = flag_MPF
par flag_MPF=0.0

# Parameter:   id =  sigma, name = sigma, defined by a Rule

# Parameter:   id =  Kdiss, name = Kdiss, constant
par Kdiss=0.001

# Parameter:   id =  Trimer, name = Trimer, defined by a Rule

# Parameter:   id =  TF, name = TF, defined by a Rule

# Parameter:   id =  k15, name = k15, constant
par k15=1.5

# Parameter:   id =  J16, name = J16, constant
par J16=0.01

# Parameter:   id =  k16_prime, name = k16_prime, constant
par k16_prime=1.0

# Parameter:   id =  k16_double_prime, name = k16_double_prime, constant
par k16_doubl=2.0

# Parameter:   id =  J15, name = J15, constant
par J15=0.01

# Parameter:   id =  kwee, name = kwee, defined by a Rule

# Parameter:   id =  kwee_prime, name = kwee_prime, constant
par kwee_prim=0.15

# Parameter:   id =  kwee_double_prime, name = kwee_double_prime, constant
par kwee_doub=1.3

# Parameter:   id =  Vawee, name = Vawee, constant
par Vawee=0.25

# Parameter:   id =  Jiwee, name = Jiwee, constant
par Jiwee=0.01

# Parameter:   id =  Viwee, name = Viwee, constant
par Viwee=1.0

# Parameter:   id =  Jawee, name = Jawee, constant
par Jawee=0.01

# Parameter:   id =  k25, name = k25, defined by a Rule

# Parameter:   id =  k25_prime, name = k25_prime, constant
par k25_prime=0.05

# Parameter:   id =  k25_double_prime, name = k25_double_prime, constant
par k25_doubl=5.0

# Parameter:   id =  Va25, name = Va25, constant
par Va25=1.0

# Parameter:   id =  Ji25, name = Ji25, constant
par Ji25=0.01

# Parameter:   id =  Vi25, name = Vi25, constant
par Vi25=0.25

# Parameter:   id =  Ja25, name = Ja25, constant
par Ja25=0.01

# Parameter:   id =  k1, name = k1, constant
par k1=0.03

# Parameter:   id =  k2_prime, name = k2_prime, constant
par k2_prime=0.03

# Parameter:   id =  k2_double_prime, name = k2_double_prime, constant
par k2_double=1.0

# Parameter:   id =  k2_triple_prime, name = k2_triple_prime, constant
par k2_triple=0.1

# Parameter:   id =  k3_prime, name = k3_prime, constant
par k3_prime=1.0

# Parameter:   id =  k3_double_prime, name = k3_double_prime, constant
par k3_double=10.0

# Parameter:   id =  J3, name = J3, constant
par J3=0.01

# Parameter:   id =  k4_prime, name = k4_prime, constant
par k4_prime=2.0

# Parameter:   id =  k4, name = k4, constant
par k4=35.0

# Parameter:   id =  J4, name = J4, constant
par J4=0.01

# Parameter:   id =  k5_prime, name = k5_prime, constant
par k5_prime=0.005

# Parameter:   id =  k5_double_prime, name = k5_double_prime, constant
par k5_double=0.3

# Parameter:   id =  J5, name = J5, constant
par J5=0.3

# Parameter:   id =  k6, name = k6, constant
par k6=0.1

# Parameter:   id =  k7, name = k7, constant
par k7=1.0

# Parameter:   id =  J7, name = J7, constant
par J7=0.001

# Parameter:   id =  k8, name = k8, constant
par k8=0.25

# Parameter:   id =  J8, name = J8, constant
par J8=0.001

# Parameter:   id =  k9, name = k9, constant
par k9=0.1

# Parameter:   id =  J9, name = J9, constant
par J9=0.01

# Parameter:   id =  k10, name = k10, constant
par k10=0.04

# Parameter:   id =  J10, name = J10, constant
par J10=0.01

# Parameter:   id =  k11, name = k11, constant
par k11=0.1

# Parameter:   id =  k12, name = k12, constant
par k12=0.01

# Parameter:   id =  k12_prime, name = k12_prime, constant
par k12_prime=1.0

# Parameter:   id =  k12_double_prime, name = k12_double_prime, constant
par k12_doubl=3.0

# Parameter:   id =  k13, name = k13, constant
par k13=0.1

# Parameter:   id =  k14, name = k14, constant
par k14=0.1

# Parameter:   id =  mu, name = mu, constant
par mu=0.005

# assignmentRule: variable = sigma
sigma=cdc13T+rum1T+Kdiss
aux sigma=sigma

# assignmentRule: variable = Trimer
Trimer=2*cdc13T*rum1T/(sigma+(sigma^2-4*cdc13T*rum1T)^0.5)
aux Trimer=Trimer

# assignmentRule: variable = MPF
MPF=(cdc13T-preMPF)*(cdc13T-Trimer)/cdc13T
aux MPF=MPF

# assignmentRule: variable = TF
TF=2*k15*M*J16/(k16_prime+k16_doubl*MPF-k15*M+(k16_prime+k16_doubl*MPF)*J15+k15*M*J16+((k16_prime+k16_doubl*MPF-k15*M+(k16_prime+k16_doubl*MPF)*J15+k15*M*J16)^2-4*(k16_prime+k16_doubl*MPF-k15*M)*k15*M*J16)^(0.5))
aux TF=TF

# assignmentRule: variable = kwee
kwee=kwee_prim+(kwee_doub-kwee_prim)*2*Vawee*Jiwee/(Viwee*MPF-Vawee+Viwee*MPF*Jawee+Vawee*Jiwee+((Viwee*MPF-Vawee+Viwee*MPF*Jawee+Vawee*Jiwee)^2-4*(Viwee*MPF-Vawee)*Vawee*Jiwee)^(0.5))
aux kwee=kwee

# assignmentRule: variable = k25
k25=k25_prime+(k25_doubl-k25_prime)*2*Va25*MPF*Ji25/(Vi25-Va25*MPF+Vi25*Ja25+Va25*MPF*Ji25+((Vi25-Va25*MPF+Vi25*Ja25+Va25*MPF*Ji25)^2-4*(Vi25-Va25*MPF)*Va25*MPF*Ji25)^(0.5))
aux k25=k25

# Reaction: id = R1, name = cdc13T synthesis

R1=k1*M

# Reaction: id = R2, name = Targeting cdc13T to APC core

R2=(k2_prime+k2_double*ste9+k2_triple*slp1)*cdc13T

# Reaction: id = R3, name = wee1 dependent MPF inactivation

R3=kwee*(cdc13T-preMPF)

# Reaction: id = R4, name = cdc25 dependent preMPF phosphorylation

R4=k25*preMPF

# Reaction: id = R5, name = preMPF inactivation

R5=(k2_prime+k2_double*ste9+k2_triple*slp1)*preMPF

# Reaction: id = R6, name = slp1 dependent ste9 activation

R6=(k3_prime+k3_double*slp1)*(1-ste9)/(J3+1-ste9)

# Reaction: id = R7, name = ste9 phosphorylation (inactivation) by starter kinase

R7=(k4_prime*SK+k4*MPF)*ste9/(J4+ste9)

# Reaction: id = R8, name = slp1T activation by MPF

R8=k5_prime+k5_double*MPF^4/(J5^4+MPF^4)

# Reaction: id = R9, name = slp1T inactivation

R9=k6*slp1T

# Reaction: id = R10, name = slp1 activation by intermediary enzyme

R10=k7*IEP*(slp1T-slp1)/(J7+slp1T-slp1)

# Reaction: id = R11, name = slp1 inactivation

R11=k8*slp1/(J8+slp1)

# Reaction: id = R12, name = slp1 inactivation

R12=k6*slp1

# Reaction: id = R13, name = Intermediary enzyme activation

R13=k9*MPF*(1-IEP)/(J9+1-IEP)

# Reaction: id = R14, name = IEP inactivation

R14=k10*IEP/(J10+IEP)

# Reaction: id = R15, name = rum1T activation

R15=k11

# Reaction: id = R16, name = SK dependent rum1T inactivation

R16=(k12+k12_prime*SK+k12_doubl*MPF)*rum1T

# Reaction: id = R17, name = SK synthesis

R17=k13*TF

# Reaction: id = R18, name = SK degradation

R18=k14*SK

# Reaction: id = R19, name = Cell growth

R19=mu*M

# Species:   id = cdc13T, name = Total cdc13, affected by kineticLaw

init cdc13T=0.2
dcdc13T/dt=( 1.0 * R1) + (-1.0 * R2)

# Species:   id = preMPF, name = preMPF, affected by kineticLaw

init preMPF=0.0
dpreMPF/dt=( 1.0 * R3) + (-1.0 * R4) + (-1.0 * R5)

# Species:   id = ste9, name = ste9, affected by kineticLaw

init ste9=1.0
dste9/dt=( 1.0 * R6) + (-1.0 * R7)

# Species:   id = slp1T, name = slp1T, affected by kineticLaw

init slp1T=0.0
dslp1T/dt=( 1.0 * R8) + (-1.0 * R9)

# Species:   id = slp1, name = slp1, affected by kineticLaw

init slp1=2.2
dslp1/dt=( 1.0 * R10) + (-1.0 * R11) + (-1.0 * R12)

# Species:   id = IEP, name = IEP, affected by kineticLaw

init IEP=0.0
dIEP/dt=( 1.0 * R13) + (-1.0 * R14)

# Species:   id = rum1T, name = rum1T, affected by kineticLaw

init rum1T=0.0
drum1T/dt=( 1.0 * R15) + (-1.0 * R16)

# Species:   id = SK, name = SK, affected by kineticLaw

init SK=0.0
dSK/dt=( 1.0 * R17) + (-1.0 * R18)

# Species:   id = M, name = Cell Mass, affected by kineticLaw
# Species is changed by 1 event(s)
init M=1.0
dM/dt=( 1.0 * R19)

# Species:   id = MPF, name = M-phase promoting factor, defined in a rule 

# event : event_0000001
event_000=if ((MPF <= 0.1) && (flag_MPF == 1)) then (1.5) else (0.2)
global 1 {event_000 - 1.1} {M=M/2;flag_MPF=0}

# event : event_0000002
event_0_1=if (MPF > 0.1) then (1.5) else (0.2)
global 1 {event_0_1 - 1.1} {flag_MPF=1}

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

