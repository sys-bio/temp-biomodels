
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Yazdjer2019 - reinforcement learning-based control of tumor growth under anti-angiogenic therapy
#
# is http://identifiers.org/biomodels.db/MODEL1909240003
# is http://identifiers.org/biomodels.db/BIOMD0000000821
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_tumor_growth, name = Function for tumor growth
Function_(lambda_1,x_1,x_2,a)=(lambda_1*x_1*log(x_1/x_2)*a)


# FunctionDefinition id = Function_for_drug_kill, name = Function for drug kill
Functio_1(e,x_2,x_3,a)=(e*x_2*x_3*a)


# FunctionDefinition id = Function_for_inhibition_effect, name = Function for inhibition effect
Functio_2(d,x_2,x_1,a)=(d*x_2*x_1^(2/3)*a)


# FunctionDefinition id = Function_for_endothelial_loss, name = Function for endothelial loss
Functio_3(lambda_2,x_2,a)=(lambda_2*x_2*a)


# FunctionDefinition id = Function_for_stimulatory_effect, name = Function for stimulatory effect
Functio_4(b,x_1,a)=(b*x_1*a)


# FunctionDefinition id = Function_for_inhibitor_clearance, name = Function for inhibitor clearance
Functio_5(lambda_3,x_3,a)=(lambda_3*x_3*a)


# FunctionDefinition id = Function_for_administrated_inhibitor_rate, name = Function for administrated inhibitor rate
Functio_6(u)=(u)


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  lambda_1, name = lambda_1, constant
par lambda_1=0.192

# Parameter:   id =  lambda_2, name = lambda_2, constant
par lambda_2=0.0

# Parameter:   id =  lambda_3, name = lambda_3, constant
par lambda_3=1.3

# Parameter:   id =  b, name = b, constant
par b=5.85

# Parameter:   id =  d, name = d, constant
par d=0.00873

# Parameter:   id =  e, name = e, constant
par e=0.66

# Parameter:   id =  u, name = u, constant
par u=0.0

# Parameter:   id =  a, name = a, constant
par a=1.0

# Reaction: id = tumor_growth, name = tumor growth

tumor_gro=compartme*Function_(lambda_1, tumor_vol, endotheli, a)

# Reaction: id = endothelial_loss, name = endothelial loss

endothe_1=compartme*Functio_3(lambda_2, endotheli, a)

# Reaction: id = stimulatory_effect, name = stimulatory effect

stimulato=compartme*Functio_4(b, tumor_vol, a)

# Reaction: id = inhibition_effect, name = inhibition effect

inhibitio=compartme*Functio_2(d, endotheli, tumor_vol, a)

# Reaction: id = drug_kill, name = drug kill

drug_kill=compartme*Functio_1(e, endotheli, concentra, a)

# Reaction: id = inhibitor_clearance, name = inhibitor clearance

inhibitor=compartme*Functio_5(lambda_3, concentra, a)

# Reaction: id = administrated_inhibitor, name = administrated inhibitor

administr=compartme*Functio_6(u)

# Species:   id = tumor_volume_x_1, name = tumor volume x_1, affected by kineticLaw

par tumor_vol=1.0
aux tumor_vol=tumor_vol
dtumor_vol/dt=(1/(compartme))*((-1.0 * tumor_gro))

# Species:   id = endothelial_volume_x_2, name = endothelial volume x_2, affected by kineticLaw

par endotheli=1.0
aux endotheli=endotheli
dendotheli/dt=(1/(compartme))*((-1.0 * endothe_1) + ( 1.0 * stimulato) + (-1.0 * inhibitio) + (-1.0 * drug_kill))

# Species:   id = concentration_of_administrated_inhibitor_x_3, name = concentration of administrated inhibitor x_3, affected by kineticLaw

par concentra=0.0
aux concentra=concentra
dconcentra/dt=(1/(compartme))*((-1.0 * inhibitor) + ( 1.0 * administr))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

