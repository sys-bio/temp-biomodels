
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Zi2011_TGF-beta_Pathway
#
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = default, name = default, constant
par default=1.0
# Compartment: id = Vmed, name = Medium, defined by a Rule

# Compartment: id = Vcyt, name = Cytoplasm, constant
par Vcyt=2.3E-12

# Compartment: id = Vnuc, name = Nucleus, constant
par Vnuc=1.0E-12

# Parameter:   id =  stimulation_type, name = stimulation_type, constant
par stimulati=2.0

# Parameter:   id =  single_pulse_duration, name = single_pulse_duration, constant
par single_pu=0.5

# Parameter:   id =  totalNumT1R, name = totalNumT1R, defined by a Rule

# Parameter:   id =  totalNumT2R, name = totalNumT2R, defined by a Rule

# Parameter:   id =  totalNumLRC, name = totalNumLRC, defined by a Rule

# Parameter:   id =  totalNumPSmad2, name = totalNumPSmad2, defined by a Rule

# Parameter:   id =  totalNuclearPSmad2, name = totalNuclearPSmad2, defined by a Rule

# Parameter:   id =  totalSmad2c, name = totalSmad2c, defined by a Rule

# Parameter:   id =  totalSmad2n, name = totalSmad2n, defined by a Rule

# Parameter:   id =  medium_TGF_beta_amount, name = medium_TGF_beta_amount, defined by a Rule

# Parameter:   id =  TGF_beta_dose_mol_per_cell, name = TGF_beta_dose_mol_per_cell
# Warning parameter TGF_beta_dose_mol_per_cell is not constant, it should be controled by a Rule and/or events
par TGF_beta_=0.0

# Parameter:   id =  ki, name = ki, constant
par ki=0.333

# Parameter:   id =  kr, name = kr, constant
par kr=0.0333

# Parameter:   id =  k_T1R, name = k_T1R, constant
par k_T1R=0.0167

# Parameter:   id =  k_T2R, name = k_T2R, constant
par k_T2R=0.0190076

# Parameter:   id =  kdeg_T1R, name = kdeg_T1R, constant
par kdeg_T1R=0.00256

# Parameter:   id =  kdeg_T2R, name = kdeg_T2R, constant
par kdeg_T2R=0.0132

# Parameter:   id =  kdeg_LRC, name = kdeg_LRC, constant
par kdeg_LRC=0.00256

# Parameter:   id =  kdeg_TGF_beta, name = kdeg_TGF_beta, constant
par kdeg_TGF_=0.347

# Parameter:   id =  klid, name = klid, constant
par klid=0.0233678

# Parameter:   id =  ka_LRC, name = ka_LRC, constant
par ka_LRC=117.897

# Parameter:   id =  kdiss_LRC, name = kdiss_LRC, constant
par kdiss_LRC=0.0438111

# Parameter:   id =  kimp_Smad2, name = kimp_Smad2, constant
par kimp_Smad=0.156

# Parameter:   id =  kexp_Smad2, name = kexp_Smad2, constant
par kexp_Smad=0.763

# Parameter:   id =  kimp_Smad4, name = kimp_Smad4, constant
par kimp_Sm_1=0.156

# Parameter:   id =  kexp_Smad4, name = kexp_Smad4, constant
par kexp_Sm_1=0.359

# Parameter:   id =  kpho_Smad2, name = kpho_Smad2, constant
par kpho_Smad=0.0488268

# Parameter:   id =  kon_Smads, name = kon_Smads, constant
par kon_Smads=0.198472

# Parameter:   id =  koff_Smads, name = koff_Smads, constant
par koff_Smad=1.0

# Parameter:   id =  kimp_Smads, name = kimp_Smads, constant
par kimp_Sm_2=0.889

# Parameter:   id =  kdepho_Smad2, name = kdepho_Smad2, constant
par kdepho_Sm=0.394

# Parameter:   id =  kon_ns, name = kon_ns, constant
par kon_ns=0.0505413

# Parameter:   id =  koff_ns, name = koff_ns, defined by a Rule

# Parameter:   id =  KD_ns, name = KD_ns, constant
par KD_ns=40.2257

# assignmentRule: variable = Vmed
# the operator E6 is not supported by xpp
# the formula is : 2E-3/(1E6*exp(log(1.45)*t/1440))
#Rule ignored : there are some unsupported functions !!

# assignmentRule: variable = totalNumPSmad2
totalNumP=(PSmad2c+PSmad2_PS*2+PSmad2_Sm)*2.3*602+(PSmad2n+PSmad2__1*2+PSmad2__2)*602
aux totalNumP=totalNumP

# assignmentRule: variable = totalNuclearPSmad2
totalNucl=PSmad2n+2*PSmad2__1+PSmad2__2
aux totalNucl=totalNucl

# assignmentRule: variable = totalNumT1R
totalNumT=(T1R_surf+T1R_endo+LRC_surf+LRC_endo)*2.3*602
aux totalNumT=totalNumT

# assignmentRule: variable = totalNumT2R
totalNu_1=(T2R_surf+T2R_endo+LRC_surf+LRC_endo)*2.3*602
aux totalNu_1=totalNu_1

# assignmentRule: variable = totalNumLRC
totalNumL=(LRC_surf+LRC_endo)*2.3*602
aux totalNumL=totalNumL

# assignmentRule: variable = totalSmad2c
totalSmad=Smad2c+PSmad2c+2*PSmad2_PS+PSmad2_Sm
aux totalSmad=totalSmad

# assignmentRule: variable = totalSmad2n
totalSm_1=Smad2n+PSmad2n+2*PSmad2__1+PSmad2__2
aux totalSm_1=totalSm_1

# assignmentRule: variable = koff_ns
koff_ns=kon_ns*KD_ns
aux koff_ns=koff_ns

# assignmentRule: variable = medium_TGF_beta_amount
# the operator E23 is not supported by xpp
# the formula is : TGF_bet_1*1E-9*Vmed*6E23
#Rule ignored : there are some unsupported functions !!

# Reaction: id = re1, name = T1R production

re1=Vcyt*k_T1R

# Reaction: id = re2, name = T1R internalization to early endosome

re2=Vcyt*ki*T1R_surf

# Reaction: id = re3, name = T1R recycling from early endosome

re3=Vcyt*kr*T1R_endo

# Reaction: id = re4, name = T1R constitutive degradation

re4=Vcyt*kdeg_T1R*T1R_endo

# Reaction: id = re5, name = T2R production

re5=Vcyt*k_T2R

# Reaction: id = re6, name = T2R internalization to early endosome

re6=Vcyt*ki*T2R_surf

# Reaction: id = re7, name = T2R recycling from early endosome

re7=Vcyt*kr*T2R_endo

# Reaction: id = re8, name = T2R constitutive degradation

re8=Vcyt*kdeg_T2R*T2R_endo

# Reaction: id = re9, name = LRC activation

re9=Vcyt*ka_LRC*TGF_bet_1*T2R_surf*T1R_surf

# Reaction: id = re10, name = LRC internalization to early endosome

re10=Vcyt*ki*LRC_surf

# Reaction: id = re11, name = LRC constitutive degradation

re11=Vcyt*kdeg_LRC*LRC_endo

# Reaction: id = re12, name = dissociation of LRC in endosome

re12=Vcyt*kdiss_LRC*LRC_endo

# Reaction: id = re13, name = TGF-beta constitutive degradation

re13=Vcyt*kdeg_TGF_*TGF_bet_2

# Reaction: id = re14, name = Smad2 nuclear import

re14=Vcyt*kimp_Smad*Smad2c

# Reaction: id = re15, name = Smad2 nuclear export

re15=Vnuc*kexp_Smad*Smad2n

# Reaction: id = re16, name = Smad4 nuclear import

re16=Vcyt*kimp_Sm_1*Smad4c

# Reaction: id = re17, name = Smad4 nuclear export

re17=Vnuc*kexp_Sm_1*Smad4n

# Reaction: id = re18, name = Smad2 phosphorylation

re18=Vcyt*kpho_Smad*Smad2c*LRC_endo

# Reaction: id = re19, name = PSmad2 nuclear import

re19=Vcyt*kimp_Smad*PSmad2c

# Reaction: id = re20, name = PSmad2 nuclear export

re20=Vnuc*kexp_Smad*PSmad2n

# Reaction: id = re21, name = Smad2-Smad4 complex formation

re21=Vcyt*(kon_Smads*PSmad2c*Smad4c-koff_Smad*PSmad2_Sm)

# Reaction: id = re22, name = Smad2-Smad4 nuclear import

re22=Vcyt*kimp_Sm_2*PSmad2_Sm

# Reaction: id = re23, name = Smad2-Smad4 dissociation

re23=Vnuc*(koff_Smad*PSmad2__2-kon_Smads*PSmad2n*Smad4n)

# Reaction: id = re24, name = Smad2 dephosphorylation

re24=Vnuc*kdepho_Sm*PSmad2n

# Reaction: id = re25, name = PSmad2 dimer formation

re25=Vcyt*(kon_Smads*PSmad2c^2-koff_Smad*PSmad2_PS)

# Reaction: id = re26, name = PSmad2 dimer nuclear  import

re26=Vcyt*kimp_Sm_2*PSmad2_PS

# Reaction: id = re27, name = PSmad2 dimmer dissociation

re27=Vnuc*(koff_Smad*PSmad2__1-kon_Smads*PSmad2n^2)

# Reaction: id = re28, name = negative feedback induced LRC degradation

re28=Vcyt*klid*LRC_surf*totalNucl

# Reaction: id = re29, name = non-specific binding of TGF-beta

re29=Vmed*(kon_ns*TGF_bet_1-koff_ns*TGF_bet_3)

# Species:   id = TGF_beta_ex, name = TGF_beta_ex, affected by kineticLaw
# Species is changed by 1 event(s)
par TGF_bet_1=0.05
aux TGF_bet_1=TGF_bet_1
dTGF_bet_1/dt=(1/(Vmed))*((-1.0 * re9) + (-1.0 * re29))

# Species:   id = T1R_surf, name = T1R_surf, affected by kineticLaw

init T1R_surf=0.702494
dT1R_surf/dt=(1/(Vcyt))*(( 1.0 * re1) + (-1.0 * re2) + ( 1.0 * re3) + (-1.0 * re9))

# Species:   id = T1R_endo, name = T1R_endo, affected by kineticLaw

init T1R_endo=6.52344
dT1R_endo/dt=(1/(Vcyt))*(( 1.0 * re2) + (-1.0 * re3) + (-1.0 * re4) + ( 1.0 * re12))

# Species:   id = T2R_surf, name = T2R_surf, affected by kineticLaw

init T2R_surf=0.201077
dT2R_surf/dt=(1/(Vcyt))*(( 1.0 * re5) + (-1.0 * re6) + ( 1.0 * re7) + (-1.0 * re9))

# Species:   id = T2R_endo, name = T2R_endo, affected by kineticLaw

init T2R_endo=1.43997
dT2R_endo/dt=(1/(Vcyt))*(( 1.0 * re6) + (-1.0 * re7) + (-1.0 * re8) + ( 1.0 * re12))

# Species:   id = LRC_surf, name = LRC_surf, affected by kineticLaw

init LRC_surf=0.0
dLRC_surf/dt=(1/(Vcyt))*(( 1.0 * re9) + (-1.0 * re10) + (-1.0 * re28))

# Species:   id = LRC_endo, name = LRC_endo, affected by kineticLaw

init LRC_endo=0.0
dLRC_endo/dt=(1/(Vcyt))*(( 1.0 * re10) + (-1.0 * re11) + (-1.0 * re12))

# Species:   id = Smad2c, name = Smad2c, affected by kineticLaw

init Smad2c=60.6
dSmad2c/dt=(1/(Vcyt))*((-1.0 * re14) + ( 1.0 * re15) + (-1.0 * re18))

# Species:   id = Smad2n, name = Smad2n, affected by kineticLaw

init Smad2n=28.5
dSmad2n/dt=(1/(Vnuc))*(( 1.0 * re14) + (-1.0 * re15) + ( 1.0 * re24))

# Species:   id = Smad4c, name = Smad4c, affected by kineticLaw

init Smad4c=50.8
dSmad4c/dt=(1/(Vcyt))*((-1.0 * re16) + ( 1.0 * re17) + (-1.0 * re21))

# Species:   id = Smad4n, name = Smad4n, affected by kineticLaw

init Smad4n=50.8
dSmad4n/dt=(1/(Vnuc))*(( 1.0 * re16) + (-1.0 * re17) + ( 1.0 * re23))

# Species:   id = PSmad2c, name = PSmad2c, affected by kineticLaw

init PSmad2c=0.0
dPSmad2c/dt=(1/(Vcyt))*(( 1.0 * re18) + (-1.0 * re19) + ( 1.0 * re20) + (-1.0 * re21) + (-2.0 * re25))

# Species:   id = PSmad2_PSmad2_c, name = PSmad2_PSmad2_c, affected by kineticLaw

par PSmad2_PS=0.0
aux PSmad2_PS=PSmad2_PS
dPSmad2_PS/dt=(1/(Vcyt))*(( 1.0 * re25) + (-1.0 * re26))

# Species:   id = PSmad2_Smad4_c, name = PSmad2_Smad4_c, affected by kineticLaw

par PSmad2_Sm=0.0
aux PSmad2_Sm=PSmad2_Sm
dPSmad2_Sm/dt=(1/(Vcyt))*(( 1.0 * re21) + (-1.0 * re22))

# Species:   id = PSmad2n, name = PSmad2n, affected by kineticLaw

init PSmad2n=0.0
dPSmad2n/dt=(1/(Vnuc))*(( 1.0 * re19) + (-1.0 * re20) + ( 1.0 * re23) + (-1.0 * re24) + ( 2.0 * re27))

# Species:   id = PSmad2_PSmad2_n, name = PSmad2_PSmad2_n, affected by kineticLaw

par PSmad2__1=0.0
aux PSmad2__1=PSmad2__1
dPSmad2__1/dt=(1/(Vnuc))*(( 1.0 * re26) + (-1.0 * re27))

# Species:   id = PSmad2_Smad4_n, name = PSmad2_Smad4_n, affected by kineticLaw

par PSmad2__2=0.0
aux PSmad2__2=PSmad2__2
dPSmad2__2/dt=(1/(Vnuc))*(( 1.0 * re22) + (-1.0 * re23))

# Species:   id = TGF_beta_endo, name = TGF_beta_endo, affected by kineticLaw

par TGF_bet_2=0.0
aux TGF_bet_2=TGF_bet_2
dTGF_bet_2/dt=(1/(Vcyt))*(( 1.0 * re12) + (-1.0 * re13))

# Species:   id = TGF_beta_ns, name = TGF_beta_ns, affected by kineticLaw

par TGF_bet_3=0.0
aux TGF_bet_3=TGF_bet_3
dTGF_bet_3/dt=(1/(Vmed))*(( 1.0 * re29))

# Species:   id = AA, name = AA, constant
par AA=0.0


# Species:   id = empty_degraded, name = empty_degraded, constant
par empty_deg=0.0


# event : single_pulse_TGF_beta_washout
# unable to handle events with delays currently.
# event ignored.


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

