
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Tyson2001_Cell_Cycle_Regulation
#
# is http://identifiers.org/biomodels.db/MODEL3897475441
# is http://identifiers.org/biomodels.db/BIOMD0000000195
# isDescribedBy http://identifiers.org/pubmed/11371178
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = GK, name = Goldbeter Koshland Function
GK(A1,A2,A3,A4)=(2*A4*A1/(A2-A1+A3*A2+A4*A1+((A2-A1+A3*A2+A4*A1)^2-4*(A2-A1)*A4*A1)^(0.5)))


# Compartment: id = cell, name = cell, constant
par cell=1.0

# Parameter:   id =  k1, name = k1, constant
par k1=0.04

# Parameter:   id =  k2p, name = k2p, constant
par k2p=0.04

# Parameter:   id =  k2pp, name = k2pp, constant
par k2pp=1.0

# Parameter:   id =  k2ppp, name = k2ppp, constant
par k2ppp=1.0

# Parameter:   id =  k3p, name = k3p, constant
par k3p=1.0

# Parameter:   id =  k3pp, name = k3pp, constant
par k3pp=10.0

# Parameter:   id =  J3, name = J3, constant
par J3=0.04

# Parameter:   id =  k4, name = k4, constant
par k4=35.0

# Parameter:   id =  k5p, name = k5p, constant
par k5p=0.005

# Parameter:   id =  k5pp, name = k5pp, constant
par k5pp=0.2

# Parameter:   id =  J5, name = J5, constant
par J5=0.3

# Parameter:   id =  k6, name = k6, constant
par k6=0.1

# Parameter:   id =  n, name = n, constant
par n=4.0

# Parameter:   id =  k7, name = k7, constant
par k7=1.0

# Parameter:   id =  J7, name = J7, constant
par J7=0.001

# Parameter:   id =  k8, name = k8, constant
par k8=0.5

# Parameter:   id =  J8, name = J8, constant
par J8=0.001

# Parameter:   id =  k9, name = k9, constant
par k9=0.1

# Parameter:   id =  k10, name = k10, constant
par k10=0.02

# Parameter:   id =  mu, name = mu, constant
par mu=0.005

# Parameter:   id =  k11, name = k11, constant
par k11=1.0

# Parameter:   id =  k12p, name = k12p, constant
par k12p=0.2

# Parameter:   id =  k12pp, name = k12pp, constant
par k12pp=50.0

# Parameter:   id =  mmax, name = mmax, constant
par mmax=10.0

# Parameter:   id =  k12ppp, name = k12ppp, constant
par k12ppp=100.0

# Parameter:   id =  Keq, name = Keq, constant
par Keq=1000.0

# Parameter:   id =  k13, name = k13, constant
par k13=1.0

# Parameter:   id =  k14, name = k14, constant
par k14=1.0

# Parameter:   id =  k15p, name = k15p, constant
par k15p=1.5

# Parameter:   id =  k15pp, name = k15pp, constant
par k15pp=0.05

# Parameter:   id =  k16p, name = k16p, constant
par k16p=1.0

# Parameter:   id =  k16pp, name = k16pp, constant
par k16pp=3.0

# Parameter:   id =  J15, name = J15, constant
par J15=0.01

# Parameter:   id =  J16, name = J16, constant
par J16=0.01

# Parameter:   id =  k4p, name = k4p, constant
par k4p=2.0

# Parameter:   id =  J4, name = J4, constant
par J4=0.04

# Parameter:   id =  TF, name = TF, defined by a Rule

# assignmentRule: variable = CycB
CycB=CycBt-2*CycBt*CKIt/(CycBt+CKIt+1/Keq+((CycBt+CKIt+1/Keq)^2-4*CycBt*CKIt)^(1/2))
aux CycB=CycB

# assignmentRule: variable = Trimer
Trimer=2*CycBt*CKIt/(CycBt+CKIt+1/Keq+((CycBt+CKIt+1/Keq)^2-4*CycBt*CKIt)^(1/2))
aux Trimer=Trimer

# assignmentRule: variable = TF
TF=GK(k15p*m+k15pp*SK, k16p+k16pp*m*CycB, J15, J16)
aux TF=TF

# assignmentRule: variable = Mad
Mad=1
aux Mad=Mad

# Reaction: id = CycBt_synthesis, name = CycBt synthesis

CycBt_syn=k1

# Reaction: id = CycBdegradation, name = CycBt degradation

CycBdegra=k2p*CycBt

# Reaction: id = CycBdegradationviaCdh1, name = CycBt degradation via Cdh1

CycBdeg_1=k2pp*Cdh1*CycBt

# Reaction: id = CycBtdegradationviaCdc20a, name = CycBt degradation via Cdc20a

CycBtdegr=k2ppp*Cdc20a*CycBt

# Reaction: id = Cdh1synthesis, name = Cdh1 synthesis

Cdh1synth=(k3p+k3pp*Cdc20a)*(1-Cdh1)/(J3+1-Cdh1)

# Reaction: id = Cdh1degradation, name = Cdh1 degradation

Cdh1degra=(k4p*SK*Cdh1+k4*m*CycB*Cdh1)/(J4+Cdh1)

# Reaction: id = Cdc20tsynthesis, name = Cdc20t synthesis

Cdc20tsyn=k5p+k5pp*(CycB*m/J5)^n/(1+(CycB*m/J5)^n)

# Reaction: id = Cdc20t_deg, name = Cdc20t degradation

Cdc20t_de=k6*Cdc20t

# Reaction: id = Cdc20activation, name = Cdc20 activation

Cdc20acti=k7*IEP*(Cdc20t-Cdc20a)/(J7+Cdc20t-Cdc20a)

# Reaction: id = Cdc20ainhibition, name = Cdc20a inhibition

Cdc20ainh=k8*Mad*Cdc20a/(J8+Cdc20a)

# Reaction: id = Cdc20adegradation, name = Cdc20a degradation

Cdc20adeg=k6*Cdc20a

# Reaction: id = IEPsynthesis, name = IEP synthesis

IEPsynthe=k9*m*CycB*(1-IEP)

# Reaction: id = IEPdegradation, name = IEP degradation

IEPdegrad=k10*IEP

# Reaction: id = growth, name = growth

growth=mu*m*(1-m/mmax)

# Reaction: id = CKItsynthesis, name = CKIt synthesis

CKItsynth=k11

# Reaction: id = CKIdegradation, name = CKIt degradation

CKIdegrad=k12p*CKIt

# Reaction: id = CKItphosphorilationviaSK, name = CKIt phosphorilation via SK

CKItphosp=k12pp*SK*CKIt

# Reaction: id = eq_7, name = CKIt Trimer sequestred

eq_7=k12ppp*m*CycB*CKIt

# Reaction: id = SKsynthesis, name = SK synthesis

SKsynthes=k13*TF

# Reaction: id = SKdegradation, name = SK degradation

SKdegrada=k14*SK

# Species:   id = CycBt, name = CycBt, affected by kineticLaw

init CycBt=0.001
dCycBt/dt=( 1.0 * CycBt_syn) + (-1.0 * CycBdegra) + (-1.0 * CycBdeg_1) + (-1.0 * CycBtdegr)

# Species:   id = CycB, name = CycB, defined in a rule 

# Species:   id = Cdc20a, name = Cdc20a, affected by kineticLaw

init Cdc20a=0.001
dCdc20a/dt=( 1.0 * Cdc20acti) + (-1.0 * Cdc20ainh) + (-1.0 * Cdc20adeg)

# Species:   id = Trimer, name = Trimer, defined in a rule 

# Species:   id = Cdh1, name = Cdh1, affected by kineticLaw

init Cdh1=0.001
dCdh1/dt=( 1.0 * Cdh1synth) + (-1.0 * Cdh1degra)

# Species:   id = m, name = m, affected by kineticLaw
# Species is changed by 1 event(s)
init m=0.5
dm/dt=( 1.0 * growth)

# Species:   id = Cdc20t, name = Cdc20t, affected by kineticLaw

init Cdc20t=0.001
dCdc20t/dt=( 1.0 * Cdc20tsyn) + (-1.0 * Cdc20t_de)

# Species:   id = IEP, name = IEP, affected by kineticLaw

init IEP=0.001
dIEP/dt=( 1.0 * IEPsynthe) + (-1.0 * IEPdegrad)

# Species:   id = Mad, name = Mad, defined in a rule 

# Species:   id = CKIt, name = CKIt, affected by kineticLaw

init CKIt=0.001
dCKIt/dt=( 1.0 * CKItsynth) + (-1.0 * CKIdegrad) + (-1.0 * CKItphosp) + (-1.0 * eq_7)

# Species:   id = SK, name = SK, affected by kineticLaw

init SK=0.001
dSK/dt=( 1.0 * SKsynthes) + (-1.0 * SKdegrada)

# event : event1
# unable to handle events with delays currently.
# event ignored.


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

