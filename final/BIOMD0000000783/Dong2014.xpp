
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Dong2014 - Mathematical modeling on helper t cells in a tumor immune system
#
# isDescribedBy http://identifiers.org/doi/10.3934/dcdsb.2014.19.55
# isDerivedFrom http://identifiers.org/pubmed/8186756
# is http://identifiers.org/biomodels.db/MODEL1908080001
# is http://identifiers.org/biomodels.db/BIOMD0000000783
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = Function_for_Tumor_Growth, name = Function_for_Tumor_Growth
Function_(alpha,x,beta)=(alpha*x*(1-beta*x))


# FunctionDefinition id = Function_for_Tumor_Killing_ECs, name = Function_for_Tumor_Killing_ECs
Functio_1(x,y)=(x*y)


# FunctionDefinition id = Function_for_EC_Stimulation_Tumor_Debris, name = Function_for_EC_Stimulation_Tumor_Debris
Functio_2(omega_1,x,y)=(omega_1*x*y)


# FunctionDefinition id = Function_for_EC_Activation_HTC, name = Function_for_EC_Activation_HTC
Functio_3(rho,y,z)=(rho*y*z)


# FunctionDefinition id = Function_for_HTC_Stimulation_Tumor_Antigens, name = Function_for_HTC_Stimulation_Tumor_Antigens
Functio_4(omega_2,x,z)=(omega_2*x*z)


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  alpha, name = alpha, constant
par alpha=1.636

# Parameter:   id =  beta, name = beta, constant
par beta=0.002

# Parameter:   id =  delta_1, name = delta_1, constant
par delta_1=0.3743

# Parameter:   id =  omega_1, name = omega_1, constant
par omega_1=0.04

# Parameter:   id =  sigma_2, name = sigma_2, constant
par sigma_2=0.38

# Parameter:   id =  delta_2, name = delta_2, constant
par delta_2=0.055

# Parameter:   id =  rho, name = rho, constant
par rho=0.01

# Parameter:   id =  omega_2, name = omega_2, constant
par omega_2=0.002

# Reaction: id = Tumor_Growth, name = Tumor_Growth

Tumor_Gro=compartme*Function_(alpha, x_Tumor_C, beta)

# Reaction: id = Tumor_Killing_ECs, name = Tumor_Killing_ECs

Tumor_Kil=compartme*Functio_1(x_Tumor_C, y_Effecto)

# Reaction: id = EC_Stimulation_Tumor_Debris, name = EC_Stimulation_Tumor_Debris

EC_Stimul=compartme*Functio_2(omega_1, x_Tumor_C, y_Effecto)

# Reaction: id = EC_Natural_Death, name = EC_Natural_Death

EC_Natura=compartme*delta_1*y_Effecto

# Reaction: id = EC_Activation_HTC, name = EC_Activation_HTC

EC_Activa=compartme*Functio_3(rho, y_Effecto, z_Helper_)

# Reaction: id = HTC_Production, name = HTC_Production

HTC_Produ=compartme*Constant_(sigma_2)

# Reaction: id = HTC_Stimulation_Tumor_Antigens, name = HTC_Stimulation_Tumor_Antigens

HTC_Stimu=compartme*Functio_4(omega_2, x_Tumor_C, z_Helper_)

# Reaction: id = HTC_Natural_Death, name = HTC_Natural_Death

HTC_Natur=compartme*delta_2*z_Helper_

# Species:   id = x_Tumor_Cells, name = x_Tumor_Cells, affected by kineticLaw

par x_Tumor_C=1.0
aux x_Tumor_C=x_Tumor_C
dx_Tumor_C/dt=(1/(compartme))*(( 1.0 * Tumor_Gro) + (-1.0 * Tumor_Kil))

# Species:   id = y_Effector_Cells, name = y_Effector_Cells, affected by kineticLaw

par y_Effecto=1.0
aux y_Effecto=y_Effecto
dy_Effecto/dt=(1/(compartme))*(( 1.0 * EC_Stimul) + (-1.0 * EC_Natura) + ( 1.0 * EC_Activa))

# Species:   id = z_Helper_T_Cells, name = z_Helper_T_Cells, affected by kineticLaw

par z_Helper_=1.0
aux z_Helper_=z_Helper_
dz_Helper_/dt=(1/(compartme))*(( 1.0 * HTC_Produ) + ( 1.0 * HTC_Stimu) + (-1.0 * HTC_Natur))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

