
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Almeida2019 - Transcription-based circadian mechanism controls the duration of molecular clock states in response to signaling inputs
#
# isDescribedBy http://identifiers.org/pubmed/31539528
# is http://identifiers.org/biomodels.db/MODEL1910290001
# is http://identifiers.org/biomodels.db/BIOMD0000000839
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = Function_for_v11_3, name = Function_for_v11.3
Function_(gamma_bp,BMAL1,PERCRY)=(gamma_bp*BMAL1*PERCRY)


# FunctionDefinition id = Function_for_v4_2, name = Function_for_v4.2
Functio_1(gamma_b_p,BMAL1,PERCRY)=(gamma_b_p*BMAL1*PERCRY)


# FunctionDefinition id = Function_for_v8_1, name = Function_for_v8.1
Functio_2(R_box)=(2*R_box)


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  V_R, name = V_R, constant
par V_R=44.4

# Parameter:   id =  k_R, name = k_R, constant
par k_R=3.54

# Parameter:   id =  k_R_r, name = k_R_r, constant
par k_R_r=80.1

# Parameter:   id =  V_E, name = V_E, constant
par V_E=30.3

# Parameter:   id =  k_E, name = k_E, constant
par k_E=214.0

# Parameter:   id =  k_E_r, name = k_E_r, constant
par k_E_r=1.24

# Parameter:   id =  V_D, name = V_D, constant
par V_D=202.0

# Parameter:   id =  k_D, name = k_D, constant
par k_D=5.32

# Parameter:   id =  k_D_r, name = k_D_r, constant
par k_D_r=94.7

# Parameter:   id =  gamma_ror, name = gamma_ror, constant
par gamma_ror=2.55

# Parameter:   id =  gamma_rev, name = gamma_rev, constant
par gamma_rev=0.241

# Parameter:   id =  gamma_p, name = gamma_p, constant
par gamma_p=0.844

# Parameter:   id =  gamma_c, name = gamma_c, constant
par gamma_c=2.34

# Parameter:   id =  gamma_db, name = gamma_db, constant
par gamma_db=0.156

# Parameter:   id =  gamma_E4, name = gamma_E4, constant
par gamma_E4=0.295

# Parameter:   id =  gamma_pc, name = gamma_pc, constant
par gamma_pc=0.191

# Parameter:   id =  gamma_cp, name = gamma_cp, constant
par gamma_cp=0.141

# Parameter:   id =  gamma_bp, name = gamma_bp, constant
par gamma_bp=2.58

# Parameter:   id =  E_box, name = E_box, defined by a Rule

# Parameter:   id =  R_box, name = R_box, defined by a Rule

# Parameter:   id =  D_box, name = D_box, defined by a Rule

# Parameter:   id =  ModelValue_6, name = Initial for V_D, constant
par ModelValu=202.0

# Parameter:   id =  ModelValue_3, name = Initial for V_E, constant
par ModelVa_1=30.3

# Parameter:   id =  ModelValue_0, name = Initial for V_R, constant
par ModelVa_2=44.4

# Parameter:   id =  ModelValue_8, name = Initial for k_D_r, constant
par ModelVa_3=94.7

# Parameter:   id =  ModelValue_4, name = Initial for k_E, constant
par ModelVa_4=214.0

# Parameter:   id =  ModelValue_5, name = Initial for k_E_r, constant
par ModelVa_5=1.24

# Parameter:   id =  ModelValue_1, name = Initial for k_R, constant
par ModelVa_6=3.54

# Parameter:   id =  ModelValue_2, name = Initial for k_R_r, constant
par ModelVa_7=80.1

# assignmentRule: variable = D_box
D_box=ModelValu*DBP/(DBP+k_D)*ModelVa_3/(ModelVa_3+E4BP4)
aux D_box=D_box

# assignmentRule: variable = E_box
E_box=ModelVa_1*BMAL1/(BMAL1+ModelVa_4+ModelVa_5*BMAL1*CRY)
aux E_box=E_box

# assignmentRule: variable = R_box
R_box=ModelVa_2*ROR/(ROR+ModelVa_6)*ModelVa_7^2/(ModelVa_7^2+REV^2)
aux R_box=R_box

# Reaction: id = v4_1, name = v4.1

v4_1=compartme*Constant_(R_box)

# Reaction: id = v4_2, name = v4.2

v4_2=compartme*Functio_1(gamma_bp, BMAL1, PERCRY)

# Reaction: id = v5_1, name = v5.1

v5_1=compartme*Constant_(E_box)

# Reaction: id = v5_2, name = v5.2

v5_2=compartme*Constant_(R_box)

# Reaction: id = v5_3, name = v5.3

v5_3=compartme*gamma_ror*ROR

# Reaction: id = v8_1, name = v8.1

v8_1=compartme*Functio_2(R_box)

# Reaction: id = v6_1, name = v6.1

v6_1=compartme*Functio_2(E_box)

# Reaction: id = v6_2, name = v6.2

v6_2=compartme*Constant_(D_box)

# Reaction: id = v6_3, name = v6.3

v6_3=compartme*gamma_rev*REV

# Reaction: id = v7_1, name = v7.1

v7_1=compartme*Constant_(E_box)

# Reaction: id = v7_2, name = v7.2

v7_2=compartme*gamma_db*DBP

# Reaction: id = v8_2, name = v8.2

v8_2=compartme*gamma_E4*E4BP4

# Reaction: id = v9_1, name = v9.1

v9_1=compartme*Constant_(E_box)

# Reaction: id = v9_3, name = v9.3

v9_3=compartme*gamma_pc*PER*CRY

# Reaction: id = v9_4, name = v9.4

v9_4=compartme*gamma_cp*PERCRY

# Reaction: id = v9_5, name = v9.5

v9_5=compartme*gamma_c*CRY

# Reaction: id = v10_1, name = v10.1

v10_1=compartme*Constant_(E_box)

# Reaction: id = v10_2, name = v10.2

v10_2=compartme*Constant_(D_box)

# Reaction: id = v10_5, name = v10.5

v10_5=compartme*gamma_p*PER

# Reaction: id = v11_3, name = v11.3

v11_3=compartme*Function_(gamma_bp, BMAL1, PERCRY)

# Species:   id = BMAL1, name = BMAL1, affected by kineticLaw

init BMAL1=1.0
dBMAL1/dt=(1/(compartme))*(( 1.0 * v4_1) + (-1.0 * v4_2))

# Species:   id = ROR, name = ROR, affected by kineticLaw

init ROR=1.0
dROR/dt=(1/(compartme))*(( 1.0 * v5_1) + ( 1.0 * v5_2) + (-1.0 * v5_3))

# Species:   id = REV, name = REV, affected by kineticLaw

init REV=110.0
dREV/dt=(1/(compartme))*(( 1.0 * v6_1) + ( 1.0 * v6_2) + (-1.0 * v6_3))

# Species:   id = DBP, name = DBP, affected by kineticLaw

init DBP=1.0
dDBP/dt=(1/(compartme))*(( 1.0 * v7_1) + (-1.0 * v7_2))

# Species:   id = E4BP4, name = E4BP4, affected by kineticLaw

init E4BP4=80.0
dE4BP4/dt=(1/(compartme))*(( 1.0 * v8_1) + (-1.0 * v8_2))

# Species:   id = CRY, name = CRY, affected by kineticLaw

init CRY=1.0
dCRY/dt=(1/(compartme))*(( 1.0 * v8_1) + ( 1.0 * v9_1) + (-1.0 * v9_3) + ( 1.0 * v9_4) + (-1.0 * v9_5))

# Species:   id = PER, name = PER, affected by kineticLaw

init PER=25.0
dPER/dt=(1/(compartme))*((-1.0 * v9_3) + ( 1.0 * v9_4) + ( 1.0 * v10_1) + ( 1.0 * v10_2) + (-1.0 * v10_5))

# Species:   id = PERCRY, name = PERCRY, affected by kineticLaw

init PERCRY=0.0
dPERCRY/dt=(1/(compartme))*(( 1.0 * v9_3) + (-1.0 * v9_4) + (-1.0 * v11_3))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

