
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Jiao2018 - Feedback regulation in a stem cell model with acute myeloid leukaemia
#
# isDescribedBy http://identifiers.org/pubmed/29745850
# is http://identifiers.org/biomodels.db/MODEL1912170002
# is http://identifiers.org/biomodels.db/BIOMD0000000898
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_LSC_Differentiation, name = Function_for_LSC_Differentiation
Function_(p_30,v_30,L)=((1-p_30)*v_30*L)


# FunctionDefinition id = Function_for_PC_Differentiation, name = Function_for_PC_Differentiation
Functio_1(p_2_D,v_2_D,A)=((1-p_2_D)*v_2_D*A)


# FunctionDefinition id = Function_for_HSC_Self_Renewal, name = Function_for_HSC_Self_Renewal
Functio_2(p_1_D,K_1,Z_1,v_1_D,S)=(p_1_D*(K_1-Z_1)*v_1_D*S)


# FunctionDefinition id = Function_for_HSC_Differentiation, name = Function_for_HSC_Differentiation
Functio_3(p_1_D,v_1_D,S)=((1-p_1_D)*v_1_D*S)


# FunctionDefinition id = Function_for_PC_Self_Renewal, name = Function_for_PC_Self_Renewal
Functio_4(p_2_D,K_2,Z_2,v_2_D,A)=(p_2_D*(K_2-Z_2)*v_2_D*A)


# FunctionDefinition id = Function_for_LSC_Self_Renewal, name = Function_for_LSC_Self_Renewal
Functio_5(p_30,K_2,Z_2,v_30,L)=(p_30*(K_2-Z_2)*v_30*L)


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  p_10, name = p_10, constant
par p_10=0.45

# Parameter:   id =  p_20, name = p_20, constant
par p_20=0.68

# Parameter:   id =  p_30, name = p_30, constant
par p_30=0.8

# Parameter:   id =  v_10, name = v_10, constant
par v_10=0.5

# Parameter:   id =  v_20, name = v_20, constant
par v_20=0.72

# Parameter:   id =  v_30, name = v_30, constant
par v_30=0.7

# Parameter:   id =  d_1, name = d_1, constant
par d_1=0.275

# Parameter:   id =  d_2, name = d_2, constant
par d_2=0.3

# Parameter:   id =  g_1, name = g_1, constant
par g_1=0.03

# Parameter:   id =  g_2, name = g_2, constant
par g_2=0.025

# Parameter:   id =  h_1, name = h_1, constant
par h_1=0.2

# Parameter:   id =  h_2, name = h_2, constant
par h_2=0.11

# Parameter:   id =  m, name = m, constant
par m=1.0

# Parameter:   id =  n, name = n, constant
par n=1.0

# Parameter:   id =  K_1, name = K_1, constant
par K_1=1.0

# Parameter:   id =  K_2, name = K_2, constant
par K_2=1.0

# Parameter:   id =  p_1_D, name = p_1_D, defined by a Rule

# Parameter:   id =  p_2_D, name = p_2_D, defined by a Rule

# Parameter:   id =  v_1_D, name = v_1_D, defined by a Rule

# Parameter:   id =  v_2_D, name = v_2_D, defined by a Rule

# Parameter:   id =  Z_1, name = Z_1, defined by a Rule

# Parameter:   id =  Z_2, name = Z_2, defined by a Rule

# assignmentRule: variable = v_2_D
v_2_D=v_20/(1+h_2*D_TDSC^n)
aux v_2_D=v_2_D

# assignmentRule: variable = v_1_D
v_1_D=v_10/(1+h_1*D_TDSC^n)
aux v_1_D=v_1_D

# assignmentRule: variable = Z_1
Z_1=S_HSC
aux Z_1=Z_1

# assignmentRule: variable = Z_2
Z_2=A_PC+L_LSC
aux Z_2=Z_2

# assignmentRule: variable = p_2_D
p_2_D=p_20/(1+g_2*D_TDSC^n)
aux p_2_D=p_2_D

# assignmentRule: variable = p_1_D
p_1_D=p_10/(1+g_1*D_TDSC^n)
aux p_1_D=p_1_D

# Reaction: id = HSC_Self_Renewal, name = HSC_Self_Renewal

HSC_Self_=compartme*Functio_2(p_1_D, K_1, Z_1, v_1_D, S_HSC)

# Reaction: id = HSC_Differentiation, name = HSC_Differentiation

HSC_Diffe=compartme*Functio_3(p_1_D, v_1_D, S_HSC)

# Reaction: id = PC_Self_Renewal, name = PC_Self_Renewal

PC_Self_R=compartme*Functio_4(p_2_D, K_2, Z_2, v_2_D, A_PC)

# Reaction: id = PC_Differentiation, name = PC_Differentiation

PC_Differ=compartme*Functio_1(p_2_D, v_2_D, A_PC)

# Reaction: id = TDC_Apoptosis, name = TDC_Apoptosis

TDC_Apopt=compartme*d_1*D_TDSC

# Reaction: id = LSC_Self_Renewal, name = LSC_Self_Renewal

LSC_Self_=compartme*Functio_5(p_30, K_2, Z_2, v_30, L_LSC)

# Reaction: id = LSC_Differentiation, name = LSC_Differentiation

LSC_Diffe=compartme*Function_(p_30, v_30, L_LSC)

# Reaction: id = TDL_Apoptosis, name = TDL_Apoptosis

TDL_Apopt=compartme*d_2*T_TDLC

# Species:   id = S_HSC, name = S_HSC, affected by kineticLaw

init S_HSC=10.0
dS_HSC/dt=(1/(compartme))*(( 1.0 * HSC_Self_) + (-1.0 * HSC_Diffe))

# Species:   id = A_PC, name = A_PC, affected by kineticLaw

init A_PC=0.0
dA_PC/dt=(1/(compartme))*(( 2.0 * HSC_Diffe) + ( 1.0 * PC_Self_R) + (-1.0 * PC_Differ))

# Species:   id = D_TDSC, name = D_TDSC, affected by kineticLaw

init D_TDSC=0.0
dD_TDSC/dt=(1/(compartme))*(( 2.0 * PC_Differ) + (-1.0 * TDC_Apopt))

# Species:   id = L_LSC, name = L_LSC, affected by kineticLaw

init L_LSC=10.0
dL_LSC/dt=(1/(compartme))*(( 1.0 * LSC_Self_) + (-1.0 * LSC_Diffe))

# Species:   id = T_TDLC, name = T_TDLC, affected by kineticLaw

init T_TDLC=0.0
dT_TDLC/dt=(1/(compartme))*(( 2.0 * LSC_Diffe) + (-1.0 * TDL_Apopt))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

