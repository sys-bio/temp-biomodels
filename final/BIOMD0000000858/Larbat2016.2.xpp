
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Larbat2016.2 - Modeling the diversion of primary carbon flux into secondary metabolism under variable nitrate and light or dark conditions (Light Dark Cycles)
#
# isDescribedBy http://identifiers.org/pubmed/27164436
# is http://identifiers.org/biomodels.db/MODEL1911130005
# is http://identifiers.org/biomodels.db/BIOMD0000000858
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = Henri_Michaelis_Menten__irreversible, name = Henri-Michaelis-Menten (irreversible)
Henri_Mic(substrate,Km,V)=(V*substrate/(Km+substrate))


# FunctionDefinition id = Function_for_Sucrose_Formation_TrioseP, name = Function_for_Sucrose_Formation_TrioseP
Function_(k4,EtrioseP,trioseP)=(k4*EtrioseP*trioseP)


# FunctionDefinition id = Function_for_Sucrose_Consumption_Ephe, name = Function_for_Sucrose_Consumption_Ephe
Functio_1(k9,sucr,Ephe,f_I_phe)=(k9*sucr*Ephe*f_I_phe)


# FunctionDefinition id = Function_for_Sucrose_Consumption_PCF, name = Function_for_Sucrose_Consumption_PCF
Functio_2(k5,sucr,f_act_pcf)=(k5*sucr*f_act_pcf)


# FunctionDefinition id = Function_for_Sucrose_Consumption_PCF_Lignin, name = Function_for_Sucrose_Consumption_PCF_Lignin
Functio_3(k14,k15,sucr)=((k14+k15)*sucr)


# FunctionDefinition id = Function_for_Sucrose_Formation_Starch, name = Function_for_Sucrose_Formation_Starch
Functio_4(k37,starch,Estarch)=(k37*starch*Estarch)


# FunctionDefinition id = Function_for_EtrioseP_Consumption_Sucrose, name = Function_for_EtrioseP_Consumption_Sucrose
Functio_5(k2,sucr,EtrioseP,k3)=(k2*sucr*EtrioseP/(k3+EtrioseP))


# FunctionDefinition id = Function_for_Next_Consumption, name = Function_for_Next_Consumption
Functio_6(g,k11,Next,Enitrate)=(g*k11*Next*Enitrate)


# FunctionDefinition id = Function_for_TrioseP_Formation, name = Function_for_TrioseP_Formation
Functio_7(k29,f_act_trioseP,ECO2)=(k29*f_act_trioseP*ECO2)


# FunctionDefinition id = Function_for_ECO2_Consumption, name = Function_for_ECO2_Consumption
Functio_8(k31,trioseP,ECO2,k32)=(k31*trioseP*ECO2/(k32+ECO2))


# FunctionDefinition id = Function_for_Ephe_Formation_Sucrose, name = Function_for_Ephe_Formation_Sucrose
Functio_9(k6,sucr,f_I_E_phe_outfl)=(k6*sucr*f_I_E_phe_outfl)


# FunctionDefinition id = Function_for_Enitrate_Consumption, name = Function_for_Enitrate_Consumption
Functi_10(k27,N,Enitrate,k28)=(k27*N*Enitrate/(k28+Enitrate))


# FunctionDefinition id = Function_for_Estarch_Consumption, name = Function_for_Estarch_Consumption
Functi_11(k35,sucr,Estarch,k36)=(k35*sucr*Estarch/(k36+Estarch))


# FunctionDefinition id = Function_for_N_Formation, name = Function_for_N_Formation
Functi_12(k11,Next,Enitrate)=(k11*Next*Enitrate)


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  k1, name = k1, constant
par k1=1.0

# Parameter:   id =  k2, name = k2, constant
par k2=1.0

# Parameter:   id =  k3, name = k3, constant
par k3=1.0E-5

# Parameter:   id =  k4, name = k4, constant
par k4=5.0

# Parameter:   id =  k5, name = k5, constant
par k5=5.5

# Parameter:   id =  k6, name = k6, constant
par k6=10.0

# Parameter:   id =  k7, name = k7, constant
par k7=9.8

# Parameter:   id =  k8, name = k8, constant
par k8=1.0E-6

# Parameter:   id =  k9, name = k9, constant
par k9=1.0

# Parameter:   id =  k10, name = k10, constant
par k10=10.0

# Parameter:   id =  k11, name = k11, constant
par k11=0.2

# Parameter:   id =  k12, name = k12, constant
par k12=15.0

# Parameter:   id =  k13, name = k13, constant
par k13=1.0

# Parameter:   id =  k14, name = k14, constant
par k14=0.2

# Parameter:   id =  k15, name = k15, constant
par k15=0.2

# Parameter:   id =  k26, name = k26, constant
par k26=0.5

# Parameter:   id =  k27, name = k27, constant
par k27=0.1

# Parameter:   id =  k28, name = k28, constant
par k28=1.0E-6

# Parameter:   id =  k29, name = k29, defined by a Rule

# Parameter:   id =  k30, name = k30, constant
par k30=0.0

# Parameter:   id =  k31, name = k31, constant
par k31=0.0

# Parameter:   id =  k32, name = k32, constant
par k32=1.0E-5

# Parameter:   id =  k33, name = k33, constant
par k33=1.0E-11

# Parameter:   id =  k34, name = k34, constant
par k34=9.8

# Parameter:   id =  k35, name = k35, constant
par k35=10.0

# Parameter:   id =  k36, name = k36, constant
par k36=1.0E-4

# Parameter:   id =  k37, name = k37, constant
par k37=0.1

# Parameter:   id =  k38, name = k38, constant
par k38=0.02

# Parameter:   id =  k39, name = k39, constant
par k39=1000.0

# Parameter:   id =  f_I_phe, name = f_I_phe, defined by a Rule

# Parameter:   id =  f_act_pcf, name = f_act_pcf, defined by a Rule

# Parameter:   id =  f_I_E_phe_outfl, name = f_I_E_phe_outfl, defined by a Rule

# Parameter:   id =  f_act_trioseP, name = f_act_trioseP, defined by a Rule

# Parameter:   id =  g, name = g, constant
par g=1.0

# Parameter:   id =  Light_Dark_Tracker, name = Light_Dark_Tracker, defined by a Rule

# assignmentRule: variable = Light_Dark_Tracker
# the operator xor is not supported by xpp
# the formula is : piecewise(time-24*ceil(time/24),  xor (time < 0, 24 < 0), time-24*floor(time/24))-12
# the operator floor is not supported by xpp
# the formula is : piecewise(time-24*ceil(time/24),  xor (time < 0, 24 < 0), time-24*floor(time/24))-12
#Rule ignored : there are some unsupported functions !!

# assignmentRule: variable = k29
k29= piecew1 
aux k29=k29

# assignmentRule: variable = f_I_phe
f_I_phe=k38/(k38+N)
aux f_I_phe=f_I_phe

# assignmentRule: variable = f_I_E_phe_outfl
f_I_E_phe=k39/(k39+N)
aux f_I_E_phe=f_I_E_phe

# assignmentRule: variable = f_act_pcf
f_act_pcf=N/(k13+N)
aux f_act_pcf=f_act_pcf

# assignmentRule: variable = f_act_trioseP
f_act_tri=N/(k33+N)
aux f_act_tri=f_act_tri

# Reaction: id = Sucrose_Formation_TrioseP, name = Sucrose_Formation_TrioseP

Sucrose_F=compartme*Function_(k4, EtrioseP, trioseP)

# Reaction: id = Sucrose_Consumption_Ephe, name = Sucrose_Consumption_Ephe

Sucrose_C=compartme*Functio_1(k9, sucr, Ephe, f_I_phe)

# Reaction: id = Sucrose_Consumption_PCF, name = Sucrose_Consumption_PCF

Sucrose_1=compartme*Functio_2(k5, sucr, f_act_pcf)

# Reaction: id = Sucrose_Consumption_PCF_Lignin, name = Sucrose_Consumption_PCF_Lignin

Sucrose_2=compartme*Functio_3(k14, k15, sucr)

# Reaction: id = Sucrose_Formation_Starch, name = Sucrose_Formation_Starch

Sucrose_3=compartme*Functio_4(k37, starch, Estarch)

# Reaction: id = EtrioseP_Formation_Constant, name = EtrioseP_Formation_Constant

EtrioseP_=compartme*Constant_(k1)

# Reaction: id = EtrioseP_Consumption_Sucrose, name = EtrioseP_Consumption_Sucrose

Etriose_1=compartme*Functio_5(k2, sucr, EtrioseP, k3)

# Reaction: id = Ephe_Formation_Sucrose, name = Ephe_Formation_Sucrose

Ephe_Form=compartme*Functio_9(k6, sucr, f_I_E_phe)

# Reaction: id = Ephe_Consumption, name = Ephe_Consumption

Ephe_Cons=compartme*Henri_Mic(Ephe, k8, k7)

# Reaction: id = N_Formation, name = N_Formation

N_Formati=compartme*Functi_12(k11, Next, Enitrate)

# Reaction: id = N_Consumption, name = N_Consumption

N_Consump=compartme*k12*N

# Reaction: id = Next_Consumption, name = Next_Consumption

Next_Cons=compartme*Functio_6(g, k11, Next, Enitrate)

# Reaction: id = Starch_Formation, name = Starch_Formation

Starch_Fo=compartme*k10*trioseP

# Reaction: id = Enitrate_Formation, name = Enitrate_Formation

Enitrate_=compartme*Constant_(k26)

# Reaction: id = Enitrate_Consumption, name = Enitrate_Consumption

Enitrat_1=compartme*Functi_10(k27, N, Enitrate, k28)

# Reaction: id = TrioseP_Formation, name = TrioseP_Formation

TrioseP_F=compartme*Functio_7(k29, f_act_tri, ECO2)

# Reaction: id = ECO2_Formation, name = ECO2_Formation

ECO2_Form=compartme*Constant_(k30)

# Reaction: id = ECO2_Consumption, name = ECO2_Consumption

ECO2_Cons=compartme*Functio_8(k31, trioseP, ECO2, k32)

# Reaction: id = Estarch_Formation, name = Estarch_Formation

Estarch_F=compartme*Constant_(k34)

# Reaction: id = Estarch_Consumption, name = Estarch_Consumption

Estarch_C=compartme*Functi_11(k35, sucr, Estarch, k36)

# Species:   id = sucr, name = sucr, affected by kineticLaw

init sucr=0.748
dsucr/dt=(1/(compartme))*(( 1.0 * Sucrose_F) + (-1.0 * Sucrose_C) + (-1.0 * Sucrose_1) + (-1.0 * Sucrose_2) + ( 1.0 * Sucrose_3))

# Species:   id = EtrioseP, name = EtrioseP, affected by kineticLaw

init EtrioseP=2.825
dEtrioseP/dt=(1/(compartme))*(( 1.0 * EtrioseP_) + (-1.0 * Etriose_1))

# Species:   id = Ephe, name = Ephe, affected by kineticLaw

init Ephe=9.751E-7
dEphe/dt=(1/(compartme))*(( 1.0 * Ephe_Form) + (-1.0 * Ephe_Cons))

# Species:   id = N, name = N, affected by kineticLaw

init N=4.998
dN/dt=(1/(compartme))*(( 1.0 * N_Formati) + (-1.0 * N_Consump))

# Species:   id = starch, name = starch, affected by kineticLaw

init starch=6.041
dstarch/dt=(1/(compartme))*((-1.0 * Sucrose_3) + ( 1.0 * Starch_Fo))

# Species:   id = Next, name = Next, constant
par Next=20.0


# Species:   id = Enitrate, name = Enitrate, affected by kineticLaw

init Enitrate=18.742
dEnitrate/dt=(1/(compartme))*(( 1.0 * Enitrate_) + (-1.0 * Enitrat_1))

# Species:   id = trioseP, name = trioseP, affected by kineticLaw

init trioseP=0.0
dtrioseP/dt=(1/(compartme))*((-1.0 * Sucrose_F) + (-1.0 * Starch_Fo) + ( 1.0 * TrioseP_F))

# Species:   id = ECO2, name = ECO2, constant
par ECO2=1.0


# Species:   id = Estarch, name = Estarch, affected by kineticLaw

init Estarch=5.95
dEstarch/dt=(1/(compartme))*(( 1.0 * Estarch_F) + (-1.0 * Estarch_C))


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if (Light_Dar  <  0) then (10.1) else (0)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

