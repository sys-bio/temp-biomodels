
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Fran?ois2005 - Mixed Feedback Loop (two-gene network)
#
# is http://identifiers.org/biomodels.db/MODEL1408130000
# is http://identifiers.org/biomodels.db/BIOMD0000000539
# isDescribedBy http://identifiers.org/pubmed/16241483
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = transcription_and_translation, name = transcription and translation
transcrip(k,X)=(k*X)


# Compartment: id = cell, name = cell, constant
par cell=1.0

# Parameter:   id =  theta, name = theta, constant
par theta=0.04

# Parameter:   id =  alpha, name = alpha, constant
par alpha=0.001

# Parameter:   id =  rhob, name = rhob, constant
par rhob=5.0

# Parameter:   id =  rhof, name = rhof, constant
par rhof=0.1

# Parameter:   id =  deltar, name = deltar, constant
par deltar=0.03

# Parameter:   id =  rhoA, name = rhoA, constant
par rhoA=100.0

# Parameter:   id =  gamma, name = gamma, constant
par gamma=1.0

# Parameter:   id =  deltaA, name = deltaA, constant
par deltaA=0.01

# Parameter:   id =  deltaB, name = deltaB, constant
par deltaB=0.01

# Parameter:   id =  beta, name = beta, constant
par beta=3.0

# Parameter:   id =  deltaAB, name = deltaAB, constant
par deltaAB=0.01

# Reaction: id = A_binds_gB, name = A binds gB

A_binds_g=cell*alpha*A*gB

# Reaction: id = gB_releases_A, name = gB releases A

gB_releas=cell*theta*AgB

# Reaction: id = basal_transcription_B, name = basal transcription B

basal_tra=cell*transcrip(rhof, gB)

# Reaction: id = stim_transcription_B, name = stim transcription B

stim_tran=cell*transcrip(rhob, AgB)

# Reaction: id = degradation_mRNA_B, name = degradation mRNA B

degradati=cell*deltar*rB

# Reaction: id = production_A, name = production A

productio=cell*Constant_(rhoA)

# Reaction: id = degradation_A, name = degradation A

degrada_1=cell*deltaA*A

# Reaction: id = translation_B, name = translation B

translati=cell*transcrip(beta, rB)

# Reaction: id = degradation_B, name = degradation B

degrada_2=cell*deltaB*B

# Reaction: id = formation_dimer, name = formation dimer

formation=cell*gamma*A*B

# Reaction: id = degradation_dimer, name = degradation dimer

degrada_3=cell*deltaAB*AB

# Species:   id = A, name = A, affected by kineticLaw

init A=40.0
dA/dt=(1/(cell))*((-1.0 * A_binds_g) + ( 1.0 * gB_releas) + ( 1.0 * productio) + (-1.0 * degrada_1) + (-1.0 * formation))

# Species:   id = AgB, name = AgB, affected by kineticLaw

init AgB=0.0
dAgB/dt=(1/(cell))*(( 1.0 * A_binds_g) + (-1.0 * gB_releas))

# Species:   id = gB, name = gB, affected by kineticLaw

init gB=1.0
dgB/dt=(1/(cell))*((-1.0 * A_binds_g) + ( 1.0 * gB_releas))

# Species:   id = rB, name = rB, affected by kineticLaw

init rB=0.0
drB/dt=(1/(cell))*(( 1.0 * basal_tra) + ( 1.0 * stim_tran) + (-1.0 * degradati))

# Species:   id = B, name = B, affected by kineticLaw

init B=0.0
dB/dt=(1/(cell))*(( 1.0 * translati) + (-1.0 * degrada_2) + (-1.0 * formation))

# Species:   id = AB, name = AB, affected by kineticLaw

init AB=0.0
dAB/dt=(1/(cell))*(( 1.0 * formation) + (-1.0 * degrada_3))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

