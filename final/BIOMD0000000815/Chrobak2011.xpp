
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Chrobak2011 - A mathematical model of induced cancer-adaptive immune system competition
#
# isDescribedBy http://identifiers.org/doi/10.1142/S0218339011004111
# is http://identifiers.org/biomodels.db/MODEL1909170003
# is http://identifiers.org/biomodels.db/BIOMD0000000815
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_Immune_Growth, name = Function_for_Immune_Growth
Function_(d,y)=(d*y)


# FunctionDefinition id = Function_for_Tumor_Growth, name = Function_for_Tumor_Growth
Functio_1(a,x)=(a*x)


# FunctionDefinition id = Function_for_Tumor_Killing, name = Function_for_Tumor_Killing
Functio_2(b,x,y)=(b*x*y)


# FunctionDefinition id = Function_for_Immune_Loss_Tumor, name = Function_for_Immune_Loss_Tumor
Functio_3(e,x,y)=(e*x*y)


# FunctionDefinition id = Function_for_Tumor_Competition, name = Function_for_Tumor_Competition
Functio_4(c,x)=(c*x^2)


# FunctionDefinition id = Function_for_Immune_Growth_Control, name = Function_for_Immune_Growth_Control
Functio_5(f,y)=(f*y^2)


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  a, name = a, defined by a Rule

# Parameter:   id =  b, name = b, defined by a Rule

# Parameter:   id =  c, name = c, defined by a Rule

# Parameter:   id =  d, name = d, defined by a Rule

# Parameter:   id =  e, name = e, defined by a Rule

# Parameter:   id =  f, name = f, defined by a Rule

# assignmentRule: variable = d
d=1/32
aux d=d

# assignmentRule: variable = e
e=275/3200
aux e=e

# assignmentRule: variable = f
f=1/32
aux f=f

# assignmentRule: variable = a
a=1/16
aux a=a

# assignmentRule: variable = b
b=1/8
aux b=b

# assignmentRule: variable = c
c=1/32
aux c=c

# Reaction: id = Tumor_Growth, name = Tumor_Growth

Tumor_Gro=compartme*Functio_1(a, x_Cancer)

# Reaction: id = Tumor_Killing, name = Tumor_Killing

Tumor_Kil=compartme*Functio_2(b, x_Cancer, y_Immune_)

# Reaction: id = Tumor_Competition, name = Tumor_Competition

Tumor_Com=compartme*Functio_4(c, x_Cancer)

# Reaction: id = Immune_Growth, name = Immune_Growth

Immune_Gr=compartme*Function_(d, y_Immune_)

# Reaction: id = Immune_Loss_Tumor, name = Immune_Loss_Tumor

Immune_Lo=compartme*Functio_3(e, x_Cancer, y_Immune_)

# Reaction: id = Immune_Growth_Control, name = Immune_Growth_Control

Immune__1=compartme*Functio_5(f, y_Immune_)

# Species:   id = x_Cancer, name = x_Cancer, affected by kineticLaw

init x_Cancer=5.0E-4
dx_Cancer/dt=(1/(compartme))*(( 1.0 * Tumor_Gro) + (-1.0 * Tumor_Kil) + (-1.0 * Tumor_Com))

# Species:   id = y_Immune_System, name = y_Immune_System, affected by kineticLaw

par y_Immune_=0.01
aux y_Immune_=y_Immune_
dy_Immune_/dt=(1/(compartme))*(( 1.0 * Immune_Gr) + (-1.0 * Immune_Lo) + (-1.0 * Immune__1))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

