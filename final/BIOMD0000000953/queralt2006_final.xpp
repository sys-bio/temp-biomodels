
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Queralt2006 - Initiation of mitotic exit by downregulation of PP2A in budding yeast
#
# unknownQualifier http://identifiers.org/mamo/MAMO_0000046
# is http://identifiers.org/biomodels.db/MODEL1809060004
# is http://identifiers.org/biomodels.db/BIOMD0000000953
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = Function_fro_Clb2_degradation, name = Function fro Clb2 degradation
Function_(k,k_p,modifier,k_pp,modifier2,substrate)=((k+k_p*modifier+k_pp*modifier2)*substrate)


# FunctionDefinition id = Function_for_Cdc20_degradation, name = Function for Cdc20 degradation
Functio_1(k,k_p,modifier,substrate)=((k+k_p*modifier)*substrate)


# FunctionDefinition id = Function_for_cdh1_d, name = Function for cdh1 d
Functio_2(k,k_p,Cdc14,J_cdh,Cdh1_total,Cdh1)=((k+k_p*Cdc14)*(Cdh1_total-Cdh1)/(J_cdh+Cdh1_total-Cdh1))


# FunctionDefinition id = Function_for_Cdh1_p, name = Function for Cdh1 p
Functio_3(k,modifier,substrate,J_cdh)=(k*modifier*substrate/(J_cdh+substrate))


# FunctionDefinition id = Function_for_securin_separase_de, name = Function for securin_separase de
Functio_4(ld,k_d,k_dp,k_dpp,modifier,substrate)=((ld+k_d+k_dp+k_dpp*modifier)*substrate)


# FunctionDefinition id = function_for_Net1_dephosphorylation, name = function for Net1 dephosphorylation
functio_5(kd_p,Cdc14,kd,PP2A,Net1P,J_net)=((kd_p*Cdc14+kd*PP2A)*Net1P/(J_net+Net1P))


# FunctionDefinition id = Function_for_Net1_d, name = Function for Net1 d
Functio_6(J_net,k_p,Cdk,kp_p,MEN,Net1,Net1_Cdc14)=((k_p*Cdk+kp_p*MEN)*Net1/(J_net+Net1+Net1_Cdc14))


# FunctionDefinition id = Function_for_Net1_Cdc14_d, name = Function for Net1_Cdc14 d
Functio_7(k_p,Cdk,kp_p,MEN,Net1,J_net,Net1_Cdc14)=((k_p*Cdk+kp_p*MEN)*Net1_Cdc14/(J_net+Net1+Net1_Cdc14))


# FunctionDefinition id = Function_for_Polo_total_degradation, name = Function for Polo_total degradation
Functio_8(k,k_p,Cdh1,Polo_total)=((k+k_p*Cdh1)*Polo_total)


# FunctionDefinition id = function_for_Polo_inactivation, name = function for Polo inactivation
functio_9(ki,Polo,J_polo)=(ki*Polo/(J_polo+Polo))


# FunctionDefinition id = function_for_Tem1_inactivation, name = function for Tem1 inactivation
functi_10(k,k_p,PP2A,Tem1,J_tem1)=((k+k_p*PP2A)*Tem1/(J_tem1+Tem1))


# FunctionDefinition id = Function_for_MEN_a, name = Function for MEN a
Functi_11(Tem1,Ia,MEN,Cdc15)=(Ia*(Tem1-MEN)*(Cdc15-MEN))


# FunctionDefinition id = Function_for_MEN_d, name = Function for MEN d
Functi_12(MEN,ld)=(ld*MEN)


# FunctionDefinition id = Function_for_MEN_i, name = Function for MEN i
Functi_13(k_i,k_ip,PP2A,MEN,J_tem1,Tem1)=((k_i+k_ip*PP2A)*MEN/(J_tem1+Tem1))


# FunctionDefinition id = Function_for_R11, name = Function for R11
Functi_14(la_securin,securin,separase)=(la_securin*securin*separase)


# Compartment: id = nucleus, name = nucleus, constant
par nucleus=1.0

# Parameter:   id =  ks_clb2, name = ks_clb2, constant
par ks_clb2=0.03

# Parameter:   id =  kd_clb2, name = kd_clb2, constant
par kd_clb2=0.03

# Parameter:   id =  kd_clb2_p, name = kd_clb2_p, constant
par kd_clb2_p=0.2

# Parameter:   id =  kd_clb2_pp, name = kd_clb2_pp, constant
par kd_clb2_1=2.0

# Parameter:   id =  ks_cdc20, name = ks_cdc20, constant
par ks_cdc20=0.015

# Parameter:   id =  kd_cdc20, name = kd_cdc20, constant
par kd_cdc20=0.05

# Parameter:   id =  kd_cdc20_p, name = kd_cdc20_p, constant
par kd_cdc20_=2.0

# Parameter:   id =  kd_cdh, name = kd_cdh, constant
par kd_cdh=0.01

# Parameter:   id =  kd_cdh_p, name = kd_cdh_p, constant
par kd_cdh_p=1.0

# Parameter:   id =  kp_cdh_p, name = kp_cdh_p, constant
par kp_cdh_p=1.0

# Parameter:   id =  J_cdh, name = J_cdh, constant
par J_cdh=0.0015

# Parameter:   id =  ks_securin, name = ks_securin, constant
par ks_securi=0.03

# Parameter:   id =  kd_securin, name = kd_securin, constant
par kd_securi=0.05

# Parameter:   id =  kd_securin_p, name = kd_securin_p, constant
par kd_secu_1=2.0

# Parameter:   id =  ks_separase, name = ks_separase, constant
par ks_separa=0.001

# Parameter:   id =  kd_separase, name = kd_separase, constant
par kd_separa=0.004

# Parameter:   id =  la_securin, name = la_securin, constant
par la_securi=500.0

# Parameter:   id =  ld_securin, name = ld_securin, constant
par ld_securi=1.0

# Parameter:   id =  kd_p, name = kd_p, constant
par kd_p=0.1

# Parameter:   id =  kd, name = kd, constant
par kd=0.45

# Parameter:   id =  kp, name = kp, constant
par kp=0.4

# Parameter:   id =  kp_p, name = kp_p, constant
par kp_p=2.0

# Parameter:   id =  Jnet, name = Jnet, constant
par Jnet=0.2

# Parameter:   id =  l_a_net, name = l_a_net, constant
par l_a_net=500.0

# Parameter:   id =  l_d_net, name = l_d_net, constant
par l_d_net=1.0

# Parameter:   id =  ks_polo, name = ks_polo, constant
par ks_polo=0.01

# Parameter:   id =  kd_polo, name = kd_polo, constant
par kd_polo=0.01

# Parameter:   id =  kd_polo_p, name = kd_polo_p, constant
par kd_polo_p=0.25

# Parameter:   id =  ka_polo, name = ka_polo, constant
par ka_polo=0.0

# Parameter:   id =  ka_polo_p, name = ka_polo_p, constant
par ka_polo_p=0.5

# Parameter:   id =  ki_polo, name = ki_polo, constant
par ki_polo=0.1

# Parameter:   id =  J_polo, name = J_polo, constant
par J_polo=0.25

# Parameter:   id =  ka_tem, name = ka_tem, constant
par ka_tem=0.0

# Parameter:   id =  ka_tem_p, name = ka_tem_p, constant
par ka_tem_p=0.5

# Parameter:   id =  ki_tem, name = ki_tem, constant
par ki_tem=0.1

# Parameter:   id =  kitem_p, name = kitem_p, constant
par kitem_p=1.0

# Parameter:   id =  J_tem1, name = J_tem1, constant
par J_tem1=0.005

# Parameter:   id =  ka_cdc15, name = ka_cdc15, constant
par ka_cdc15=0.02

# Parameter:   id =  ka_cdc15_p, name = ka_cdc15_p, constant
par ka_cdc15_=0.5

# Parameter:   id =  ki_cdc15, name = ki_cdc15, constant
par ki_cdc15=0.0

# Parameter:   id =  ki_cdc15_p, name = ki_cdc15_p, constant
par ki_cdc15_=0.2

# Parameter:   id =  J_cdc15, name = J_cdc15, constant
par J_cdc15=0.2

# Parameter:   id =  la_men, name = la_men, constant
par la_men=10.0

# Parameter:   id =  ld_men, name = ld_men, constant
par ld_men=0.01

# Parameter:   id =  kpp, name = kpp, constant
par kpp=0.1

# Parameter:   id =  ki, name = ki, constant
par ki=20.0

# assignmentRule: variable = net1p
net1p=net1_tota-net1-net1cdc14
aux net1p=net1p

# assignmentRule: variable = cdc14
cdc14=cdc14_tot-net1cdc14
aux cdc14=cdc14

# assignmentRule: variable = cdk
cdk=clb2/(1+Inh)
aux cdk=cdk

# assignmentRule: variable = securin
securin=securin_t-securin_s
aux securin=securin

# assignmentRule: variable = separase
separase=separase_-securin_s
aux separase=separase

# assignmentRule: variable = pp2a
pp2a=(1+kpp*ki*separase)/(1+ki*separase)*pp2a_tota
aux pp2a=pp2a

# assignmentRule: variable = Cdc14x2
Cdc14x2=cdc14*2
aux Cdc14x2=Cdc14x2

# Reaction: id = R1_Clb2_synthesis, name = R1 Clb2 synthesis

R1_Clb2_s=nucleus*Constant_(ks_clb2)

# Reaction: id = R2_Clb2_degradation, name = R2 Clb2 degradation

R2_Clb2_d=nucleus*Function_(kd_clb2, kd_clb2_p, cdc20, kd_clb2_1, cdh1, clb2)

# Reaction: id = R3_Cdc20_synthesis, name = R3 Cdc20 synthesis

R3_Cdc20_=nucleus*Constant_(ks_cdc20)

# Reaction: id = R4_Cdc20_degradation, name = R4 Cdc20 degradation

R4_Cdc20_=nucleus*Functio_1(kd_cdc20, kd_cdc20_, cdh1, cdc20)

# Reaction: id = R5_Cdh1_activation, name = R5 Cdh1 activation

R5_Cdh1_a=nucleus*Functio_2(kd_cdh, kd_cdh_p, cdc14, J_cdh, cdh1_tota, cdh1)

# Reaction: id = R6_Cdh1_inactivation, name = R6 Cdh1 inactivation

R6_Cdh1_i=nucleus*Functio_3(kp_cdh_p, cdk, cdh1, J_cdh)

# Reaction: id = R7_Securin_synthesis, name = R7 Securin synthesis

R7_Securi=nucleus*Constant_(ks_securi)

# Reaction: id = R8_Securin_degradation, name = R8 Securin degradation

R8_Securi=nucleus*Functio_1(kd_securi, kd_secu_1, cdc20, securin_t)

# Reaction: id = R9_Separase_synthesis, name = R9 Separase synthesis

R9_Separa=nucleus*Constant_(ks_separa)

# Reaction: id = R10_Separase_degradation, name = R10 Separase degradation

R10_Separ=nucleus*kd_separa*separase_

# Reaction: id = R11_Securin_separase_association, name = R11 Securin separase association

R11_Secur=nucleus*Functi_14(la_securi, securin, separase)

# Reaction: id = R12_Securin_separase_dissociation, name = R12 Securin separase dissociation

R12_Secur=nucleus*Functio_4(ld_securi, kd_separa, kd_securi, kd_secu_1, cdc20, securin_s)

# Reaction: id = R13_Net1_dephosphorylation, name = R13 Net1 dephosphorylation

R13_Net1_=nucleus*functio_5(kd_p, cdc14, kd, pp2a, net1p, Jnet)

# Reaction: id = R14_Net1_phosphorylation, name = R14 Net1 phosphorylation

R14_Net1_=nucleus*Functio_6(Jnet, kp, cdk, kp_p, men, net1, net1cdc14)

# Reaction: id = R15_Net1_Cdc14_association, name = R15 Net1 Cdc14 association

R15_Net1_=nucleus*(l_a_net*net1*cdc14-l_d_net*net1cdc14)

# Reaction: id = R16_Net1_Cdc14_dissociation, name = R16 Net1 Cdc14 dissociation

R16_Net1_=nucleus*Functio_7(kp, cdk, kp_p, men, net1, Jnet, net1cdc14)

# Reaction: id = R17_Polo_synthesis, name = R17 Polo synthesis

R17_Polo_=nucleus*Constant_(ks_polo)

# Reaction: id = R18_Polo_degradation, name = R18 Polo degradation

R18_Polo_=nucleus*Functio_8(kd_polo, kd_polo_p, cdh1, polo_tota)

# Reaction: id = R19_Polo_activation, name = R19 Polo activation

R19_Polo_=nucleus*Functio_2(ka_polo, ka_polo_p, cdk, J_polo, polo_tota, polo)

# Reaction: id = R20_Polo_inactivation, name = R20 Polo inactivation

R20_Polo_=nucleus*functio_9(ki_polo, polo, J_polo)

# Reaction: id = R21_Polo_inactivation, name = R21 Polo inactivation

R21_Polo_=nucleus*Functio_1(kd_polo, kd_polo_p, cdh1, polo)

# Reaction: id = R22_Tem1_activation, name = R22 Tem1 activation

R22_Tem1_=nucleus*Functio_2(ka_tem, ka_tem_p, polo, J_tem1, tem1_tota, tem1)

# Reaction: id = R23_Tem1_inactivation, name = R23 Tem1 inactivation

R23_Tem1_=nucleus*functi_10(ki_tem, kitem_p, pp2a, tem1, J_tem1)

# Reaction: id = R24_Cdc15_activation, name = R24 Cdc15 activation

R24_Cdc15=nucleus*Functio_2(ka_cdc15, ka_cdc15_, cdc14, J_cdc15, cdc15_tot, cdc15)

# Reaction: id = R25_Cdc15_inactivation, name = R25 Cdc15 inactivation

R25_Cdc15=nucleus*functi_10(ki_cdc15, ki_cdc15_, cdk, cdc15, J_cdc15)

# Reaction: id = R26_MEN_activation, name = R26 MEN activation

R26_MEN_a=nucleus*Functi_11(tem1, la_men, men, cdc15)

# Reaction: id = R27_MEN, name = R27 MEN

R27_MEN=nucleus*Functi_12(men, ld_men)

# Reaction: id = R28_MEN_inactivation, name = R28 MEN inactivation

R28_MEN_i=nucleus*Functi_13(ki_tem, kitem_p, pp2a, men, J_tem1, tem1)

# Reaction: id = R29_MEN_inactivation, name = R29 MEN inactivation

R29_MEN_i=nucleus*Functi_13(ki_cdc15, ki_cdc15_, cdk, men, J_cdc15, cdc15)

# Species:   id = clb2, name = clb2, affected by kineticLaw

init clb2=0.997
dclb2/dt=(1/(nucleus))*(( 1.0 * R1_Clb2_s) + (-1.0 * R2_Clb2_d))

# Species:   id = cdc20, name = cdc20, affected by kineticLaw

init cdc20=0.0
dcdc20/dt=(1/(nucleus))*(( 1.0 * R3_Cdc20_) + (-1.0 * R4_Cdc20_))

# Species:   id = cdh1, name = cdh1, affected by kineticLaw

init cdh1=0.0
dcdh1/dt=(1/(nucleus))*(( 1.0 * R5_Cdh1_a) + (-1.0 * R6_Cdh1_i))

# Species:   id = securin_total, name = securin_total, affected by kineticLaw

par securin_t=0.6
aux securin_t=securin_t
dsecurin_t/dt=(1/(nucleus))*(( 1.0 * R7_Securi) + (-1.0 * R8_Securi))

# Species:   id = separase_total, name = separase_total, affected by kineticLaw

par separase_=0.25
aux separase_=separase_
dseparase_/dt=(1/(nucleus))*(( 1.0 * R9_Separa) + (-1.0 * R10_Separ))

# Species:   id = securin_separase, name = securin_separase, affected by kineticLaw

par securin_s=0.248
aux securin_s=securin_s
dsecurin_s/dt=(1/(nucleus))*(( 1.0 * R11_Secur) + (-1.0 * R12_Secur))

# Species:   id = net1, name = net1, affected by kineticLaw

init net1=0.098
dnet1/dt=(1/(nucleus))*(( 1.0 * R13_Net1_) + (-1.0 * R14_Net1_) + (-1.0 * R15_Net1_))

# Species:   id = net1p, name = net1p, involved in a rule 

# Species:   id = cdc14, name = cdc14, involved in a rule 

# Species:   id = net1cdc14, name = net1cdc14, affected by kineticLaw

init net1cdc14=0.485
dnet1cdc14/dt=(1/(nucleus))*(( 1.0 * R15_Net1_) + (-1.0 * R16_Net1_))

# Species:   id = polo_total, name = polo_total, affected by kineticLaw

par polo_tota=0.99
aux polo_tota=polo_tota
dpolo_tota/dt=(1/(nucleus))*(( 1.0 * R17_Polo_) + (-1.0 * R18_Polo_))

# Species:   id = cdk, name = cdk, involved in a rule 

# Species:   id = pp2a, name = pp2a, involved in a rule 

# Species:   id = men, name = men, affected by kineticLaw

init men=8.0E-6
dmen/dt=(1/(nucleus))*(( 1.0 * R26_MEN_a) + (-1.0 * R27_MEN) + (-1.0 * R28_MEN_i) + (-1.0 * R29_MEN_i))

# Species:   id = polo, name = polo, affected by kineticLaw

init polo=0.945
dpolo/dt=(1/(nucleus))*(( 1.0 * R19_Polo_) + (-1.0 * R20_Polo_) + (-1.0 * R21_Polo_))

# Species:   id = tem1, name = tem1, affected by kineticLaw

init tem1=1.0
dtem1/dt=(1/(nucleus))*(( 1.0 * R22_Tem1_) + (-1.0 * R23_Tem1_))

# Species:   id = cdc15, name = cdc15, affected by kineticLaw

init cdc15=0.0257
dcdc15/dt=(1/(nucleus))*(( 1.0 * R24_Cdc15) + (-1.0 * R25_Cdc15))

# Species:   id = pp2a_total, name = pp2a_total, constant
par pp2a_tota=1.0


# Species:   id = cdh1_total, name = cdh1_total, constant
par cdh1_tota=1.0


# Species:   id = net1_total, name = net1_total, constant
par net1_tota=1.0


# Species:   id = tem1_total, name = tem1_total, constant
par tem1_tota=1.0


# Species:   id = cdc15_total, name = cdc15_total, constant
par cdc15_tot=1.0


# Species:   id = securin, name = securin, involved in a rule 

# Species:   id = separase, name = separase, involved in a rule 

# Species:   id = Inh, name = Inh, constant
par Inh=0.0


# Species:   id = cdc14_total, name = cdc14_total, constant
par cdc14_tot=0.5


# Species:   id = Cdc14x2, name = Cdc14x2, involved in a rule 

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

