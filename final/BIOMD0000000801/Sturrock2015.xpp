
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Sturrock2015 - glioma growth
#
# isDescribedBy http://identifiers.org/pubmed/26073722
# is http://identifiers.org/biomodels.db/MODEL1908200001
# is http://identifiers.org/biomodels.db/BIOMD0000000801
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = ir, name = ir
ir(ati,T,I)=(ati*T*I)


# FunctionDefinition id = _1mod, name = 1mod
_1mod(d,mod,sub)=(d*mod*sub)


# FunctionDefinition id = tg, name = tg
tg(at,B,T,kt)=(at*B*T*(1-T/kt))


# FunctionDefinition id = ig, name = ig
ig(as,v,I,B)=(as*(v+I)*B)


# FunctionDefinition id = gcb, name = gcb
gcb(do,as,v,I,B)=((do+as*(v+I))*B)


# Compartment: id = tme, name = tme, constant
par tme=1.0

# Parameter:   id =  at, name = at, constant
par at=1.575

# Parameter:   id =  kt, name = kt, constant
par kt=2.0

# Parameter:   id =  dti, name = dti, constant
par dti=0.072

# Parameter:   id =  ati, name = ati, constant
par ati=3.0E-4

# Parameter:   id =  dt, name = dt, constant
par dt=1.0E-4

# Parameter:   id =  di, name = di, constant
par di=0.01

# Parameter:   id =  as, name = as, constant
par as=0.7

# Parameter:   id =  v, name = v, constant
par v=0.7

# Parameter:   id =  dto, name = dto, constant
par dto=1.0

# Parameter:   id =  ao, name = ao, constant
par ao=20.0

# Parameter:   id =  omin, name = omin, constant
par omin=8.0E-4

# Parameter:   id =  oo, name = oo, constant
par oo=0.0016

# Parameter:   id =  do, name = do, constant
par do=0.01

# Parameter:   id =  dtt, name = dtt, constant
par dtt=0.72

# Parameter:   id =  F, name = F, defined by a Rule

# Parameter:   id =  F2, name = F2, defined by a Rule

# Parameter:   id =  c, name = c, defined by a Rule

# assignmentRule: variable = c
c= piecew2 
aux c=c

# assignmentRule: variable = F
F= piecew3 
aux F=F

# assignmentRule: variable = F2
F2= piecew4 
aux F2=F2

# Reaction: id = tumor_growth, name = tumor growth

tumor_gro=tme*tg(at, B, T_renamed, kt)

# Reaction: id = tumor_death, name = tumor death

tumor_dea=tme*dt*T_renamed

# Reaction: id = tumor_immune, name = tumor immune

tumor_imm=tme*_1mod(dti, I, T_renamed)

# Reaction: id = glucose_b_s, name = glucose b-s

glucose_b=tme*ao*B

# Reaction: id = glioma_consumption, name = glioma consumption

glioma_co=tme*_1mod(dto, T_renamed, B)

# Reaction: id = glucose_consumption_b, name = glucose consumption-b

glucose_c=tme*gcb(do, as, v, I, B)

# Reaction: id = immune_growth, name = immune growth

immune_gr=tme*ig(as, v, I, B)

# Reaction: id = immune_recruitment, name = immune recruitment

immune_re=tme*ir(ati, T_renamed, I)

# Reaction: id = immune_cell_death, name = immune cell death

immune_ce=tme*di*I

# Reaction: id = glioma_response, name = glioma response

glioma_re=tme*_1mod(dtt, T_renamed, I)

# Reaction: id = glucose_intake, name = glucose intake

glucose_i=tme*Constant_(F)

# Reaction: id = glucose_consumption_s, name = glucose consumption-s

glucose_1=tme*do*S

# Reaction: id = glucose_s_b, name = glucose s-b

glucose_s=tme*ao*S

# Species:   id = T, name = T, affected by kineticLaw

par T_renamed=0.14
aux T_renamed=T_renamed
dT_renamed/dt=(1/(tme))*(( 1.0 * tumor_gro) + (-1.0 * tumor_dea) + (-1.0 * tumor_imm))

# Species:   id = B, name = B, affected by kineticLaw

init B=3.92E-4
dB/dt=(1/(tme))*((-1.0 * glucose_b) + (-1.0 * glioma_co) + (-1.0 * glucose_c) + ( 1.0 * glucose_s))

# Species:   id = I, name = I, affected by kineticLaw

init I=2.84E-4
dI/dt=(1/(tme))*(( 1.0 * immune_gr) + ( 1.0 * immune_re) + (-1.0 * immune_ce) + (-1.0 * glioma_re))

# Species:   id = S, name = S, affected by kineticLaw

init S=4.39E-4
dS/dt=(1/(tme))*(( 1.0 * glucose_b) + ( 1.0 * glucose_i) + (-1.0 * glucose_1) + (-1.0 * glucose_s))


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if (t  <  4745) then (2) else (1)

piecew2=if (1095  <  t) then ( piecew1 ) else (1)

piecew3=if (omin  <  (oo*sin(6*pi*t))) then (oo*sin(6*pi*t)) else (omin)

piecew4=if (omin  <  (oo*sin(6*pi*t)*c)) then (oo*sin(6*pi*t)*c) else (omin)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

