
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Nguyen2016 - Feedback regulation in cell signalling: Lessons for cancer therapeutics
#
# is http://identifiers.org/biomodels.db/MODEL1708250003
# is http://identifiers.org/biomodels.db/BIOMD0000000651
# isDescribedBy http://identifiers.org/pubmed/26481970
# is http://identifiers.org/biomodels.db/BIOMD0000000651
# is http://identifiers.org/biomodels.db/MODEL1708250003
# isDescribedBy http://identifiers.org/pubmed/26481970
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_PI3K_activation_deactivation_1, name = Function for PI3K activation/deactivation_1
Function_(PI3K,aIRS,aPI3K,aRTK,k2f,k2fa,k2r)=((k2f*aIRS+k2fa*aRTK)*PI3K-k2r*aPI3K)


# FunctionDefinition id = Function_for_mass_action_with_modifier_1, name = Function for mass action with modifier_1
Functio_1(Akt,aAkt,aPI3K,k3f,k3r)=(k3f*Akt*aPI3K-k3r*aAkt)


# FunctionDefinition id = Function_for_mTOC1_acivation_deactivation_1, name = Function for mTOC1 acivation/deactivation_1
Functio_2(aAkt,amTORC1,k4f,k4r,mTORC1)=(k4f*mTORC1*aAkt-k4r*amTORC1)


# FunctionDefinition id = Function_for_S6K_activation_deactivation_1, name = Function for S6K activation/deactivation_1
Functio_3(S6K,aS6K,amTORC1,k5f,k5r)=(k5f*S6K*amTORC1-k5r*aS6K)


# FunctionDefinition id = Function_for_mass_action_with_modifier_2, name = Function for mass action with modifier_2
Functio_4(IRS,aS6K,iIRS,k6f,k6r)=(k6f*IRS*aS6K-k6r*iIRS)


# FunctionDefinition id = Function_for_RTK_activation_deactivation_1, name = Function for RTK activation/deactivation_1
Functio_5(FOXO,RTK,aRTK,k7f,k7fa,k7r)=((k7f+k7fa*FOXO)*RTK-k7r*aRTK)


# FunctionDefinition id = Function_for_mass_action_with_modifier_3, name = Function for mass action with modifier_3
Functio_6(RasGDP,RasGTP,aRTK,k8f,k8r)=(k8f*RasGDP*aRTK-k8r*RasGTP)


# FunctionDefinition id = Function_for_mass_action_with_modifier_4, name = Function for mass action with modifier_4
Functio_7(Raf,RasGTP,aRaf,k9f,k9r)=(k9f*Raf*RasGTP-k9r*aRaf)


# FunctionDefinition id = Function_for_mass_action_with_modifier_5, name = Function for mass action with modifier_5
Functio_8(MEK,aMEK,aRaf,k10f,k10r)=(k10f*MEK*aRaf-k10r*aMEK)


# FunctionDefinition id = Function_for_mass_action_with_modifier_6, name = Function for mass action with modifier_6
Functio_9(ERK,aERK,aMEK,k11f,k11r)=(k11f*ERK*aMEK-k11r*aERK)


# FunctionDefinition id = Function_for_mass_action_with_modifier_7, name = Function for mass action with modifier_7
Functi_10(Raf,aERK,iRaf,k12f,k12r)=(k12f*Raf*aERK-k12r*iRaf)


# FunctionDefinition id = Function_for_mass_action_with_modifier_8, name = Function for mass action with modifier_8
Functi_11(RTK,aERK,iRTK,k13f,k13r)=(k13f*RTK*aERK-k13r*iRTK)


# FunctionDefinition id = Function_for_mass_action_with_modifier_9, name = Function for mass action with modifier_9
Functi_12(FOXO,aAkt,iFOXO,k14f,k14r)=(k14f*FOXO*aAkt-k14r*iFOXO)


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  k1f, name = k1f, constant
par k1f=0.01

# Parameter:   id =  k1r, name = k1r, constant
par k1r=0.01

# Parameter:   id =  k2f, name = k2f, constant
par k2f=0.001

# Parameter:   id =  k2fa, name = k2fa, constant
par k2fa=0.001

# Parameter:   id =  k2r, name = k2r, constant
par k2r=0.01

# Parameter:   id =  k3f, name = k3f, constant
par k3f=0.001

# Parameter:   id =  k3r, name = k3r, constant
par k3r=0.01

# Parameter:   id =  k4f, name = k4f, constant
par k4f=0.001

# Parameter:   id =  k4r, name = k4r, constant
par k4r=0.01

# Parameter:   id =  k5f, name = k5f, constant
par k5f=0.001

# Parameter:   id =  k5r, name = k5r, constant
par k5r=0.01

# Parameter:   id =  k6f, name = k6f, constant
par k6f=0.1

# Parameter:   id =  k6r, name = k6r, constant
par k6r=0.001

# Parameter:   id =  k7f, name = k7f, constant
par k7f=0.01

# Parameter:   id =  k7fa, name = k7fa, constant
par k7fa=0.01

# Parameter:   id =  k7r, name = k7r, constant
par k7r=0.01

# Parameter:   id =  k8f, name = k8f, constant
par k8f=0.001

# Parameter:   id =  k8r, name = k8r, constant
par k8r=0.01

# Parameter:   id =  k9f, name = k9f, constant
par k9f=0.001

# Parameter:   id =  k9r, name = k9r, constant
par k9r=0.01

# Parameter:   id =  k10f, name = k10f, constant
par k10f=0.001

# Parameter:   id =  k10r, name = k10r, constant
par k10r=0.01

# Parameter:   id =  k11f, name = k11f, constant
par k11f=0.001

# Parameter:   id =  k11r, name = k11r, constant
par k11r=0.01

# Parameter:   id =  k12f, name = k12f, constant
par k12f=0.01

# Parameter:   id =  k12r, name = k12r, constant
par k12r=0.001

# Parameter:   id =  k13f, name = k13f, constant
par k13f=0.1

# Parameter:   id =  k13r, name = k13r, constant
par k13r=0.001

# Parameter:   id =  k14f, name = k14f, constant
par k14f=0.1

# Parameter:   id =  k14r, name = k14r, constant
par k14r=0.001

# Parameter:   id =  k15f, name = k15f, constant
par k15f=0.01

# Parameter:   id =  k15r, name = k15r, constant
par k15r=0.001

# Parameter:   id =  k16f, name = k16f, constant
par k16f=0.01

# Parameter:   id =  k16r, name = k16r, constant
par k16r=0.001

# Reaction: id = IRS__activation_deactivation, name = IRS  activation/deactivation

IRS__acti=compartme*(k1f*IRS-k1r*aIRS)

# Reaction: id = PI3K_activation_deactivation, name = PI3K activation/deactivation

PI3K_acti=compartme*Function_(PI3K, aIRS, aPI3K, aRTK, k2f, k2fa, k2r)

# Reaction: id = Akt_activation_deactivation, name = Akt activation/deactivation

Akt_activ=compartme*Functio_1(Akt, aAkt, aPI3K, k3f, k3r)

# Reaction: id = mTOC1_acivation_deactivation, name = mTOC1 acivation/deactivation

mTOC1_aci=compartme*Functio_2(aAkt, amTORC1, k4f, k4r, mTORC1)

# Reaction: id = S6K_activation_deactivation, name = S6K activation/deactivation

S6K_activ=compartme*Functio_3(S6K, aS6K, amTORC1, k5f, k5r)

# Reaction: id = IRS_inhibition, name = IRS inhibition

IRS_inhib=compartme*Functio_4(IRS, aS6K, iIRS, k6f, k6r)

# Reaction: id = RTK_activation_deactivation, name = RTK activation/deactivation

RTK_activ=compartme*Functio_5(FOXO, RTK, aRTK, k7f, k7fa, k7r)

# Reaction: id = RasGDP__activation_deactivation, name = RasGDP  activation/deactivation

RasGDP__a=compartme*Functio_6(RasGDP, RasGTP, aRTK, k8f, k8r)

# Reaction: id = Raf_activation_deactivation, name = Raf activation/deactivation

Raf_activ=compartme*Functio_7(Raf, RasGTP, aRaf, k9f, k9r)

# Reaction: id = MEK_activation_deactivation, name = MEK activation/deactivation

MEK_activ=compartme*Functio_8(MEK, aMEK, aRaf, k10f, k10r)

# Reaction: id = ERK_activation_deactivation, name = ERK activation/deactivation

ERK_activ=compartme*Functio_9(ERK, aERK, aMEK, k11f, k11r)

# Reaction: id = Raf_inhibition, name = Raf inhibition

Raf_inhib=compartme*Functi_10(Raf, aERK, iRaf, k12f, k12r)

# Reaction: id = RTK_inhibition, name = RTK inhibition

RTK_inhib=compartme*Functi_11(RTK, aERK, iRTK, k13f, k13r)

# Reaction: id = FOXO_inhibition, name = FOXO inhibition

FOXO_inhi=compartme*Functi_12(FOXO, aAkt, iFOXO, k14f, k14r)

# Reaction: id = Akt_inhibition, name = Akt inhibition

Akt_inhib=compartme*(k15f*Akt*AktI-k15r*iAkt)

# Reaction: id = MEK_inhibition, name = MEK inhibition

MEK_inhib=compartme*(k16f*MEK*MEKI-k16r*iMEK)

# Species:   id = IRS, name = IRS, affected by kineticLaw

init IRS=100.0
dIRS/dt=(1/(compartme))*((-1.0 * IRS__acti) + (-1.0 * IRS_inhib))

# Species:   id = aIRS, name = aIRS, affected by kineticLaw

init aIRS=0.0
daIRS/dt=(1/(compartme))*(( 1.0 * IRS__acti))

# Species:   id = iIRS, name = iIRS, affected by kineticLaw

init iIRS=0.0
diIRS/dt=(1/(compartme))*(( 1.0 * IRS_inhib))

# Species:   id = PI3K, name = PI3K, affected by kineticLaw

init PI3K=100.0
dPI3K/dt=(1/(compartme))*((-1.0 * PI3K_acti))

# Species:   id = aPI3K, name = aPI3K, affected by kineticLaw

init aPI3K=0.0
daPI3K/dt=(1/(compartme))*(( 1.0 * PI3K_acti))

# Species:   id = Akt, name = Akt, affected by kineticLaw

init Akt=100.0
dAkt/dt=(1/(compartme))*((-1.0 * Akt_activ) + (-1.0 * Akt_inhib))

# Species:   id = aAkt, name = aAkt, affected by kineticLaw

init aAkt=0.0
daAkt/dt=(1/(compartme))*(( 1.0 * Akt_activ))

# Species:   id = mTORC1, name = mTORC1, affected by kineticLaw

init mTORC1=299.999999999999
dmTORC1/dt=(1/(compartme))*((-1.0 * mTOC1_aci))

# Species:   id = amTORC1, name = amTORC1, affected by kineticLaw

init amTORC1=0.0
damTORC1/dt=(1/(compartme))*(( 1.0 * mTOC1_aci))

# Species:   id = S6K, name = S6K, affected by kineticLaw

init S6K=299.999999999999
dS6K/dt=(1/(compartme))*((-1.0 * S6K_activ))

# Species:   id = aS6K, name = aS6K, affected by kineticLaw

init aS6K=0.0
daS6K/dt=(1/(compartme))*(( 1.0 * S6K_activ))

# Species:   id = FOXO, name = FOXO, affected by kineticLaw

init FOXO=200.0
dFOXO/dt=(1/(compartme))*((-1.0 * FOXO_inhi))

# Species:   id = iFOXO, name = iFOXO, affected by kineticLaw

init iFOXO=0.0
diFOXO/dt=(1/(compartme))*(( 1.0 * FOXO_inhi))

# Species:   id = RTK, name = RTK, affected by kineticLaw

init RTK=200.0
dRTK/dt=(1/(compartme))*((-1.0 * RTK_activ) + (-1.0 * RTK_inhib))

# Species:   id = aRTK, name = aRTK, affected by kineticLaw

init aRTK=0.0
daRTK/dt=(1/(compartme))*(( 1.0 * RTK_activ))

# Species:   id = iRTK, name = iRTK, affected by kineticLaw

init iRTK=0.0
diRTK/dt=(1/(compartme))*(( 1.0 * RTK_inhib))

# Species:   id = RasGDP, name = RasGDP, affected by kineticLaw

init RasGDP=100.0
dRasGDP/dt=(1/(compartme))*((-1.0 * RasGDP__a))

# Species:   id = RasGTP, name = RasGTP, affected by kineticLaw

init RasGTP=0.0
dRasGTP/dt=(1/(compartme))*(( 1.0 * RasGDP__a))

# Species:   id = Raf, name = Raf, affected by kineticLaw

init Raf=100.0
dRaf/dt=(1/(compartme))*((-1.0 * Raf_activ) + (-1.0 * Raf_inhib))

# Species:   id = aRaf, name = aRaf, affected by kineticLaw

init aRaf=0.0
daRaf/dt=(1/(compartme))*(( 1.0 * Raf_activ))

# Species:   id = iRaf, name = iRaf, affected by kineticLaw

init iRaf=0.0
diRaf/dt=(1/(compartme))*(( 1.0 * Raf_inhib))

# Species:   id = MEK, name = MEK, affected by kineticLaw

init MEK=299.999999999999
dMEK/dt=(1/(compartme))*((-1.0 * MEK_activ) + (-1.0 * MEK_inhib))

# Species:   id = aMEK, name = aMEK, affected by kineticLaw

init aMEK=0.0
daMEK/dt=(1/(compartme))*(( 1.0 * MEK_activ))

# Species:   id = ERK, name = ERK, affected by kineticLaw

init ERK=899.999999999996
dERK/dt=(1/(compartme))*((-1.0 * ERK_activ))

# Species:   id = aERK, name = aERK, affected by kineticLaw

init aERK=0.0
daERK/dt=(1/(compartme))*(( 1.0 * ERK_activ))

# Species:   id = AktI, name = AktI, affected by kineticLaw

init AktI=0.0
dAktI/dt=(1/(compartme))*((-1.0 * Akt_inhib))

# Species:   id = iAkt, name = iAkt, affected by kineticLaw

init iAkt=0.0
diAkt/dt=(1/(compartme))*(( 1.0 * Akt_inhib))

# Species:   id = MEKI, name = MEKI, affected by kineticLaw

init MEKI=0.0
dMEKI/dt=(1/(compartme))*((-1.0 * MEK_inhib))

# Species:   id = iMEK, name = iMEK, affected by kineticLaw

init iMEK=0.0
diMEK/dt=(1/(compartme))*(( 1.0 * MEK_inhib))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

