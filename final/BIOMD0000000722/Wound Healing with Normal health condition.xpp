
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Bianchi2015 -Model for lymphangiogenesis in normal and diabetic wounds
#
# is http://identifiers.org/biomodels.db/MODEL1811210001
# is http://identifiers.org/biomodels.db/BIOMD0000000722
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = Function_for_reaction_1, name = Function for reaction 1
Function_(a_p,p_0,T_L,t,a_M,M,r1)=((a_p*p_0*exp((-a_p)*T_L*t)+a_M*M)*(T_L+r1*M))


# FunctionDefinition id = Function_for_reaction_4, name = Function for reaction 4
Functio_1(alpha,b1,T,b2)=(alpha*b1*T^2/(b2+T^4))


# FunctionDefinition id = Function_for_reaction_5, name = Function for reaction 5
Functio_2(beta,r2,M,k1)=(beta*r2*M*(1-M/k1))


# FunctionDefinition id = Function_for_reaction_7, name = Function for reaction 7
Functio_3(rho,C,M)=(rho*C*M)


# FunctionDefinition id = Function_for_reaction_9, name = Function for reaction 9
Functio_4(r3,M)=(r3*M)


# FunctionDefinition id = Function_for_reaction_11, name = Function for reaction 11
Functio_5(gamma,V,L)=(gamma*V*L)


# FunctionDefinition id = Function_for_reaction_12, name = Function for reaction 12
Functio_6(c1,V,c2,c3,c4,T,L)=((c1+V/(c2+c3*V))*1/(1+c4*T)*L)


# FunctionDefinition id = Function_for_reaction_13, name = Function for reaction 13
Functio_7(s_L,b3,V,b4,f)=((s_L+b3*V^2/(b4+V^4))*f)


# FunctionDefinition id = Function_for_reaction_14, name = Function for reaction 14
Functio_8(M,L,C,k2)=((M+L+C)/k2*L)


# FunctionDefinition id = Function_for_reaction_15, name = Function for reaction 15
Functio_9(sigma,delta1,delta2,V,L)=(sigma*(delta1+delta2*V)*L)


# Compartment: id = Body, name = Body, constant
par Body=1.0

# Parameter:   id =  a_p, name = a_p, constant
par a_p=0.029

# Parameter:   id =  p_0, name = p_0, constant
par p_0=250000.0

# Parameter:   id =  a_M, name = a_M, constant
par a_M=0.45

# Parameter:   id =  T_L, name = T_L, constant
par T_L=18.0

# Parameter:   id =  r1, name = r1, constant
par r1=3.0E-5

# Parameter:   id =  d1, name = d1, constant
par d1=500.0

# Parameter:   id =  s_M, name = s_M, constant
par s_M=542.0

# Parameter:   id =  alpha, name = alpha, constant
par alpha=0.5

# Parameter:   id =  b1, name = b1, constant
par b1=8.0E8

# Parameter:   id =  b2, name = b2, constant
par b2=8.1E9

# Parameter:   id =  beta, name = beta, constant
par beta=0.005

# Parameter:   id =  r2, name = r2, constant
par r2=1.22

# Parameter:   id =  k1, name = k1, constant
par k1=600000.0

# Parameter:   id =  d2, name = d2, constant
par d2=0.2

# Parameter:   id =  rho, name = rho, constant
par rho=1.0E-5

# Parameter:   id =  S_V, name = S_V, constant
par S_V=1.9

# Parameter:   id =  r3, name = r3, constant
par r3=0.0019

# Parameter:   id =  d3, name = d3, constant
par d3=11.0

# Parameter:   id =  gamma, name = gamma, constant
par gamma=0.0014

# Parameter:   id =  c1, name = c1, constant
par c1=0.42

# Parameter:   id =  c2, name = c2, constant
par c2=42.0

# Parameter:   id =  c3, name = c3, constant
par c3=4.1

# Parameter:   id =  c4, name = c4, constant
par c4=0.24

# Parameter:   id =  S_L, name = S_L, constant
par S_L=500.0

# Parameter:   id =  b3, name = b3, constant
par b3=1.0E7

# Parameter:   id =  b4, name = b4, constant
par b4=8.1E9

# Parameter:   id =  C, name = C*, constant
par C=10000.0

# Parameter:   id =  k2, name = k2, constant
par k2=471000.0

# Parameter:   id =  L, name = L*, constant
par L=10000.0

# Parameter:   id =  delta1, name = delta1, constant
par delta1=0.05

# Parameter:   id =  delta2, name = delta2, constant
par delta2=0.001

# Parameter:   id =  f, name = f, defined by a Rule

# Parameter:   id =  sigma, name = sigma, defined by a Rule

# assignmentRule: variable = f
f= piecew1 
aux f=f

# assignmentRule: variable = sigma
sigma= piecew2 
aux sigma=sigma

# Reaction: id = Activation_of_TGF_beta_by_enzymes_and_Macrophages, name = Activation of TGF-beta by enzymes and Macrophages

Activatio=Body*Function_(a_p, p_0, T_L, t, a_M, Macrophag, r1)

# Reaction: id = Decay_of_TGF_beta, name = Decay of TGF-beta

Decay_of_=Body*d1*Active_TG

# Reaction: id = Flux_of_macrophages_from_source, name = Flux of macrophages from source

Flux_of_m=Body*Constant_(s_M)

# Reaction: id = Chemotaxis_by_TGF_beta, name = Chemotaxis by TGF-beta

Chemotaxi=Body*Functio_1(alpha, b1, Active_TG, b2)

# Reaction: id = Logistic_growth_of_Macrophages, name = Logistic growth of Macrophages

Logistic_=Body*Functio_2(beta, r2, Macrophag, k1)

# Reaction: id = Removal_of_Macrophages, name = Removal of Macrophages

Removal_o=Body*d2*Macrophag

# Reaction: id = Differentiation_of_Macrophages, name = Differentiation of Macrophages

Different=Body*Functio_3(rho, Capillari, Macrophag)

# Reaction: id = Flux_of_VEGF_from_source, name = Flux of VEGF from source

Flux_of_V=Body*Constant_(S_V)

# Reaction: id = Production_of_VEGF_by_macrophages, name = Production of VEGF by macrophages

Productio=Body*Functio_4(r3, Macrophag)

# Reaction: id = Decay_of_VEGF, name = Decay of VEGF

Decay_o_1=Body*d3*VEGF

# Reaction: id = VEGF_used_by_LECs, name = VEGF used by LECs

VEGF_used=Body*Functio_5(gamma, VEGF, LECs)

# Reaction: id = Growth_of_LECs_upregulated_by_VEGF_and_downregulated_by_TGF_beta, name = Growth of LECs upregulated by VEGF and downregulated by TGF-beta

Growth_of=Body*Functio_6(c1, VEGF, c2, c3, c4, Active_TG, LECs)

# Reaction: id = Inflow_and_chemotaxis_of_LECs_by_VEGF, name = Inflow and chemotaxis of LECs by VEGF

Inflow_an=Body*Functio_7(S_L, b3, VEGF, b4, f)

# Reaction: id = Crowding_effect_and_apoptosis_of_LECs, name = Crowding effect and apoptosis of LECs

Crowding_=Body*Functio_8(Macrophag, LECs, Capillari, k2)

# Reaction: id = Transdifferentiation_of_LECs_into_the_capillaries, name = Transdifferentiation of LECs into the capillaries

Transdiff=Body*Functio_9(sigma, delta1, delta2, VEGF, LECs)

# Species:   id = Active_TGF_beta, name = Active TGF-beta, affected by kineticLaw

par Active_TG=30.0
aux Active_TG=Active_TG
dActive_TG/dt=(1/(Body))*(( 1.0 * Activatio) + (-1.0 * Decay_of_))

# Species:   id = Macrophages, name = Macrophages, affected by kineticLaw

par Macrophag=1875.0
aux Macrophag=Macrophag
dMacrophag/dt=(1/(Body))*(( 1.0 * Flux_of_m) + ( 1.0 * Chemotaxi) + ( 1.0 * Logistic_) + (-1.0 * Removal_o) + (-1.0 * Different))

# Species:   id = VEGF, name = VEGF, affected by kineticLaw

init VEGF=0.5
dVEGF/dt=(1/(Body))*(( 1.0 * Flux_of_V) + ( 1.0 * Productio) + (-1.0 * Decay_o_1) + (-1.0 * VEGF_used))

# Species:   id = LECs, name = LECs, affected by kineticLaw

init LECs=0.0
dLECs/dt=(1/(Body))*(( 1.0 * Growth_of) + ( 1.0 * Inflow_an) + (-1.0 * Crowding_) + (-1.0 * Transdiff))

# Species:   id = Capillaries, name = Capillaries, affected by kineticLaw

par Capillari=0.0
aux Capillari=Capillari
dCapillari/dt=(1/(Body))*(( 1.0 * Transdiff))


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if (Capillari  <  C) then (1-Capillari/C) else (0)

piecew2=if ((LECs+Capillari)  <  L) then (0) else (1)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

