
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Muraro2011_Cytokinin-Auxin_CrossRegulation
#
# is http://identifiers.org/biomodels.db/MODEL1203080000
# is http://identifiers.org/biomodels.db/BIOMD0000000416
# isDescribedBy http://identifiers.org/pubmed/21640126
# isDerivedFrom http://identifiers.org/pubmed/20135237
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = cell, name = cell, constant
par cell=1.0

# Parameter:   id =  eps, name = eps, constant
par eps=0.01

# Parameter:   id =  lambda1, name = lambda1, constant
par lambda1=0.1

# Parameter:   id =  lambda3, name = lambda3, constant
par lambda3=0.02

# Parameter:   id =  alphaAux, name = alphaAux, constant
par alphaAux=1.0

# Parameter:   id =  alphaTIR1, name = alphaTIR1, constant
par alphaTIR1=1.0

# Parameter:   id =  alphaARF, name = alphaARF, constant
par alphaARF=1.0

# Parameter:   id =  phiIAAp, name = phiIAAp, constant
par phiIAAp=100.0

# Parameter:   id =  phiARp, name = phiARp, constant
par phiARp=2.0

# Parameter:   id =  phiPINp, name = phiPINp, constant
par phiPINp=100.0

# Parameter:   id =  deltaIAAp, name = deltaIAAp, constant
par deltaIAAp=1.0

# Parameter:   id =  deltaARp, name = deltaARp, constant
par deltaARp=1.0

# Parameter:   id =  deltaPINp, name = deltaPINp, constant
par deltaPINp=1.0

# Parameter:   id =  muAux, name = muAux, constant
par muAux=0.1

# Parameter:   id =  muIAAs, name = muIAAs, constant
par muIAAs=1.0

# Parameter:   id =  etaAuxTIR1, name = etaAuxTIR1, constant
par etaAuxTIR=10.0

# Parameter:   id =  etaARFIAA, name = etaARFIAA, constant
par etaARFIAA=1.0

# Parameter:   id =  la, name = la, constant
par la=0.5

# Parameter:   id =  ld, name = ld, constant
par ld=0.1

# Parameter:   id =  pa, name = pa, constant
par pa=10.0

# Parameter:   id =  pd, name = pd, constant
par pd=10.0

# Parameter:   id =  ka, name = ka, constant
par ka=100.0

# Parameter:   id =  kd, name = kd, constant
par kd=1.0

# Parameter:   id =  qa, name = qa, constant
par qa=1.0

# Parameter:   id =  qd, name = qd, constant
par qd=1.0

# Parameter:   id =  thetaARF, name = thetaARF, constant
par thetaARF=0.1

# Parameter:   id =  thetaARF2, name = thetaARF2, constant
par thetaARF2=0.01

# Parameter:   id =  thARFIAA, name = thARFIAA, constant
par thARFIAA=0.1

# Parameter:   id =  thetaIAAp, name = thetaIAAp, constant
par thetaIAAp=0.1

# Parameter:   id =  thetaARp, name = thetaARp, constant
par thetaARp=0.1

# Parameter:   id =  psiARFIAA, name = psiARFIAA, constant
par psiARFIAA=0.1

# Parameter:   id =  psiARF, name = psiARF, constant
par psiARF=0.1

# Parameter:   id =  alphaCk, name = alphaCk, constant
par alphaCk=1.0

# Parameter:   id =  alphaARRB, name = alphaARRB, constant
par alphaARRB=2.0

# Parameter:   id =  alphaAHK, name = alphaAHK, constant
par alphaAHK=1.0

# Parameter:   id =  alphaPH, name = alphaPH, constant
par alphaPH=1.0

# Parameter:   id =  phiCRp, name = phiCRp, constant
par phiCRp=2.0

# Parameter:   id =  phiARRAp, name = phiARRAp, constant
par phiARRAp=100.0

# Parameter:   id =  deltaCRp, name = deltaCRp, constant
par deltaCRp=1.0

# Parameter:   id =  deltaARRAp, name = deltaARRAp, constant
par deltaARRA=1.0

# Parameter:   id =  muCk, name = muCk, constant
par muCk=0.1

# Parameter:   id =  etaAHKph, name = etaAHKph, constant
par etaAHKph=1.0

# Parameter:   id =  etaCkPh, name = etaCkPh, constant
par etaCkPh=1.0

# Parameter:   id =  ra, name = ra, constant
par ra=1.0

# Parameter:   id =  rd, name = rd, constant
par rd=1.0

# Parameter:   id =  ua, name = ua, constant
par ua=1.0

# Parameter:   id =  ud, name = ud, constant
par ud=1.0

# Parameter:   id =  sa, name = sa, constant
par sa=1.0

# Parameter:   id =  sd, name = sd, constant
par sd=1.0

# Parameter:   id =  thARRAph, name = thARRAph, constant
par thARRAph=0.1

# Parameter:   id =  thARRBph, name = thARRBph, constant
par thARRBph=0.1

# assignmentRule: variable = TIR1
TIR1=alphaTIR1-AuxTIR1-AuxTIAA
aux TIR1=TIR1

# assignmentRule: variable = ARF
ARF=alphaARF-2*ARF2-ARFIAA
aux ARF=ARF

# assignmentRule: variable = ARRBp
ARRBp=alphaARRB-etaAHKph*ARRBph
aux ARRBp=ARRBp

# assignmentRule: variable = CkAHKph
CkAHKph=alphaPH-AHKph-ARRAph-ARRBph
aux CkAHKph=CkAHKph

# assignmentRule: variable = CkAHK
CkAHK=alphaAHK-etaAHKph*(AHKph+CkAHKph)
aux CkAHK=CkAHK

# assignmentRule: variable = F1
F1=ARF/thetaARF/(1+ARF/thetaARF+ARF2/thetaARF2+ARFIAA/thARFIAA+ARF*IAAp/psiARFIAA+ARF^2/psiARF+ARRBph/thARRBph)
aux F1=F1

# assignmentRule: variable = F2
F2=(ARF2/thetaARF2+ARF^2/psiARF)/(1+ARF/thetaARF+ARF2/thetaARF2+ARFIAA/thARFIAA+ARF*IAAp/psiARFIAA+ARF^2/psiARF+ARRBph/thARRBph)
aux F2=F2

# assignmentRule: variable = F3
F3=ARRBph/thARRBph/(1+ARF/thetaARF+ARF2/thetaARF2+ARFIAA/thARFIAA+ARF*IAAp/psiARFIAA+ARF^2/psiARF+ARRBph/thARRBph)
aux F3=F3

# assignmentRule: variable = F4
F4=ARRBph/thARRBph/(1+ARRAph/thARRAph+ARRBph/thARRBph)
aux F4=F4

# assignmentRule: variable = F5a
F5a=ARF/thetaARF/(1+ARF/thetaARF+ARF2/thetaARF2+ARFIAA/thARFIAA+ARF*IAAp/psiARFIAA+ARF^2/psiARF)
aux F5a=F5a

# assignmentRule: variable = F5b
F5b=(ARF2/thetaARF2+ARF^2/psiARF)/(1+ARF/thetaARF+ARF2/thetaARF2+ARFIAA/thARFIAA+ARF*IAAp/psiARFIAA+ARF^2/psiARF)
aux F5b=F5b

# assignmentRule: variable = F6
F6=ARp/thetaARp/(1+ARp/thetaARp)
aux F6=F6

# Reaction: id = r1

r1=phiIAAp*(lambda1*F1+F2+lambda3*F3)-IAAm

# Reaction: id = r2

r2=1/eps*(deltaIAAp*IAAm-la*IAAp*AuxTIR1+ld*AuxTIAA)+etaARFIAA*(pd*ARFIAA-pa*IAAp*ARF)

# Reaction: id = r3

r3=1/eps*(ka*Aux*TIR1-kd*AuxTIR1+(ld+1)*AuxTIAA-la*AuxTIR1*IAAp)

# Reaction: id = r4

r4=1/eps*(la*IAAp*AuxTIR1-(ld+1)*AuxTIAA)

# Reaction: id = r5

r5=1/eps*(AuxTIAA-muIAAs*IAAs)

# Reaction: id = r6

r6=pa*ARF*IAAp-pd*ARFIAA

# Reaction: id = r7

r7=qa*ARF^2-qd*ARF2

# Reaction: id = r8

r8=muAux*(alphaAux-Aux)-1/eps*etaAuxTIR*(ka*Aux*TIR1-kd*AuxTIR1)

# Reaction: id = r9

r9=phiPINp*(lambda1*F5a+F5b)-PINm

# Reaction: id = r10

r10=1/eps*(deltaPINp*PINm-PINp)

# Reaction: id = r11

r11=phiARp*(lambda1*F5a+F5b)-ARm

# Reaction: id = r12

r12=1/eps*(deltaARp*ARm-ARp)

# Reaction: id = r13

r13=phiCRp*F4-CRm

# Reaction: id = r14

r14=1/eps*(deltaCRp*CRm-CRp)

# Reaction: id = r15

r15=1/eps*(rd*CkAHKph-ra*AHKph*Ck)

# Reaction: id = r16

r16=muCk*(alphaCk-Ck)-etaCkPh/eps*(ra*AHKph*Ck-rd*CkAHKph)

# Reaction: id = r17

r17=1/eps*(ua*CkAHKph*ARRBp-ud*CkAHK*ARRBph)

# Reaction: id = r18

r18=1/eps*(sa*CkAHKph*ARRAp-sd*CkAHK*ARRAph)

# Reaction: id = r19

r19=phiARRAp*F6-ARRAm

# Reaction: id = r20

r20=1/eps*(deltaARRA*ARRAm-ARRAp+etaAHKph*(sd*CkAHK*ARRAph-sa*CkAHKph*ARRAp))

# Species:   id = IAAm, name = IAAm, affected by kineticLaw

init IAAm=0.0
dIAAm/dt=(1/(cell))*(( 1.0 * r1))

# Species:   id = IAAp, name = IAAp, affected by kineticLaw

init IAAp=0.0
dIAAp/dt=(1/(cell))*(( 1.0 * r2))

# Species:   id = AuxTIR1, name = AuxTIR1, affected by kineticLaw

init AuxTIR1=0.0
dAuxTIR1/dt=(1/(cell))*(( 1.0 * r3))

# Species:   id = AuxTIAA, name = AuxTIAA, affected by kineticLaw

init AuxTIAA=0.0
dAuxTIAA/dt=(1/(cell))*(( 1.0 * r4))

# Species:   id = IAAs, name = IAAs, affected by kineticLaw

init IAAs=0.0
dIAAs/dt=(1/(cell))*(( 1.0 * r5))

# Species:   id = ARFIAA, name = ARFIAA, affected by kineticLaw

init ARFIAA=0.0
dARFIAA/dt=(1/(cell))*(( 1.0 * r6))

# Species:   id = ARF2, name = ARF2, affected by kineticLaw

init ARF2=0.0
dARF2/dt=(1/(cell))*(( 1.0 * r7))

# Species:   id = Aux, name = Aux, affected by kineticLaw

init Aux=1.0
dAux/dt=(1/(cell))*(( 1.0 * r8))

# Species:   id = PINm, name = PINm, affected by kineticLaw

init PINm=0.0
dPINm/dt=(1/(cell))*(( 1.0 * r9))

# Species:   id = PINp, name = PINp, affected by kineticLaw

init PINp=0.0
dPINp/dt=(1/(cell))*(( 1.0 * r10))

# Species:   id = ARm, name = ARm, affected by kineticLaw

init ARm=0.0
dARm/dt=(1/(cell))*(( 1.0 * r11))

# Species:   id = ARp, name = ARp, affected by kineticLaw

init ARp=0.0
dARp/dt=(1/(cell))*(( 1.0 * r12))

# Species:   id = TIR1, name = TIR1, defined in a rule 

# Species:   id = ARF, name = ARF, defined in a rule 

# Species:   id = CRm, name = CRm, affected by kineticLaw

init CRm=0.0
dCRm/dt=(1/(cell))*(( 1.0 * r13))

# Species:   id = CRp, name = CRp, affected by kineticLaw

init CRp=0.0
dCRp/dt=(1/(cell))*(( 1.0 * r14))

# Species:   id = AHKph, name = AHKph, affected by kineticLaw

init AHKph=1.0
dAHKph/dt=(1/(cell))*(( 1.0 * r15))

# Species:   id = Ck, name = Ck, affected by kineticLaw

init Ck=1.0
dCk/dt=(1/(cell))*(( 1.0 * r16))

# Species:   id = ARRBph, name = ARRBph, affected by kineticLaw

init ARRBph=0.0
dARRBph/dt=(1/(cell))*(( 1.0 * r17))

# Species:   id = ARRAph, name = ARRAph, affected by kineticLaw

init ARRAph=0.0
dARRAph/dt=(1/(cell))*(( 1.0 * r18))

# Species:   id = ARRAm, name = ARRAm, affected by kineticLaw

init ARRAm=0.0
dARRAm/dt=(1/(cell))*(( 1.0 * r19))

# Species:   id = ARRAp, name = ARRAp, affected by kineticLaw

init ARRAp=0.0
dARRAp/dt=(1/(cell))*(( 1.0 * r20))

# Species:   id = ARRBp, name = ARRBp, defined in a rule 

# Species:   id = CkAHKph, name = CkAHKph, defined in a rule 

# Species:   id = CkAHK, name = CkAHK, defined in a rule 

# Species:   id = F1, name = F1, defined in a rule 

# Species:   id = F2, name = F2, defined in a rule 

# Species:   id = F3, name = F3, defined in a rule 

# Species:   id = F4, name = F4, defined in a rule 

# Species:   id = F5a, name = F5a, defined in a rule 

# Species:   id = F5b, name = F5b, defined in a rule 

# Species:   id = F6, name = F6, defined in a rule 

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

