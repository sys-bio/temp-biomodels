
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Lee2010_ThrombinActivation_OneForm_reduced
#
# is http://identifiers.org/biomodels.db/MODEL1108260003
# is http://identifiers.org/biomodels.db/BIOMD0000000357
# isDescribedBy http://identifiers.org/pubmed/20435402
# isDerivedFrom http://identifiers.org/pubmed/17726029
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  k1, name = k1, constant
par k1=91.8

# Parameter:   id =  k2, name = k2, constant
par k2=82.4

# Parameter:   id =  k3a, name = k3a, constant
par k3a=151.5

# Parameter:   id =  k4a, name = k4a, constant
par k4a=209.9

# Parameter:   id =  k5, name = k5, constant
par k5=5.16

# Parameter:   id =  k6, name = k6, constant
par k6=32.3

# Parameter:   id =  k7a, name = k7a, constant
par k7a=4.7

# Parameter:   id =  k8a, name = k8a, constant
par k8a=42.6

# Parameter:   id =  j1, name = j1, constant
par j1=33.4

# Parameter:   id =  j3a, name = j3a, constant
par j3a=0.185

# Parameter:   id =  j5, name = j5, constant
par j5=21.8

# Parameter:   id =  j7a, name = j7a, constant
par j7a=2.66E-5

# Reaction: id = r1, name = r1

r1=compartme*(k1*E*P-j1*E_P_1)

# Reaction: id = r2, name = r2

r2=compartme*k2*E_P_1

# Reaction: id = r5, name = r5

r5=compartme*(k3a*E*M-j3a*E_M)

# Reaction: id = r7, name = r7

r7=compartme*k4a*E_M

# Reaction: id = r8, name = r8

r8=compartme*(k5*E*P-j5*E_P_2)

# Reaction: id = r9, name = r9

r9=compartme*k6*E_P_2

# Reaction: id = r12, name = r12

r12=compartme*(k7a*E*P2-j7a*E_P2)

# Reaction: id = r14, name = r14

r14=compartme*k8a*E_P2

# Species:   id = E, name = E, affected by kineticLaw

init E=1.5E-4
dE/dt=(1/(compartme))*((-1.0 * r1) + ( 1.0 * r2) + (-1.0 * r5) + ( 1.0 * r7) + (-1.0 * r8) + ( 1.0 * r9) + (-1.0 * r12) + ( 1.0 * r14))

# Species:   id = E_P_1, name = E_P_1, affected by kineticLaw

init E_P_1=0.0
dE_P_1/dt=(1/(compartme))*(( 1.0 * r1) + (-1.0 * r2))

# Species:   id = P, name = P, affected by kineticLaw

init P=1.0
dP/dt=(1/(compartme))*((-1.0 * r1) + (-1.0 * r8))

# Species:   id = M, name = M, affected by kineticLaw

init M=0.0
dM/dt=(1/(compartme))*(( 1.0 * r2) + (-1.0 * r5))

# Species:   id = E_M, name = E_M, affected by kineticLaw

init E_M=0.0
dE_M/dt=(1/(compartme))*(( 1.0 * r5) + (-1.0 * r7))

# Species:   id = T, name = T, affected by kineticLaw

par T_renamed=0.0
aux T_renamed=T_renamed
dT_renamed/dt=(1/(compartme))*(( 1.0 * r7) + ( 1.0 * r14))

# Species:   id = E_P_2, name = E_P_2, affected by kineticLaw

init E_P_2=0.0
dE_P_2/dt=(1/(compartme))*(( 1.0 * r8) + (-1.0 * r9))

# Species:   id = P2, name = P2, affected by kineticLaw

init P2=0.0
dP2/dt=(1/(compartme))*(( 1.0 * r9) + (-1.0 * r12))

# Species:   id = E_P2, name = E_P2, affected by kineticLaw

init E_P2=0.0
dE_P2/dt=(1/(compartme))*(( 1.0 * r12) + (-1.0 * r14))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

