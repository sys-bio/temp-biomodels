
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Sun2018 - Instantaneous mutation rate in cancer initiation and progression
#
# isDerivedFrom http://identifiers.org/biomodels.db/MODEL1909300002
# isDerivedFrom http://identifiers.org/ncit/C12393
# isDerivedFrom http://identifiers.org/vario/VariO:0139
# isDerivedFrom http://identifiers.org/ncit/C94346
# isDerivedFrom http://identifiers.org/mamo/MAMO_0000046
# isDerivedFrom http://identifiers.org/efo/0002618
# isDerivedFrom http://identifiers.org/efo/0000311
# isDerivedFrom http://identifiers.org/taxonomy/9606
# isDerivedFrom http://identifiers.org/DOI/10.1109/BIBM.2017.8217639
# isDescribedBy http://identifiers.org/DOI/10.1109/BIBM.2017.8217639
# isDescribedBy http://identifiers.org/pubmed/30463617
# is http://identifiers.org/biomodels.db/MODEL1909300002
# is http://identifiers.org/biomodels.db/BIOMD0000000915
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = compartment, name = Cell, constant
par compartme=1.0

# Parameter:   id =  myu, name = myu, defined by a Rule

# Parameter:   id =  a, name = a*, constant
par a=40.74

# Parameter:   id =  b, name = b*, constant
par b=0.0

# Parameter:   id =  c, name = DB, defined by a Rule

# Parameter:   id =  K, name = K, constant
par K=62.04

# Parameter:   id =  DT1, name = DT1, defined by a Rule

# Parameter:   id =  Mo_1, name = Mo_1, constant
par Mo_1=49.0

# Parameter:   id =  M0_2, name = M0_2, constant
par M0_2=35.0

# Parameter:   id =  M0_3, name = M0_3, constant
par M0_3=28.0

# Parameter:   id =  M0_4, name = M0_4, constant
par M0_4=34.0

# Parameter:   id =  M0_5, name = M0_5, constant
par M0_5=28.0

# Parameter:   id =  M0_6, name = M0_6, constant
par M0_6=50.0

# Parameter:   id =  M0_7, name = M0_7, constant
par M0_7=35.0

# Parameter:   id =  M0_AVG, name = M0_AVG, defined by a Rule

# Parameter:   id =  b1, name = b1*, constant
par b1=1.0E-5

# Parameter:   id =  b2, name = b2*, constant
par b2=1.8E-5

# Parameter:   id =  b3, name = b3*, constant
par b3=3.0E-5

# Parameter:   id =  b4, name = b4*, constant
par b4=1.9E-5

# Parameter:   id =  b5, name = b5*, constant
par b5=2.9E-5

# Parameter:   id =  b6, name = b6*, constant
par b6=1.0E-5

# Parameter:   id =  b7, name = b7*, constant
par b7=1.8E-5

# Parameter:   id =  b_AVG, name = b_AVG*, defined by a Rule

# Parameter:   id =  DT2, name = DT2, defined by a Rule

# Parameter:   id =  DT3, name = DT3, defined by a Rule

# Parameter:   id =  DT4, name = DT4, defined by a Rule

# Parameter:   id =  DT5, name = DT5, defined by a Rule

# Parameter:   id =  DT6, name = DT6, defined by a Rule

# Parameter:   id =  DT7, name = DT7, defined by a Rule

# Parameter:   id =  a_0, name = a, constant
par a_0=0.001

# Parameter:   id =  b_0, name = b, constant
par b_0=0.0

# assignmentRule: variable = myu
myu=a_0*exp(b_0*t)
aux myu=myu

# assignmentRule: variable = c
c=a*t/(K+t)
aux c=c

# assignmentRule: variable = M0_AVG
M0_AVG=(Mo_1+M0_2+M0_3+M0_4+M0_5+M0_6+M0_7)/7
aux M0_AVG=M0_AVG

# assignmentRule: variable = b_AVG
b_AVG=(b1+b2+b3+b4+b5+b6+b7)/7
aux b_AVG=b_AVG

# assignmentRule: variable = DT1
DT1=Mo_1/M0_AVG*exp((b1-b_AVG)*t)*a*t/(K+t)
aux DT1=DT1

# assignmentRule: variable = DT2
DT2=M0_2/M0_AVG*exp((b2-b_AVG)*t)*a*t/(K+t)
aux DT2=DT2

# assignmentRule: variable = DT3
DT3=M0_3/M0_AVG*exp((b3-b_AVG)*t)*a*t/(K+t)
aux DT3=DT3

# assignmentRule: variable = DT4
DT4=M0_4/M0_AVG*exp((b4-b_AVG)*t)*a*t/(K+t)
aux DT4=DT4

# assignmentRule: variable = DT5
DT5=M0_5/M0_AVG*exp((b5-b_AVG)*t)*a*t/(K+t)
aux DT5=DT5

# assignmentRule: variable = DT6
DT6=M0_6/M0_AVG*exp((b6-b_AVG)*t)*a*t/(K+t)
aux DT6=DT6

# assignmentRule: variable = DT7
DT7=M0_7/M0_AVG*exp((b7-b_AVG)*t)*a*t/(K+t)
aux DT7=DT7

# Reaction: id = mutation_1_2, name = mutation 1-2

mutation_=compartme*myu*p_1

# Reaction: id = mutation_2_3, name = mutation 2-3

mutatio_1=compartme*myu*p_2

# Reaction: id = mutation_3_4, name = mutation 3-4

mutatio_2=compartme*myu*p_3

# Reaction: id = mutation_4_5, name = mutation 4-5

mutatio_3=compartme*myu*p_4

# Reaction: id = mutation_5_6, name = mutation 5-6

mutatio_4=compartme*myu*p_5

# Reaction: id = mutation_6_7, name = mutation 6-7

mutatio_5=compartme*myu*p_6

# Reaction: id = mutation_7_8, name = mutation 7-8

mutatio_6=compartme*myu*p_7

# Reaction: id = mutation_0_1, name = mutation 0-1

mutatio_7=compartme*myu*p_0

# Species:   id = p_0, name = patient_0, affected by kineticLaw

init p_0=1.0
dp_0/dt=(1/(compartme))*((-1.0 * mutatio_7))

# Species:   id = p_1, name = patient_1, affected by kineticLaw

init p_1=0.0
dp_1/dt=(1/(compartme))*((-1.0 * mutation_) + ( 1.0 * mutatio_7))

# Species:   id = p_2, name = patient_2, affected by kineticLaw

init p_2=0.0
dp_2/dt=(1/(compartme))*(( 1.0 * mutation_) + (-1.0 * mutatio_1))

# Species:   id = p_3, name = patient_3, affected by kineticLaw

init p_3=0.0
dp_3/dt=(1/(compartme))*(( 1.0 * mutatio_1) + (-1.0 * mutatio_2))

# Species:   id = p_4, name = patient_4, affected by kineticLaw

init p_4=0.0
dp_4/dt=(1/(compartme))*(( 1.0 * mutatio_2) + (-1.0 * mutatio_3))

# Species:   id = p_5, name = patient_5, affected by kineticLaw

init p_5=0.0
dp_5/dt=(1/(compartme))*(( 1.0 * mutatio_3) + (-1.0 * mutatio_4))

# Species:   id = p_6, name = patient_6, affected by kineticLaw

init p_6=0.0
dp_6/dt=(1/(compartme))*(( 1.0 * mutatio_4) + (-1.0 * mutatio_5))

# Species:   id = p_7, name = patient_7, affected by kineticLaw

init p_7=0.0
dp_7/dt=(1/(compartme))*(( 1.0 * mutatio_5) + (-1.0 * mutatio_6))

# Species:   id = p_8, name = patient_8, affected by kineticLaw

init p_8=0.0
dp_8/dt=(1/(compartme))*(( 1.0 * mutatio_6))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

