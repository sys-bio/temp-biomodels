
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Sun2018 - Instantaneous mutation rate in cancer initiation and progression
#
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_mutation, name = Function for mutation
Function_(myu_j,p_j)=(myu_j*p_j)


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  myu, name = myu, defined by a Rule

# Parameter:   id =  a, name = a, constant
par a=1.0E-6

# Parameter:   id =  b, name = b, constant
par b=3.0E-5

# assignmentRule: variable = p
p=p_0+p_1+p_2+p_3+p_4+p_5+p_6+p_7+p_8
aux p=p

# assignmentRule: variable = myu
myu=a*exp(b*t)
aux myu=myu

# Reaction: id = mutation_1_2, name = mutation 1-2

mutation_=compartme*Function_(myu, p_1)

# Reaction: id = mutation_2_3, name = mutation 2-3

mutatio_1=compartme*Function_(myu, p_2)

# Reaction: id = mutation_3_4, name = mutation 3-4

mutatio_2=compartme*Function_(myu, p_3)

# Reaction: id = mutation_4_5, name = mutation 4-5

mutatio_3=compartme*Function_(myu, p_4)

# Reaction: id = mutation_5_6, name = mutation 5-6

mutatio_4=compartme*Function_(myu, p_5)

# Reaction: id = mutation_6_7, name = mutation 6-7

mutatio_5=compartme*Function_(myu, p_6)

# Reaction: id = mutation_7_8, name = mutation 7-8

mutatio_6=compartme*Function_(myu, p_7)

# Reaction: id = mutation_0_1, name = mutation 0-1

mutatio_7=compartme*Function_(myu, p_0)

# Species:   id = p_0, name = p_0, affected by kineticLaw

init p_0=1.0
dp_0/dt=(1/(compartme))*((-1.0 * mutatio_7))

# Species:   id = p_1, name = p_1, affected by kineticLaw

init p_1=0.0
dp_1/dt=(1/(compartme))*((-1.0 * mutation_) + ( 1.0 * mutatio_7))

# Species:   id = p_2, name = p_2, affected by kineticLaw

init p_2=0.0
dp_2/dt=(1/(compartme))*(( 1.0 * mutation_) + (-1.0 * mutatio_1))

# Species:   id = p_3, name = p_3, affected by kineticLaw

init p_3=0.0
dp_3/dt=(1/(compartme))*(( 1.0 * mutatio_1) + (-1.0 * mutatio_2))

# Species:   id = p_4, name = p_4, affected by kineticLaw

init p_4=0.0
dp_4/dt=(1/(compartme))*(( 1.0 * mutatio_2) + (-1.0 * mutatio_3))

# Species:   id = p_5, name = p_5, affected by kineticLaw

init p_5=0.0
dp_5/dt=(1/(compartme))*(( 1.0 * mutatio_3) + (-1.0 * mutatio_4))

# Species:   id = p_6, name = p_6, affected by kineticLaw

init p_6=0.0
dp_6/dt=(1/(compartme))*(( 1.0 * mutatio_4) + (-1.0 * mutatio_5))

# Species:   id = p_7, name = p_7, affected by kineticLaw

init p_7=0.0
dp_7/dt=(1/(compartme))*(( 1.0 * mutatio_5) + (-1.0 * mutatio_6))

# Species:   id = p_8, name = p_8, affected by kineticLaw

init p_8=0.0
dp_8/dt=(1/(compartme))*(( 1.0 * mutatio_6))

# Species:   id = p, name = p, involved in a rule 

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

