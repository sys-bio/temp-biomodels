
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Li2009- Assymetric Caulobacter cell cycle
#
# isDerivedFrom http://identifiers.org/mamo/MAMO_0000046
# isDerivedFrom http://identifiers.org/go/GO:0007049
# isDerivedFrom http://identifiers.org/go/GO:0051726
# isDerivedFrom http://identifiers.org/taxonomy/155892
# isDerivedFrom http://identifiers.org/biomodels.db/BIOMD0000000718
# isDescribedBy http://identifiers.org/pubmed/19680425
# is http://identifiers.org/biomodels.db/MODEL1812110002
# is http://identifiers.org/biomodels.db/BIOMD0000000727
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = function_with_1k_1J_3M, name = function with 1k 1J 3M
function_(k,J,M1,M2,M3)=(k*J^2/(J^2+M1^2)*M2*M3)


# FunctionDefinition id = function_with_1k_1J_2M__2, name = function with 1k 1J 2M _2
functio_1(k,J,M1,M2)=(k*M1^2/(J^2+M1^2)*M2)


# FunctionDefinition id = function_for_deg_of_CtrA_and_CtrA_P, name = function for deg of CtrA and CtrA_P
functio_2(k1,M1,J1,M2,J2,M3,M4,J3)=(k1*M1^2/(J1^2+M1^2)*M2^4/(J2^4+M2^4)*M3^4/(J3^4+M3^4)*M4)


# FunctionDefinition id = function_1k_2M, name = function 1k 2M
functio_3(k,M1,M2)=(k*M1*M2)


# FunctionDefinition id = function_for_DnaA_1k_1J_2M, name = function for DnaA 1k 1J 2M
functio_4(k,J,M1,M2)=(k*J^2/(J^2+M1^2)*(2-M2))


# FunctionDefinition id = function_for_DnaA_1k_1K_2M__2, name = function for DnaA 1k 1K 2M _2
functio_5(k,M1,J,M2)=(k*M1^2/(J^2+M1^2)*(2-M2))


# FunctionDefinition id = function_with_1k_1J_2M, name = function with 1k 1J 2M
functio_6(k,J,M1,M2)=(k*J^2/(J^2+M1^2)*M2)


# FunctionDefinition id = function_for_Ini, name = function for Ini
functio_7(k,M1,theta1,M2,theta2,M3,theta3,M4,theta4,M5)=(k*(M1/theta1)^4*(M2/theta2)^4/(1+(M1/theta1)^4+(M2/theta2)^4+(M3/theta3)^4+(M2/theta2)^4*(M3/theta3)^4+(M4/theta4)^4)*M5)


# FunctionDefinition id = function_for_1k_1J_2M__4, name = function for 1k 1J 2M ^4
functio_8(k,M1,J,M2)=(k*M1^4/(J^4+M1^4)*M2)


# FunctionDefinition id = function_for_1k_1m, name = function for 1k 1m
functio_9(k,M)=(k*M)


# FunctionDefinition id = function_for_h___, name = function for h____
functi_10(k,M1,J,S)=(k*M1^4/(J^4+M1^4)*S)


# FunctionDefinition id = function_for_H__PodJL_and_PerP, name = function for H _PodJL and PerP
functi_11(k,S,H,M,J)=(k*S*H*(1-M)/(J+1-M))


# FunctionDefinition id = function_for_DivJ1, name = function for DivJ1
functi_12(H,k,J,M)=((1-H)*k*J^2/(J^2+M^2))


# FunctionDefinition id = function_dor_DivJ_2, name = function dor DivJ 2
functi_13(k,M1,H,M2,J)=(k*M1*(1-H)*(1-M2)/(J+1-M2))


# FunctionDefinition id = function_for_1J_1k_1m, name = function for 1J 1k 1m
functi_14(k,M1,J)=(k*M1^2/(J^2+M1^2))


# FunctionDefinition id = function_for_Divk_1, name = function for Divk 1
functi_15(k,M1,M2,J,H,M4)=(k*M1*M2^2/(J^2+M2^2)*(1+H*(M4-1)))


# FunctionDefinition id = function_for_DivK2, name = function for DivK2
functi_16(k,M1,M2,J,M4,H)=(k*M1*M2^2/(J^2+M2^2)*(M4+H*(1-M4)))


# FunctionDefinition id = function_for_CckA, name = function for CckA
functi_17(k,M1,M2,J,M3)=(k*(M1-M2)*J^2/(J^2+M3^2))


# FunctionDefinition id = function_for_CpdR_1, name = function for CpdR 1
functi_18(k,M1,M2)=(k*(M1-M2))


# FunctionDefinition id = function_for_CpdR_2, name = function for CpdR 2
functi_19(k,M1,M2,J)=(k*M1*M2^2/(J^2+M2^2))


# FunctionDefinition id = function_for_ParAADP_2, name = function for ParAADP 2
functi_20(k,M1,M2)=(k*(M1-1)*M2)


# FunctionDefinition id = function_for_FtsQ, name = function for FtsQ
functi_21(k,M1,J1,M2,J2)=(k*M1^2/(J1^2+M1^2)*M2^4/(J2^4+M2^4))


# FunctionDefinition id = function_for_FtsZ_synthesis, name = function for FtsZ synthesis
functi_22(k,J,M1,M2,M3)=(k*J^2/(J^2+M1^2)*M2*(1-M3))


# FunctionDefinition id = function_for_1k_1_M1_M2, name = function for 1k 1-M1 M2
functi_23(k,M1,M2)=(k*(1-M1)*M2)


# FunctionDefinition id = function_for_Z_synthesis, name = function for Z synthesis
functi_24(k,M,J)=(k*(1-M)/(J+1-M))


# FunctionDefinition id = function_for_Z_deg, name = function for Z deg
functi_25(k1,k2,M1,J1,M2,theta1,M3,theta2,S,J2)=((k1+k2*M1^4/(J1^4+M1^4)*(M2/theta1)^4/(1+(M2/theta1)^4+(M3/theta2)^4))*S/(J2+S))


# Compartment: id = Caulobacter, name = Caulobacter, constant
par Caulobact=1.0

# Parameter:   id =  H, name = H, constant
par H=0.0

# Parameter:   id =  ks_CtrA_P1, name = ks,CtrA-P1, constant
par ks_CtrA_P=0.0159

# Parameter:   id =  ks_CtrA_P2, name = ks,CtrA-P2, constant
par ks_CtrA_1=0.14

# Parameter:   id =  kd_CtrA1, name = kd,CtrA1, constant
par kd_CtrA1=0.002

# Parameter:   id =  kd_CtrA2, name = kd,CtrA2, constant
par kd_CtrA2=0.25

# Parameter:   id =  ktrans_CtrA_P, name = ktrans,CtrA_P, constant
par ktrans_Ct=0.025

# Parameter:   id =  ktrans_CtrA, name = ktrans.CtrA, constant
par ktrans__1=0.095

# Parameter:   id =  ks_GcrA, name = ks,GcrA, constant
par ks_GcrA=0.055

# Parameter:   id =  kd_GcrA, name = kd,GcrA, constant
par kd_GcrA=0.022

# Parameter:   id =  ks_DnaA1, name = ks,DnaA1, constant
par ks_DnaA1=0.0031

# Parameter:   id =  ks_DnaA2, name = ks,DnaA2, constant
par ks_DnaA2=0.0022

# Parameter:   id =  kd_DnaA, name = kd,DnaA, constant
par kd_DnaA=0.007

# Parameter:   id =  ka_Ini, name = ka,Ini, constant
par ka_Ini=0.01

# Parameter:   id =  kelong, name = kelong, constant
par kelong=0.0065

# Parameter:   id =  ks_I, name = ks,I, constant
par ks_I=0.09

# Parameter:   id =  kd_I, name = kd,I, constant
par kd_I=0.04

# Parameter:   id =  ks_CcrM, name = ks,CcrM, constant
par ks_CcrM=0.072

# Parameter:   id =  kd_CcrM, name = kd,CcrM, constant
par kd_CcrM=0.07

# Parameter:   id =  km_Cori, name = km,Cori, constant
par km_Cori=0.4

# Parameter:   id =  km_ctrA, name = km,ctrA, constant
par km_ctrA=0.4

# Parameter:   id =  km_ccrM, name = km,ccrM, constant
par km_ccrM=0.4

# Parameter:   id =  km_ftsz, name = km,ftsz, constant
par km_ftsz=0.4

# Parameter:   id =  ks_PodJL, name = ks,PodJL, constant
par ks_PodJL=0.043

# Parameter:   id =  kd_PodJL1, name = kd,PodJL1, constant
par kd_PodJL1=0.05

# Parameter:   id =  kd_PodJL2, name = kd,PodJL2, constant
par kd_PodJL2=0.002

# Parameter:   id =  ksep_PodJL, name = ksep,PodJL, constant
par ksep_PodJ=0.3

# Parameter:   id =  ks_PerP, name = ks,PerP, constant
par ks_PerP=0.04

# Parameter:   id =  kd_PerP, name = kd,PerP, constant
par kd_PerP=0.02

# Parameter:   id =  ksep_PerP, name = ksep,PerP, constant
par ksep_PerP=0.011

# Parameter:   id =  ks_DivJ1, name = ks,DivJ1, constant
par ks_DivJ1=0.002

# Parameter:   id =  ks_DivJ2, name = ks,DivJ2, constant
par ks_DivJ2=0.025

# Parameter:   id =  kd_DivJ, name = kd,DivJ, constant
par kd_DivJ=0.002

# Parameter:   id =  ksep_divJ, name = ksep,divJ, constant
par ksep_divJ=0.3

# Parameter:   id =  ks_DivK, name = ks,DivK, constant
par ks_DivK=0.0024

# Parameter:   id =  kd_DivK, name = kd,DivK, constant
par kd_DivK=0.002

# Parameter:   id =  ktrans_DivK, name = ktrans,DivK, constant
par ktrans_Di=0.15

# Parameter:   id =  ktrans_DivK_P, name = ktrans,DivK_P, constant
par ktrans__2=0.6

# Parameter:   id =  ktrans_CckA_P, name = ktrans,CckA_P, constant
par ktrans_Cc=0.05

# Parameter:   id =  ktrans_CckA, name = ktrans,CckA, constant
par ktrans__3=0.2

# Parameter:   id =  ktrans_CpdR, name = ktrans,CpdR, constant
par ktrans_Cp=0.6

# Parameter:   id =  ktrans_CpdR_P, name = ktrans,CpdR_P, constant
par ktrans__4=0.5

# Parameter:   id =  ktrans_ParAATP, name = ktrans,ParAATP, constant
par ktrans_Pa=0.5

# Parameter:   id =  ktrans_ParAADP, name = ktrans,ParAADP, constant
par ktrans__5=0.8

# Parameter:   id =  ks_RcdA, name = ks,RcdA, constant
par ks_RcdA=0.023

# Parameter:   id =  kd_RcdA, name = kd,RcdA, constant
par kd_RcdA=0.017

# Parameter:   id =  ks_FtsQ, name = ks,FtsQ, constant
par ks_FtsQ=0.06

# Parameter:   id =  kd_FtsQ, name = kd,FtsQ, constant
par kd_FtsQ=0.035

# Parameter:   id =  ks_FtsZ, name = ks,FtsZ, constant
par ks_FtsZ=0.036

# Parameter:   id =  kd_FtsZ1, name = kd,FtsZ1, constant
par kd_FtsZ1=0.009

# Parameter:   id =  kd_FtsZ2, name = kd,FtsZ2, constant
par kd_FtsZ2=0.02

# Parameter:   id =  kd_FtsZ3, name = kd,FtsZ3, constant
par kd_FtsZ3=0.3

# Parameter:   id =  ks_Zring, name = ks,Zring, constant
par ks_Zring=0.035

# Parameter:   id =  kZ_open, name = kZ,open, constant
par kZ_open=0.8

# Parameter:   id =  kZ_closed1, name = kZ,closed1, constant
par kZ_closed=1.0E-4

# Parameter:   id =  kZ_closed2, name = kZ,closed2, constant
par kZ_clos_1=1.6

# Parameter:   id =  Ji_CtrA_CtrA_P, name = Ji,CtrA-CtrA_P, constant
par Ji_CtrA_C=0.4

# Parameter:   id =  Ja_CtrA_CtrA_P, name = Ja,CtrA-CtrA_P, constant
par Ja_CtrA_C=0.45

# Parameter:   id =  Jd_CtrA_DivK_P, name = Jd,CtrA-DivK_P, constant
par Jd_CtrA_D=0.55

# Parameter:   id =  jd_CtrA_CpdR, name = jd,CtrA-CpdR, constant
par jd_CtrA_C=0.6

# Parameter:   id =  jd_CtrA_RcdA, name = jd,CtrA-RcdA, constant
par jd_CtrA_R=0.5

# Parameter:   id =  Ji_GcrA_CtrA, name = Ji,GcrA-CtrA, constant
par Ji_GcrA_C=0.4

# Parameter:   id =  JiDnaA_GcrA, name = JiDnaA-GcrA, constant
par JiDnaA_Gc=0.6

# Parameter:   id =  Ja_Dna_CtrA_P, name = Ja,Dna-CtrA_P, constant
par Ja_Dna_Ct=0.3

# Parameter:   id =  Ja_i_CtrA_P, name = Ja,i-CtrA_P, constant
par Ja_i_CtrA=0.5

# Parameter:   id =  Jm_Cori, name = Jm,Cori, constant
par Jm_Cori=0.95

# Parameter:   id =  Jm_ctrA, name = Jm,ctrA, constant
par Jm_ctrA=0.95

# Parameter:   id =  jm_ccrM, name = jm,ccrM, constant
par jm_ccrM=0.95

# Parameter:   id =  Jm_ftsZ, name = Jm,ftsZ, constant
par Jm_ftsZ=0.95

# Parameter:   id =  Ji_PodJL_CtrA_P, name = Ji,PodJL-CtrA_P, constant
par Ji_PodJL_=0.6

# Parameter:   id =  Jd_PodJL_PerP, name = Jd,PodJL-PerP, constant
par Jd_PodJL_=0.45

# Parameter:   id =  jsep_PodJL, name = jsep,PodJL, constant
par jsep_PodJ=0.3

# Parameter:   id =  Jsep_PerP, name = Jsep,PerP, constant
par Jsep_PerP=0.3

# Parameter:   id =  Ji_DivJ_PodJL, name = Ji,DivJ-PodJL, constant
par Ji_DivJ_P=0.13

# Parameter:   id =  Jsep_DivJ, name = Jsep,DivJ, constant
par Jsep_DivJ=0.3

# Parameter:   id =  Ja_DivK, name = Ja,DivK, constant
par Ja_DivK=0.06

# Parameter:   id =  JDivk_P_PodJL, name = JDivk_P-PodJL, constant
par JDivk_P_P=0.3

# Parameter:   id =  JDivk_DivJ, name = JDivk-DivJ, constant
par JDivk_Div=0.3

# Parameter:   id =  Ji_Ccka_DivK_P, name = Ji,Ccka-DivK_P, constant
par Ji_Ccka_D=0.3

# Parameter:   id =  Ja_CpdR_CckA_P, name = Ja,CpdR-CckA_P, constant
par Ja_CpdR_C=0.8

# Parameter:   id =  Ja_RcdA_CtrA_P, name = Ja,RcdA-CtrA_P, constant
par Ja_RcdA_C=0.4

# Parameter:   id =  Ja_FtsQ_CtrA_P, name = Ja,FtsQ-CtrA_P, constant
par Ja_FtsQ_C=0.5

# Parameter:   id =  Ja_FtsQ_DNA, name = Ja,FtsQ,DNA, constant
par Ja_FtsQ_D=0.05

# Parameter:   id =  JiFtsZ_CtrA_P, name = JiFtsZ-CtrA_P, constant
par JiFtsZ_Ct=0.7

# Parameter:   id =  Ja_open, name = Ja,open, constant
par Ja_open=0.01

# Parameter:   id =  JZ_FtsQ, name = JZ-FtsQ, constant
par JZ_FtsQ=0.8

# Parameter:   id =  Ja_closed, name = Ja,closed, constant
par Ja_closed=0.05

# Parameter:   id =  thethaCtrA_P, name = thethaCtrA_P, constant
par thethaCtr=0.5

# Parameter:   id =  thethaGcrA, name = thethaGcrA, constant
par thethaGcr=0.65

# Parameter:   id =  thethaDnaA, name = thethaDnaA, constant
par thethaDna=0.65

# Parameter:   id =  thethaCori, name = thethaCori, constant
par thethaCor=0.05

# Parameter:   id =  thethaZring, name = thethaZring, constant
par thethaZri=0.3

# Parameter:   id =  thethaParAADP, name = thethaParAADP, constant
par thethaPar=0.3

# Parameter:   id =  Pelong, name = Pelong, constant
par Pelong=0.05

# Parameter:   id =  PccrM, name = PccrM, constant
par PccrM=0.2

# Parameter:   id =  PctrA, name = PctrA, constant
par PctrA=0.375

# Parameter:   id =  PftsZ, name = PftsZ, constant
par PftsZ=0.625

# Reaction: id = CtrA_synthesis_1, name = CtrA synthesis 1

CtrA_synt=Caulobact*function_(ks_CtrA_P, Ji_CtrA_C, CtrA_P, GcrA, hctrA)

# Reaction: id = CtrA_synthesis_2, name = CtrA synthesis 2

CtrA_sy_1=Caulobact*functio_1(ks_CtrA_1, Ja_CtrA_C, CtrA_P, hctrA)

# Reaction: id = CtrA_decay, name = CtrA decay

CtrA_deca=Caulobact*kd_CtrA1*CtrA

# Reaction: id = CtrA_degradation, name = CtrA degradation

CtrA_degr=Caulobact*functio_2(kd_CtrA2, DivK_P, Jd_CtrA_D, CpdR, jd_CtrA_C, RcdA, CtrA, jd_CtrA_R)

# Reaction: id = CtrA_dephosphorylation, name = CtrA dephosphorylation

CtrA_deph=Caulobact*ktrans_Ct*CtrA_P

# Reaction: id = CtrA_phosphorylation, name = CtrA phosphorylation

CtrA_phos=Caulobact*functio_3(ktrans__1, CtrA, CckA_P)

# Reaction: id = CtrA_P_degradation, name = CtrA_P degradation

CtrA_P_de=Caulobact*functio_2(kd_CtrA2, DivK_P, Jd_CtrA_D, CpdR, jd_CtrA_C, RcdA, CtrA_P, jd_CtrA_R)

# Reaction: id = CtrA_P_decay, name = CtrA_P decay

CtrA_P__1=Caulobact*kd_CtrA1*CtrA_P

# Reaction: id = DnaA_synthesis, name = DnaA synthesis

DnaA_synt=Caulobact*functio_4(ks_DnaA1, JiDnaA_Gc, GcrA, hcori)

# Reaction: id = DnaA_synthesis_2, name = DnaA synthesis 2

DnaA_sy_1=Caulobact*functio_5(ks_DnaA2, CtrA_P, Ja_Dna_Ct, hcori)

# Reaction: id = DnaA_decay, name = DnaA decay

DnaA_deca=Caulobact*kd_DnaA*DnaA

# Reaction: id = GcrA_synthesis, name = GcrA synthesis

GcrA_synt=Caulobact*functio_6(ks_GcrA, Ji_GcrA_C, CtrA_P, DnaA)

# Reaction: id = GcrA_decay, name = GcrA decay

GcrA_deca=Caulobact*kd_GcrA*GcrA

# Reaction: id = Initiation_of_replication, name = Initiation of replication

Initiatio=Caulobact*functio_7(ka_Ini, DnaA, thethaDna, GcrA, thethaGcr, CtrA_P, thethaCtr, hcori, thethaCor, Count)

# Reaction: id = Elongation, name = Elongation

Elongatio=Caulobact*functio_8(kelong, Elong, Pelong, Count)

# Reaction: id = DNA_synthesis, name = DNA synthesis

DNA_synth=Caulobact*functio_8(kelong, Elong, Pelong, Count)

# Reaction: id = Inermediate_synthesis, name = Inermediate synthesis

Inermedia=Caulobact*functio_1(ks_I, Ja_i_CtrA, CtrA_P, hccrM)

# Reaction: id = intermediate_decay, name = intermediate decay

intermedi=Caulobact*kd_I*I

# Reaction: id = CcrM_synthesis, name = CcrM synthesis

CcrM_synt=Caulobact*functio_9(ks_CcrM, I)

# Reaction: id = CcrM_decay, name = CcrM decay

CcrM_deca=Caulobact*kd_CcrM*CcrM

# Reaction: id = methylation_cori, name = methylation cori

methylati=Caulobact*functi_10(km_Cori, CcrM, Jm_Cori, hcori)

# Reaction: id = methylation_ctrA, name = methylation ctrA

methyla_1=Caulobact*functi_10(km_ctrA, CcrM, Jm_ctrA, hctrA)

# Reaction: id = methylation_ccrM, name = methylation ccrM

methyla_2=Caulobact*functi_10(km_ccrM, CcrM, jm_ccrM, hccrM)

# Reaction: id = methylation_ftsZ, name = methylation ftsZ

methyla_3=Caulobact*functi_10(km_ftsz, CcrM, Jm_ftsZ, hftsZ)

# Reaction: id = PodJL_synthesis, name = PodJL synthesis

PodJL_syn=Caulobact*function_(ks_PodJL, Ji_PodJL_, CtrA_P, GcrA, DnaA)

# Reaction: id = Podjl_decay, name = Podjl decay

Podjl_dec=Caulobact*kd_PodJL1*PodJL

# Reaction: id = PodJL_degradation, name = PodJL degradation

PodJL_deg=Caulobact*functio_1(kd_PodJL2, Jd_PodJL_, PerP, PodJL)

# Reaction: id = PodJL_degradation_2, name = PodJL degradation 2

PodJL_d_1=Caulobact*functi_11(ksep_PodJ, PodJL, H, Z, jsep_PodJ)

# Reaction: id = PerP_synthesis, name = PerP synthesis

PerP_synt=Caulobact*functio_3(ks_PerP, CtrA_P, PodJL)

# Reaction: id = PerP_decay, name = PerP decay

PerP_deca=Caulobact*kd_PerP*PerP

# Reaction: id = PerP_degradation, name = PerP degradation

PerP_degr=Caulobact*functi_11(ksep_PerP, PerP, H, Z, Jsep_PerP)

# Reaction: id = DivJ_synthesis, name = DivJ synthesis

DivJ_synt=Caulobact*Constant_(ks_DivJ1)

# Reaction: id = DivJ_synthesis2, name = DivJ synthesis2

DivJ_sy_1=Caulobact*functi_12(H, ks_DivJ2, Ji_DivJ_P, PodJL)

# Reaction: id = DivJ_decay, name = DivJ decay

DivJ_deca=Caulobact*kd_DivJ*DivJ

# Reaction: id = DivJ_degradation, name = DivJ degradation

DivJ_degr=Caulobact*functi_13(ksep_divJ, DivJ, H, Z, Jsep_DivJ)

# Reaction: id = DivK_synthesis, name = DivK synthesis

DivK_synt=Caulobact*functi_14(ks_DivK, CtrA_P, Ja_DivK)

# Reaction: id = DivK_decay, name = DivK decay

DivK_deca=Caulobact*kd_DivK*DivK

# Reaction: id = DivK_dephosphorylation, name = DivK dephosphorylation

DivK_deph=Caulobact*functi_15(ktrans__2, DivK_P, PodJL, JDivk_P_P, H, Z)

# Reaction: id = DivK_phosphorylation, name = DivK phosphorylation

DivK_phos=Caulobact*functi_16(ktrans_Di, DivK, DivJ, JDivk_Div, Z, H)

# Reaction: id = CckA_P_decay, name = CckA_P decay

CckA_P_de=Caulobact*ktrans_Cc*CckA_P

# Reaction: id = CckA_P_synthesis, name = CckA_P synthesis

CckA_P_sy=Caulobact*functi_17(ktrans__3, CckA_tot, CckA_P, Ji_Ccka_D, DivK_P)

# Reaction: id = CpdR_synthesis, name = CpdR synthesis

CpdR_synt=Caulobact*functi_18(ktrans__4, CpdR_tot, CpdR)

# Reaction: id = CpdR_degradation, name = CpdR degradation

CpdR_degr=Caulobact*functi_19(ktrans_Cp, CpdR, CckA_P, Ja_CpdR_C)

# Reaction: id = ParAADP_synthesis, name = ParAADP synthesis

ParAADP_s=Caulobact*functi_18(ktrans_Pa, ParA_tot, ParAADP)

# Reaction: id = parAADP_degradation, name = parAADP degradation

parAADP_d=Caulobact*functi_20(ktrans__5, Count, ParAADP)

# Reaction: id = RcdA_synthesis, name = RcdA synthesis

RcdA_synt=Caulobact*functi_14(ks_RcdA, CtrA_P, Ja_RcdA_C)

# Reaction: id = RcdA_decay, name = RcdA decay

RcdA_deca=Caulobact*kd_RcdA*RcdA

# Reaction: id = FtsQ_synthesis, name = FtsQ synthesis

FtsQ_synt=Caulobact*functi_21(ks_FtsQ, CtrA_P, Ja_FtsQ_C, hcori, Ja_FtsQ_D)

# Reaction: id = FtsQ_decay, name = FtsQ decay

FtsQ_deca=Caulobact*kd_FtsQ*FtsQ

# Reaction: id = FtsZ_synthesis, name = FtsZ synthesis

FtsZ_synt=Caulobact*functi_22(ks_FtsZ, JiFtsZ_Ct, CtrA_P, DnaA, hftsZ)

# Reaction: id = FtsZ_decay, name = FtsZ decay

FtsZ_deca=Caulobact*kd_FtsZ1*FtsZ

# Reaction: id = FtsZ_degradation_1, name = FtsZ degradation 1

FtsZ_degr=Caulobact*functi_23(kd_FtsZ2, Zring, FtsZ)

# Reaction: id = FtsZ_degradation_2, name = FtsZ degradation 2

FtsZ_de_1=Caulobact*functi_23(kd_FtsZ3, Z, FtsZ)

# Reaction: id = Zring_closing, name = Zring closing

Zring_clo=Caulobact*functi_23(ks_Zring, Zring, FtsZ)

# Reaction: id = Z_synthesis, name = Z synthesis

Z_synthes=Caulobact*functi_24(kZ_open, Z, Ja_open)

# Reaction: id = Z_degrdataion, name = Z degrdataion

Z_degrdat=Caulobact*functi_25(kZ_closed, kZ_clos_1, FtsQ, JZ_FtsQ, Zring, thethaZri, ParAADP, thethaPar, Z, Ja_closed)

# Reaction: id = DivK_P_decay, name = DivK_P decay

DivK_P_de=Caulobact*kd_DivK*DivK_P

# Species:   id = DnaA, name = DnaA, affected by kineticLaw

init DnaA=0.78
dDnaA/dt=(1/(Caulobact))*(( 1.0 * DnaA_synt) + ( 1.0 * DnaA_sy_1) + (-1.0 * DnaA_deca))

# Species:   id = GcrA, name = GcrA, affected by kineticLaw

init GcrA=0.65
dGcrA/dt=(1/(Caulobact))*(( 1.0 * GcrA_synt) + (-1.0 * GcrA_deca))

# Species:   id = CtrA, name = CtrA, affected by kineticLaw

init CtrA=0.04
dCtrA/dt=(1/(Caulobact))*(( 1.0 * CtrA_synt) + ( 1.0 * CtrA_sy_1) + (-1.0 * CtrA_deca) + (-1.0 * CtrA_degr) + ( 1.0 * CtrA_deph) + (-1.0 * CtrA_phos))

# Species:   id = CtrA_P, name = CtrA_P, affected by kineticLaw

init CtrA_P=0.08
dCtrA_P/dt=(1/(Caulobact))*((-1.0 * CtrA_deph) + ( 1.0 * CtrA_phos) + (-1.0 * CtrA_P_de) + (-1.0 * CtrA_P__1))

# Species:   id = DivK, name = DivK, affected by kineticLaw

init DivK=0.66
dDivK/dt=(1/(Caulobact))*(( 1.0 * DivK_synt) + (-1.0 * DivK_deca) + ( 1.0 * DivK_deph) + (-1.0 * DivK_phos))

# Species:   id = DivK_P, name = DivK_P, affected by kineticLaw

init DivK_P=0.34
dDivK_P/dt=(1/(Caulobact))*((-1.0 * DivK_deph) + ( 1.0 * DivK_phos) + (-1.0 * DivK_P_de))

# Species:   id = I, name = I, affected by kineticLaw

init I=0.09
dI/dt=(1/(Caulobact))*(( 1.0 * Inermedia) + (-1.0 * intermedi))

# Species:   id = CcrM, name = CcrM, affected by kineticLaw

init CcrM=0.15
dCcrM/dt=(1/(Caulobact))*(( 1.0 * CcrM_synt) + (-1.0 * CcrM_deca))

# Species:   id = hcori, name = hcori, affected by kineticLaw
# Species is changed by 2 event(s)
init hcori=1.0
dhcori/dt=(1/(Caulobact))*((-1.0 * methylati))

# Species:   id = hctrA, name = hctrA, affected by kineticLaw
# Species is changed by 1 event(s)
init hctrA=0.0
dhctrA/dt=(1/(Caulobact))*((-1.0 * methyla_1))

# Species:   id = hccrM, name = hccrM, affected by kineticLaw
# Species is changed by 1 event(s)
init hccrM=0.0
dhccrM/dt=(1/(Caulobact))*((-1.0 * methyla_2))

# Species:   id = hftsZ, name = hftsZ, affected by kineticLaw
# Species is changed by 1 event(s)
init hftsZ=0.0
dhftsZ/dt=(1/(Caulobact))*((-1.0 * methyla_3))

# Species:   id = Ini, name = Ini, affected by kineticLaw
# Species is changed by 1 event(s)
init Ini=0.0
dIni/dt=(1/(Caulobact))*(( 1.0 * Initiatio))

# Species:   id = DNA, name = DNA, affected by kineticLaw
# Species is changed by 2 event(s)
init DNA=1.05
dDNA/dt=(1/(Caulobact))*(( 1.0 * DNA_synth))

# Species:   id = Count, name = Count
# Warning species is not changed by either rules or reactions
# Species is changed by 2 event(s)
par Count=2.0
aux Count=Count

# Species:   id = PodJL, name = PodJL, affected by kineticLaw

init PodJL=0.2
dPodJL/dt=(1/(Caulobact))*(( 1.0 * PodJL_syn) + (-1.0 * Podjl_dec) + (-1.0 * PodJL_deg) + (-1.0 * PodJL_d_1))

# Species:   id = PerP, name = PerP, affected by kineticLaw

init PerP=0.55
dPerP/dt=(1/(Caulobact))*(( 1.0 * PerP_synt) + (-1.0 * PerP_deca) + (-1.0 * PerP_degr))

# Species:   id = DivJ, name = DivJ, affected by kineticLaw

init DivJ=1.0
dDivJ/dt=(1/(Caulobact))*(( 1.0 * DivJ_synt) + ( 1.0 * DivJ_sy_1) + (-1.0 * DivJ_deca) + (-1.0 * DivJ_degr))

# Species:   id = CckA_P, name = CckA_P, affected by kineticLaw

init CckA_P=0.76
dCckA_P/dt=(1/(Caulobact))*((-1.0 * CckA_P_de) + ( 1.0 * CckA_P_sy))

# Species:   id = CpdR, name = CpdR, affected by kineticLaw

init CpdR=0.66
dCpdR/dt=(1/(Caulobact))*(( 1.0 * CpdR_synt) + (-1.0 * CpdR_degr))

# Species:   id = RcdA, name = RcdA, affected by kineticLaw

init RcdA=0.74
dRcdA/dt=(1/(Caulobact))*(( 1.0 * RcdA_synt) + (-1.0 * RcdA_deca))

# Species:   id = ParAADP, name = ParAADP, affected by kineticLaw

init ParAADP=1.0
dParAADP/dt=(1/(Caulobact))*(( 1.0 * ParAADP_s) + (-1.0 * parAADP_d))

# Species:   id = FtsZ, name = FtsZ, affected by kineticLaw

init FtsZ=0.53
dFtsZ/dt=(1/(Caulobact))*(( 1.0 * FtsZ_synt) + (-1.0 * FtsZ_deca) + (-1.0 * FtsZ_degr) + (-1.0 * FtsZ_de_1))

# Species:   id = Zring, name = Zring, affected by kineticLaw
# Species is changed by 1 event(s)
init Zring=0.04
dZring/dt=(1/(Caulobact))*(( 1.0 * Zring_clo))

# Species:   id = CckA_tot, name = CckA_tot
# Warning species is not changed by either rules or reactions

par CckA_tot=1.3
aux CckA_tot=CckA_tot

# Species:   id = CpdR_tot, name = CpdR_tot
# Warning species is not changed by either rules or reactions

par CpdR_tot=1.0
aux CpdR_tot=CpdR_tot

# Species:   id = ParA_tot, name = ParA_tot
# Warning species is not changed by either rules or reactions

par ParA_tot=1.0
aux ParA_tot=ParA_tot

# Species:   id = Elong, name = Elong, affected by kineticLaw
# Species is changed by 3 event(s)
init Elong=0.05
dElong/dt=(1/(Caulobact))*(( 1.0 * Elongatio))

# Species:   id = Z, name = Z, affected by kineticLaw

init Z=1.0
dZ/dt=(1/(Caulobact))*(( 1.0 * Z_synthes) + (-1.0 * Z_degrdat))

# Species:   id = FtsQ, name = FtsQ, affected by kineticLaw

init FtsQ=0.2
dFtsQ/dt=(1/(Caulobact))*(( 1.0 * FtsQ_synt) + (-1.0 * FtsQ_deca))

# event : Ini_equal_0_05Count
Ini_equal=if (Ini >= (0.05*Count)) then (1.5) else (0.2)
global 1 {Ini_equal - 1.1} {Count=Count*2;Elong=Elong+Ini;DNA=DNA+Ini;Ini=0;hcori=1}

# event : Z_equals_0
Z_equals_=if (Z <= 0.1) then (1.5) else (0.2)
global 1 {Z_equals_ - 1.1} {Count=Count/2;Zring=0;Elong=Elong/2;DNA=DNA/2}

# event : Elong_reset_by_count
Elong_res=if (Elong >= (Count/2)) then (1.5) else (0.2)
global 1 {Elong_res - 1.1} {Elong=0}

# event : hcori_reset_by_Elong
hcori_res=if ((Elong*2) >= (Pelong*Count)) then (1.5) else (0.2)
global 1 {hcori_res - 1.1} {hcori=1}

# event : hctrA_reset_by_Elong
hctrA_res=if ((Elong*2) >= (PctrA*Count)) then (1.5) else (0.2)
global 1 {hctrA_res - 1.1} {hctrA=1}

# event : hccrM_reset_by_Elong
hccrM_res=if ((Elong*2) >= (PccrM*Count)) then (1.5) else (0.2)
global 1 {hccrM_res - 1.1} {hccrM=1}

# event : hftsZ_reset_by_Elong
hftsZ_res=if ((Elong*2) >= (PftsZ*Count)) then (1.5) else (0.2)
global 1 {hftsZ_res - 1.1} {hftsZ=1}

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

