
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Sneyd2002_IP3_Receptor
#
# is http://identifiers.org/biomodels.db/MODEL9098147664
# is http://identifiers.org/biomodels.db/BIOMD0000000057
# isDescribedBy http://identifiers.org/pubmed/11842185
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  open_probability, name = open_probability, defined by a Rule

# Parameter:   id =  Phi1, name = Phi1, defined by a Rule

# Parameter:   id =  k1, name = k1, constant
par k1=0.64

# Parameter:   id =  L1, name = L1, constant
par L1=0.12

# Parameter:   id =  l2, name = l2, constant
par l2=1.7

# Parameter:   id =  lminus2, name = lminus2, constant
par lminus2=0.8

# Parameter:   id =  c, name = c, constant
par c=10.0

# Parameter:   id =  L3, name = L3, constant
par L3=0.025

# Parameter:   id =  Phi2, name = Phi2, defined by a Rule

# Parameter:   id =  k2, name = k2, constant
par k2=37.4

# Parameter:   id =  l4, name = l4, constant
par l4=1.7

# Parameter:   id =  Phi_minus2, name = Phi_minus2, defined by a Rule

# Parameter:   id =  kminus1, name = kminus1, constant
par kminus1=0.04

# Parameter:   id =  kminus2, name = kminus2, constant
par kminus2=1.4

# Parameter:   id =  kminus3, name = kminus3, constant
par kminus3=29.8

# Parameter:   id =  lminus4, name = lminus4, constant
par lminus4=2.5

# Parameter:   id =  L5, name = L5, constant
par L5=54.7

# Parameter:   id =  Phi3, name = Phi3, defined by a Rule

# Parameter:   id =  k3, name = k3, constant
par k3=0.11

# Parameter:   id =  Phi4, name = Phi4, defined by a Rule

# Parameter:   id =  k4, name = k4, constant
par k4=4.0

# Parameter:   id =  l6, name = l6, constant
par l6=4707.0

# Parameter:   id =  Phi_minus4, name = Phi_minus4, defined by a Rule

# Parameter:   id =  kminus4, name = kminus4, constant
par kminus4=0.54

# Parameter:   id =  lminus6, name = lminus6, constant
par lminus6=11.4

# Parameter:   id =  Phi5, name = Phi5, defined by a Rule

# Parameter:   id =  IP3, name = IP3, constant
par IP3=10.0

# assignmentRule: variable = open_probability
open_prob=(0.1*O+0.9*A)^4
aux open_prob=open_prob

# assignmentRule: variable = Phi1
Phi1=(k1*L1+l2)*c/(L1+c*(1+L1/L3))
aux Phi1=Phi1

# assignmentRule: variable = Phi2
Phi2=(k2*L3+l4*c)/(L3+c*(1+L3/L1))
aux Phi2=Phi2

# assignmentRule: variable = Phi_minus2
Phi_minus=(kminus2+lminus4*c)/(1+c/L5)
aux Phi_minus=Phi_minus

# assignmentRule: variable = Phi3
Phi3=k3*L5/(L5+c)
aux Phi3=Phi3

# assignmentRule: variable = Phi4
Phi4=(k4*L5+l6)*c/(L5+c)
aux Phi4=Phi4

# assignmentRule: variable = Phi_minus4
Phi_min_1=L1*(kminus4+lminus6)/(L1+c)
aux Phi_min_1=Phi_min_1

# assignmentRule: variable = Phi5
Phi5=(k1*L1+l2)*c/(L1+c)
aux Phi5=Phi5

# Reaction: id = v1, name = Receptor-Open state transition
# Local Parameter:   id =  IP3, name = IP3
par IP3_1=10.0


v1=compartme*(Phi2*IP3_1*R-Phi_minus*O)

# Reaction: id = v2, name = Receptor-Inactivated state 1 transition
# Local Parameter:   id =  kminus1, name = kminus1
par kminus1_1=0.04

# Local Parameter:   id =  lminus2, name = lminus2
par lminus2_1=0.8


v2=compartme*(Phi1*R-(kminus1_1+lminus2_1)*I1)

# Reaction: id = v3, name = Open-Shut state transition
# Local Parameter:   id =  kminus3, name = kminus3
par kminus3_1=29.8


v3=compartme*(Phi3*O-kminus3_1*S)

# Reaction: id = v4, name = Open-Activated state transition

v4=compartme*(Phi4*O-Phi_min_1*A)

# Reaction: id = v5, name = Activated-Inactivated state 2 transition
# Local Parameter:   id =  kminus1, name = kminus1
par kminus1_2=0.04

# Local Parameter:   id =  lminus2, name = lminus2
par lminus2_2=0.8


v5=compartme*(Phi5*A-(kminus1_2+lminus2_2)*I2)

# Species:   id = R, name = Receptor, affected by kineticLaw

init R=1.0
dR/dt=(1/(compartme))*((-1.0 * v1) + (-1.0 * v2))

# Species:   id = O, name = Open State, affected by kineticLaw

init O=0.0
dO/dt=(1/(compartme))*(( 1.0 * v1) + (-1.0 * v3) + (-1.0 * v4))

# Species:   id = I1, name = Inactivated State 1, affected by kineticLaw

init I1=0.0
dI1/dt=(1/(compartme))*(( 1.0 * v2))

# Species:   id = S, name = Shut State, affected by kineticLaw

init S=0.0
dS/dt=(1/(compartme))*(( 1.0 * v3))

# Species:   id = A, name = Activated State, affected by kineticLaw

init A=0.0
dA/dt=(1/(compartme))*(( 1.0 * v4) + (-1.0 * v5))

# Species:   id = I2, name = Inactivated State 2, affected by kineticLaw

init I2=0.0
dI2/dt=(1/(compartme))*(( 1.0 * v5))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

