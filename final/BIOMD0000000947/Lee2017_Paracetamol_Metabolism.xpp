
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Lee2017 - Paracetamol first-pass metabolism PK model
#
# is http://identifiers.org/biomodels.db/MODEL1803050002
# is http://identifiers.org/biomodels.db/BIOMD0000000947
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = Apical, name = Apical, constant
par Apical=1.0

# Compartment: id = Caco_2, name = Caco-2, constant
par Caco_2=1.0

# Compartment: id = Basolateral___HepG2, name = Basolateral + HepG2, constant
par Basolater=1.0

# Parameter:   id =  P_para, name = P_para, constant
par P_para=103.8

# Parameter:   id =  Ai, name = Ai, constant
par Ai=0.33

# Parameter:   id =  Mp_s_caco, name = Mp_s_caco, constant
par Mp_s_caco=14.9

# Parameter:   id =  Mp_g_caco, name = Mp_g_caco, constant
par Mp_g_caco=17.6

# Parameter:   id =  V_api, name = V_api, defined by a Rule

# Parameter:   id =  V_caco, name = V_caco, defined by a Rule

# Parameter:   id =  Mp_s_HepG2, name = Mp_s_HepG2, constant
par Mp_s_HepG=0.35

# Parameter:   id =  V_basol, name = V_basol, defined by a Rule

# Parameter:   id =  P_sulf, name = P_sulf, constant
par P_sulf=49.9

# Parameter:   id =  P_glu, name = P_glu, constant
par P_glu=58.9

# Parameter:   id =  Mp_g_HepG2, name = Mp_g_HepG2, constant
par Mp_g_HepG=0.59

# Parameter:   id =  time_threshold, name = time_threshold, constant
par time_thre=6.0

# assignmentRule: variable = V_api
V_api= piecew1 
aux V_api=V_api

# assignmentRule: variable = V_caco
V_caco= piecew2 
aux V_caco=V_caco

# assignmentRule: variable = V_basol
V_basol= piecew3 
aux V_basol=V_basol

# rateRule: variable = C_para_Apical
init C_para_Ap=2500.0
dC_para_Ap/dt=(-1)*P_para*Ai*(C_para_Ap-C_para_Ca)/V_api

# rateRule: variable = C_para_Caco_2
init C_para_Ca=1.0E-15
dC_para_Ca/dt=(P_para*Ai*(C_para_Ap-C_para_Ca)-P_para*Ai*(C_para_Ca-C_para__B)-Mp_s_caco*C_para_Ca*V_caco-Mp_g_caco*C_para_Ca*V_caco)/V_caco

# rateRule: variable = C_para__Basolateral___HepG2_
init C_para__B=5.0
dC_para__B/dt=(P_para*Ai*(C_para_Ca-C_para__B)-Mp_s_HepG*C_para__B*V_basol-Mp_g_HepG*C_para__B*V_basol)/V_basol

# rateRule: variable = C_sulf_Apical
init C_sulf_Ap=1.0E-15
dC_sulf_Ap/dt=(-1)*P_sulf*Ai*(C_sulf_Ap-C_sulf_Ca)/V_api

# rateRule: variable = C_sulf_Caco_2
init C_sulf_Ca=1.0E-15
dC_sulf_Ca/dt=(P_sulf*Ai*(C_sulf_Ap-C_sulf_Ca)-P_sulf*Ai*(C_sulf_Ca-C_sulf__B)+Mp_s_caco*C_para_Ca*V_caco)/V_caco

# rateRule: variable = C_sulf__Basolateral___HepG2_
init C_sulf__B=1.0E-15
dC_sulf__B/dt=(P_sulf*Ai*(C_sulf_Ca-C_sulf__B)+Mp_s_HepG*C_para__B*V_basol)/V_basol

# rateRule: variable = C_glu_Apical
init C_glu_Api=1.0E-15
dC_glu_Api/dt=(-1)*P_glu*Ai*(C_glu_Api-C_glu_Cac)/V_api

# rateRule: variable = C_glu_Caco_2
init C_glu_Cac=1.0E-15
dC_glu_Cac/dt=(P_glu*Ai*(C_glu_Api-C_glu_Cac)-P_glu*Ai*(C_glu_Cac-C_glu__Ba)+Mp_g_caco*C_para_Ca*V_caco)/V_caco

# rateRule: variable = C_glu__Basolateral___HepG2_
init C_glu__Ba=1.0E-15
dC_glu__Ba/dt=(P_glu*Ai*(C_glu_Cac-C_glu__Ba)+Mp_g_HepG*C_para__B*V_basol)/V_basol

# Species:   id = C_para_Apical, name = C_para, involved in a rule 

# Species:   id = C_para_Caco_2, name = C_para, involved in a rule 

# Species:   id = C_para__Basolateral___HepG2_, name = C_para, involved in a rule 

# Species:   id = C_sulf_Apical, name = C_sulf, involved in a rule 

# Species:   id = C_sulf_Caco_2, name = C_sulf, involved in a rule 

# Species:   id = C_sulf__Basolateral___HepG2_, name = C_sulf, involved in a rule 

# Species:   id = C_glu_Apical, name = C_glu, involved in a rule 

# Species:   id = C_glu_Caco_2, name = C_glu, involved in a rule 

# Species:   id = C_glu__Basolateral___HepG2_, name = C_glu, involved in a rule 


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if (t  <=  time_thre) then (500) else (400)

piecew2=if (t  <=  time_thre) then (0.33) else (0.33)

piecew3=if (t  <=  time_thre) then (380) else (280)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

