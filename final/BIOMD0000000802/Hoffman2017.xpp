
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Hoffman2018- ADCC against cancer
#
# isDescribedBy http://identifiers.org/pubmed/28970093
# is http://identifiers.org/biomodels.db/MODEL1908200002
# is http://identifiers.org/biomodels.db/BIOMD0000000802
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = ad, name = ad
ad(a2,y,R,S)=(a2*y*R*S)


# FunctionDefinition id = aa, name = aa
aa(a1,R,A,S)=(a1*(1-R)*A*S)


# FunctionDefinition id = rf, name = rf
rf(a1,y,R,A)=(a1/y*(1-R)*A)


# FunctionDefinition id = ck, name = ck
ck(f,C)=(f*C)


# FunctionDefinition id = cf, name = cf
cf(v1,u,C,S)=(v1*(u-C)*(S-C))


# Compartment: id = tme, name = tme, constant
par tme=1.0

# Parameter:   id =  a1, name = a1, constant
par a1=0.001

# Parameter:   id =  a2, name = a2, constant
par a2=1.44

# Parameter:   id =  y, name = y, defined by a Rule

# Parameter:   id =  f, name = f, defined by a Rule

# Parameter:   id =  v1, name = v1, constant
par v1=120.0

# Parameter:   id =  u, name = u, constant
par u=20.0

# Parameter:   id =  v2, name = v2, constant
par v2=14.4

# Parameter:   id =  fk, name = fk, constant
par fk=1.0

# Parameter:   id =  rk, name = rk, constant
par rk=0.5

# Parameter:   id =  e, name = e, defined by a Rule

# Parameter:   id =  n, name = n, constant
par n=0.0

# assignmentRule: variable = f
f=fk*R/(R+rk)
aux f=f

# assignmentRule: variable = e
e=a1
aux e=e

# assignmentRule: variable = y
y=e^n
aux y=y

# Reaction: id = antibody_association, name = antibody association

antibody_=tme*aa(a1, R, A, S)

# Reaction: id = antibody_dissociation, name = antibody dissociation

antibod_1=tme*ad(a2, y, R, S)

# Reaction: id = complex_formation, name = complex formation

complex_f=tme*rf(a1, y, R, A)

# Reaction: id = complex_dissociation, name = complex dissociation

complex_d=tme*a2*R

# Reaction: id = cancer_cell_killing_C, name = cancer cell killing-C

cancer_ce=tme*f*C

# Reaction: id = NK_complex_formation, name = NK complex formation

NK_comple=tme*cf(v1, u, C, S)

# Reaction: id = NK_complex_degradation, name = NK complex degradation

NK_comp_1=tme*v2*C

# Reaction: id = cancer_cell_killing_S, name = cancer cell killing-S

cancer__1=tme*ck(f, C)

# Species:   id = A, name = A, affected by kineticLaw

init A=1.0
dA/dt=(1/(tme))*((-1.0 * antibody_) + ( 1.0 * antibod_1))

# Species:   id = R, name = R, affected by kineticLaw

init R=0.0
dR/dt=(1/(tme))*(( 1.0 * complex_f) + (-1.0 * complex_d))

# Species:   id = S, name = S, affected by kineticLaw

init S=1.0
dS/dt=(1/(tme))*((-1.0 * cancer__1))

# Species:   id = C, name = C, affected by kineticLaw

init C=0.0
dC/dt=(1/(tme))*((-1.0 * cancer_ce) + ( 1.0 * NK_comple) + (-1.0 * NK_comp_1))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

