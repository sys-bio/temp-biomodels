
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Wolf2000 - Cellular interaction on glycolytic oscillations in yeast
#
# is http://identifiers.org/biomodels.db/MODEL1006230022
# isDescribedBy http://identifiers.org/pubmed/10702114
# is http://identifiers.org/biomodels.db/BIOMD0000000691
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = function_for_v2, name = function for v2
function_(k2,S2,N1)=(k2*S2*N1)


# FunctionDefinition id = function_for_d_dt_S4_ex, name = function for d/dt(S4_ex)
functio_1(phi,J1,J2)=(phi/2*(J1+J2))


# FunctionDefinition id = function_for_v1, name = function for v1
functio_2(k1,S1,A3,K_I,q)=(k1*S1*A3*(1+(A3/K_I)^q)^(-1))


# FunctionDefinition id = function_for_v3, name = function for v3
functio_3(k3,S3,A2)=(k3*S3*A2)


# Compartment: id = Cell_1, name = Cell 1, constant
par Cell_1=1.0

# Compartment: id = Cell_2, name = Cell 2, constant
par Cell_2=1.0

# Compartment: id = Compartment, name = Compartment, constant
par Compartme=1.0

# Parameter:   id =  k1, name = k1, constant
par k1=100.0

# Parameter:   id =  K_I, name = K_I, constant
par K_I=0.52

# Parameter:   id =  q, name = q, constant
par q=4.0

# Parameter:   id =  k2, name = k2, constant
par k2=6.0

# Parameter:   id =  k3, name = k3, constant
par k3=16.0

# Parameter:   id =  k4, name = k4, constant
par k4=100.0

# Parameter:   id =  k5, name = k5, constant
par k5=1.28

# Parameter:   id =  k6, name = k6, constant
par k6=12.0

# Parameter:   id =  k, name = k, constant
par k=1.5

# Parameter:   id =  J0, name = J0, constant
par J0=3.0

# Parameter:   id =  J_cell_1, name = J_cell_1, defined by a Rule

# Parameter:   id =  j_cell_2, name = j_cell_2, defined by a Rule

# Parameter:   id =  kappa, name = kappa, constant
par kappa=13.0

# Parameter:   id =  phi, name = phi, constant
par phi=0.1

# assignmentRule: variable = j_cell_2
j_cell_2=kappa*(S4__Cel_1-S4_ex)
aux j_cell_2=j_cell_2

# assignmentRule: variable = J_cell_1
J_cell_1=kappa*(S4__Cell_-S4_ex)
aux J_cell_1=J_cell_1

# assignmentRule: variable = N1__Cell_2_
N1__Cel_1=N-N2__Cel_1
aux N1__Cel_1=N1__Cel_1

# assignmentRule: variable = N1__Cell_1_
N1__Cell_=N-N2__Cell_
aux N1__Cell_=N1__Cell_

# assignmentRule: variable = A2__Cell_1_
A2__Cell_=A-A3__Cell_
aux A2__Cell_=A2__Cell_

# assignmentRule: variable = A2__Cell_2_
A2__Cel_1=A-A3__Cel_1
aux A2__Cel_1=A2__Cel_1

# Reaction: id = v1_cell_1, name = v1_cell_1

v1_cell_1=Cell_1*functio_2(k1, S1__Cell_, A3__Cell_, K_I, q)

# Reaction: id = v1_cell_2, name = v1_cell_2

v1_cell_2=Cell_2*functio_2(k1, S1__Cel_1, A3__Cel_1, K_I, q)

# Reaction: id = v2_cell_1, name = v2_cell_1

v2_cell_1=Cell_1*function_(k2, S2__Cell_, N1__Cell_)

# Reaction: id = v2_cell_2, name = v2_cell_2

v2_cell_2=Cell_2*function_(k2, S2__Cel_1, N1__Cel_1)

# Reaction: id = v3_cell_1, name = v3_cell_1

v3_cell_1=Cell_1*functio_3(k3, S3__Cell_, A2__Cell_)

# Reaction: id = v3_cell_2, name = v3_cell_2

v3_cell_2=Cell_2*functio_3(k3, S3__Cel_1, A2__Cel_1)

# Reaction: id = v4_cell_1, name = v4_cell_1

v4_cell_1=Cell_1*k4*S4__Cell_*N2__Cell_

# Reaction: id = v4_cell_2, name = v4_cell_2

v4_cell_2=Cell_2*k4*S4__Cel_1*N2__Cel_1

# Reaction: id = v5_cell_1, name = v5_cell_1

v5_cell_1=Cell_1*k5*A3__Cell_

# Reaction: id = v5_cell_2, name = v5_cell_2

v5_cell_2=Cell_2*k5*A3__Cel_1

# Reaction: id = v6_cell_1, name = v6_cell_1

v6_cell_1=Cell_1*k6*S2__Cell_*N2__Cell_

# Reaction: id = v6_cell_2, name = v6_cell_2

v6_cell_2=Cell_2*k6*S2__Cel_1*N2__Cel_1

# Reaction: id = v7, name = v7

v7=Compartme*k*S4_ex

# Reaction: id = S1_cell_1_glucose_influx, name = S1_cell_1 glucose influx

S1_cell_1=Cell_1*Constant_(J0)

# Reaction: id = S1_cell_2_glucose_influx, name = S1_cell_2 glucose influx

S1_cell_2=Cell_2*Constant_(J0)

# Reaction: id = S4_cell_1_export, name = S4_cell_1 export

S4_cell_1=Cell_1*Constant_(J_cell_1)

# Reaction: id = S4_cell_2_export, name = S4_cell_2 export

S4_cell_2=Cell_2*Constant_(j_cell_2)

# Reaction: id = S4_ex_import, name = S4_ex import

S4_ex_imp=Compartme*functio_1(phi, J_cell_1, j_cell_2)

# Species:   id = S1__Cell_1_, name = S1, affected by kineticLaw

par S1__Cell_=5.8
aux S1__Cell_=S1__Cell_
dS1__Cell_/dt=(1/(Cell_1))*((-1.0 * v1_cell_1) + ( 1.0 * S1_cell_1))

# Species:   id = S1__Cell_2_, name = S1, affected by kineticLaw

par S1__Cel_1=2.9
aux S1__Cel_1=S1__Cel_1
dS1__Cel_1/dt=(1/(Cell_2))*((-1.0 * v1_cell_2) + ( 1.0 * S1_cell_2))

# Species:   id = S2__Cell_1_, name = S2, affected by kineticLaw

par S2__Cell_=0.9
aux S2__Cell_=S2__Cell_
dS2__Cell_/dt=(1/(Cell_1))*(( 2.0 * v1_cell_1) + (-1.0 * v2_cell_1) + (-1.0 * v6_cell_1))

# Species:   id = S2__Cell_2_, name = S2, affected by kineticLaw

par S2__Cel_1=0.45
aux S2__Cel_1=S2__Cel_1
dS2__Cel_1/dt=(1/(Cell_2))*(( 2.0 * v1_cell_2) + (-1.0 * v2_cell_2) + (-1.0 * v6_cell_2))

# Species:   id = S3__Cell_1_, name = S3, affected by kineticLaw

par S3__Cell_=0.2
aux S3__Cell_=S3__Cell_
dS3__Cell_/dt=(1/(Cell_1))*(( 1.0 * v2_cell_1) + (-1.0 * v3_cell_1))

# Species:   id = S3__Cell_2_, name = S3, affected by kineticLaw

par S3__Cel_1=0.1
aux S3__Cel_1=S3__Cel_1
dS3__Cel_1/dt=(1/(Cell_2))*(( 1.0 * v2_cell_2) + (-1.0 * v3_cell_2))

# Species:   id = S4__Cell_1_, name = S4, affected by kineticLaw

par S4__Cell_=0.2
aux S4__Cell_=S4__Cell_
dS4__Cell_/dt=(1/(Cell_1))*(( 1.0 * v3_cell_1) + (-1.0 * v4_cell_1) + (-1.0 * S4_cell_1))

# Species:   id = S4__Cell_2_, name = S4, affected by kineticLaw

par S4__Cel_1=0.1
aux S4__Cel_1=S4__Cel_1
dS4__Cel_1/dt=(1/(Cell_2))*(( 1.0 * v3_cell_2) + (-1.0 * v4_cell_2) + (-1.0 * S4_cell_2))

# Species:   id = N2__Cell_1_, name = N2, affected by kineticLaw

par N2__Cell_=0.1
aux N2__Cell_=N2__Cell_
dN2__Cell_/dt=(1/(Cell_1))*(( 1.0 * v2_cell_1) + (-1.0 * v4_cell_1) + (-1.0 * v6_cell_1))

# Species:   id = N2__Cell_2_, name = N2, affected by kineticLaw

par N2__Cel_1=0.05
aux N2__Cel_1=N2__Cel_1
dN2__Cel_1/dt=(1/(Cell_2))*(( 1.0 * v2_cell_2) + (-1.0 * v4_cell_2) + (-1.0 * v6_cell_2))

# Species:   id = A3__Cell_1_, name = A3, affected by kineticLaw

par A3__Cell_=3.2
aux A3__Cell_=A3__Cell_
dA3__Cell_/dt=(1/(Cell_1))*((-2.0 * v1_cell_1) + ( 2.0 * v3_cell_1) + (-1.0 * v5_cell_1))

# Species:   id = A3__Cell_2_, name = A3, affected by kineticLaw

par A3__Cel_1=0.2
aux A3__Cel_1=A3__Cel_1
dA3__Cel_1/dt=(1/(Cell_2))*((-2.0 * v1_cell_2) + ( 2.0 * v3_cell_2) + (-1.0 * v5_cell_2))

# Species:   id = S4_ex, name = S4_ex, affected by kineticLaw

init S4_ex=0.1
dS4_ex/dt=(1/(Compartme))*((-1.0 * v7) + ( 1.0 * S4_ex_imp))

# Species:   id = A, name = A, constant
par A=4.0


# Species:   id = N, name = N, constant
par N=1.0


# Species:   id = N1__Cell_1_, name = N1, involved in a rule 

# Species:   id = N1__Cell_2_, name = N1, involved in a rule 

# Species:   id = A2__Cell_1_, name = A2, involved in a rule 

# Species:   id = A2__Cell_2_, name = A2, involved in a rule 

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

