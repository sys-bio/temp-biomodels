
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = DeVries2000_PancreaticBetaCells_InsulinSecretion
#
# is http://identifiers.org/biomodels.db/MODEL0911270002
# is http://identifiers.org/biomodels.db/BIOMD0000000371
# isDescribedBy http://identifiers.org/pubmed/11093836
# isDerivedFrom http://identifiers.org/pubmed/2850029
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = Compartment, name = Compartment, constant
par Compartme=1.0

# Parameter:   id =  tau_membrane, name = tau, constant
par tau_membr=20.0

# Parameter:   id =  i_Ca, name = i_Ca, defined by a Rule

# Parameter:   id =  g_Ca, name = g_Ca, constant
par g_Ca=3.6

# Parameter:   id =  V_Ca, name = V_Ca, constant
par V_Ca=25.0

# Parameter:   id =  m_infinity, name = m_infinity, defined by a Rule

# Parameter:   id =  V_m, name = V_m, constant
par V_m=-20.0

# Parameter:   id =  theta_m, name = theta_m, constant
par theta_m=12.0

# Parameter:   id =  i_K, name = i_K, defined by a Rule

# Parameter:   id =  V_K, name = V_K, constant
par V_K=-75.0

# Parameter:   id =  g_K, name = g_K, constant
par g_K=10.0

# Parameter:   id =  n_infinity, name = n_infinity, defined by a Rule

# Parameter:   id =  V_n, name = V_n, constant
par V_n=-17.0

# Parameter:   id =  theta_n, name = theta_n, constant
par theta_n=5.6

# Parameter:   id =  lamda, name = lamda, constant
par lamda=0.8

# Parameter:   id =  tau_potassium_current_n_gate, name = tau_2, constant
par tau_potas=20.0

# Parameter:   id =  i_s, name = i_s, defined by a Rule

# Parameter:   id =  g_s, name = g_s, constant
par g_s=4.0

# Parameter:   id =  s_infinity, name = s_infinity, defined by a Rule

# Parameter:   id =  V_s, name = V_s, constant
par V_s=-22.0

# Parameter:   id =  theta_s, name = theta_s, constant
par theta_s=8.0

# Parameter:   id =  tau_s, name = tau_s, constant
par tau_s=20000.0

# Parameter:   id =  i_K_ATP, name = i_K_ATP, defined by a Rule

# Parameter:   id =  g_K_ATP, name = g_K_ATP, constant
par g_K_ATP=1.2

# Parameter:   id =  p, name = p, constant
par p=0.5

# assignmentRule: variable = m_infinity
m_infinit=1/(1+exp((V_m-V_membran)/theta_m))
aux m_infinit=m_infinit

# assignmentRule: variable = i_Ca
i_Ca=g_Ca*m_infinit*(V_membran-V_Ca)
aux i_Ca=i_Ca

# assignmentRule: variable = i_K
i_K=g_K*n*(V_membran-V_K)
aux i_K=i_K

# assignmentRule: variable = n_infinity
n_infinit=1/(1+exp((V_n-V_membran)/theta_n))
aux n_infinit=n_infinit

# assignmentRule: variable = i_s
i_s=g_s*s*(V_membran-V_K)
aux i_s=i_s

# assignmentRule: variable = s_infinity
s_infinit=1/(1+exp((V_s-V_membran)/theta_s))
aux s_infinit=s_infinit

# assignmentRule: variable = i_K_ATP
i_K_ATP=g_K_ATP*p*(V_membran-V_K)
aux i_K_ATP=i_K_ATP

# rateRule: variable = V_membrane
init V_membran=-65.0
dV_membran/dt=(-(i_Ca+i_K+i_K_ATP+i_s))/tau_membr

# rateRule: variable = n
init n=0.05
dn/dt=lamda*(n_infinit-n)/tau_potas

# rateRule: variable = s
init s=0.025
ds/dt=(s_infinit-s)/tau_s

# Species:   id = V_membrane, name = V_membrane, defined in a rule 

# Species:   id = n, name = n, defined in a rule 

# Species:   id = s, name = s, defined in a rule 

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

