
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Arnold2011_Zhu2009_CalvinCycle
#
# is http://identifiers.org/biomodels.db/MODEL1109270004
# is http://identifiers.org/biomodels.db/BIOMD0000000388
# isDescribedBy http://identifiers.org/pubmed/22001849
# is http://identifiers.org/kegg.pathway/ko00710
# is http://identifiers.org/go/GO:0019253
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = function_1, name = Henri-Michaelis-Menten (irreversible)
function_(substrate,Km,V)=(V*substrate/(Km+substrate))


# FunctionDefinition id = function_2, name = MM s2 - reg
functio_1(Vm,s1,s2,K1,K2)=(Vm*s1*s2/((s1+K1)*(s2+K2)))


# Compartment: id = chloroplast, name = chloroplast, constant
par chloropla=1.0

# assignmentRule: variable = Pi
Pi_ren=15-2*(RuBP+DPGA+ATP)-(PGA+GAP+Ru5P+ADP)
aux Pi_ren=Pi_ren

# Reaction: id = RuBisCO, name = RuBisCO
# Local Parameter:   id =  Km, name = Km
par Km=1.0

# Local Parameter:   id =  V, name = V
par V=3.78


RuBisCO=chloropla*function_(RuBP, Km, V)

# Reaction: id = PGA_K, name = PGA kinase
# Local Parameter:   id =  Vm, name = Vm
par Vm=11.75

# Local Parameter:   id =  K1, name = K1
par K1=0.24

# Local Parameter:   id =  K2, name = K2
par K2=0.39


PGA_K=chloropla*functio_1(Vm, PGA, ATP, K1, K2)

# Reaction: id = GAP_DH, name = GAP dehydrogenase
# Local Parameter:   id =  Km, name = Km
par Km_1=0.5

# Local Parameter:   id =  V, name = V
par V_1=5.04


GAP_DH=chloropla*function_(DPGA, Km_1, V_1)

# Reaction: id = GAP2Ru5P, name = GAP to Ru5P
# Local Parameter:   id =  Km, name = Km
par Km_1_2=0.84

# Local Parameter:   id =  V, name = V
par V_1_2=3.05


GAP2Ru5P=chloropla*function_(GAP, Km_1_2, V_1_2)

# Reaction: id = Ru5P_K, name = Ru5P kinase
# Local Parameter:   id =  Vm, name = Vm
par Vm_1=8.0

# Local Parameter:   id =  K1, name = K1
par K1_1=0.15

# Local Parameter:   id =  K2, name = K2
par K2_1=0.059


Ru5P_K=chloropla*functio_1(Vm_1, Ru5P, ATP, K1_1, K2_1)

# Reaction: id = PGA2sink, name = PGA to sink
# Local Parameter:   id =  Km, name = Km
par Km_1_2_3=0.75

# Local Parameter:   id =  V, name = V
par V_1_2_3=3.0


PGA2sink=chloropla*function_(PGA, Km_1_2_3, V_1_2_3)

# Reaction: id = GAP2sink, name = GAP to sink
# Local Parameter:   id =  Km, name = Km
par Km_1_2__4=5.0

# Local Parameter:   id =  V, name = V
par V_1_2_3_4=0.1


GAP2sink=chloropla*function_(GAP, Km_1_2__4, V_1_2_3_4)

# Species:   id = RuBP, name = RuBP, affected by kineticLaw

init RuBP=2.0
dRuBP/dt=(1/(chloropla))*((-1.0 * RuBisCO) + ( 1.0 * Ru5P_K))

# Species:   id = PGA, name = PGA, affected by kineticLaw

init PGA=2.4
dPGA/dt=(1/(chloropla))*(( 2.0 * RuBisCO) + (-1.0 * PGA_K) + (-1.0 * PGA2sink))

# Species:   id = DPGA, name = DPGA, affected by kineticLaw

init DPGA=0.0011
dDPGA/dt=(1/(chloropla))*(( 1.0 * PGA_K) + (-1.0 * GAP_DH))

# Species:   id = GAP, name = GAP, affected by kineticLaw

init GAP=0.02
dGAP/dt=(1/(chloropla))*(( 1.0 * GAP_DH) + (-1.0 * GAP2Ru5P) + (-1.0 * GAP2sink))

# Species:   id = Ru5P, name = Ru5P, affected by kineticLaw

init Ru5P=0.0501
dRu5P/dt=(1/(chloropla))*(( 0.6 * GAP2Ru5P) + (-1.0 * Ru5P_K))

# Species:   id = ADP, name = ADP, constant
par ADP=0.82


# Species:   id = ATP, name = ATP, constant
par ATP=0.68


# Species:   id = Pi, name = Pi, involved in a rule 

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

