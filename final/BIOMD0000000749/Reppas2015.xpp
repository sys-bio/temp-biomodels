
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Reppas2015 - tumor control via alternating immunostimulating and immunosuppressive phases
#
# isDescribedBy http://identifiers.org/pubmed/26305801
# is http://identifiers.org/biomodels.db/MODEL1907110002
# is http://identifiers.org/biomodels.db/BIOMD0000000749
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = effector_exhaustion_0, name = effector exhaustion
effector_(d1,E,R,f)=(d1*E*R*R*R*f)


# FunctionDefinition id = tumor_death_0, name = tumor death
tumor_dea(la,R)=(la*R/3)


# FunctionDefinition id = stimulation, name = stimulation
stimulati(r,R,E,k)=(r*R*R*R*E/(k+R*R*R))


# FunctionDefinition id = killing, name = killing
killing(c,E,R,f)=(c*E*R*f)


# FunctionDefinition id = tumor_growth_0, name = tumor growth
tumor_gro(lm,B,R)=(lm*B*R/3)


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = nutrience, name = nutrience+
nutrience(lm,B,ld,R)=(lm*(1-B)*ld/tanh(R/ld))


# FunctionDefinition id = nutrience_0, name = nutrience-
nutrien_1(lm,b,ld,R)=(lm*(1-b)*ld*ld/R)


# Compartment: id = tumor_microenvironment, name = tumor microenvironment, constant
par tumor_mic=1.0

# Parameter:   id =  B, name = B, constant
par B=0.5

# Parameter:   id =  lm, name = lm, constant
par lm=1.34

# Parameter:   id =  la, name = la, constant
par la=0.14

# Parameter:   id =  ld, name = ld, constant
par ld=0.3

# Parameter:   id =  c, name = c, constant
par c=0.03

# Parameter:   id =  k, name = k, constant
par k=2.72

# Parameter:   id =  d1, name = d1, constant
par d1=0.01

# Parameter:   id =  d0, name = d0, constant
par d0=0.37

# Parameter:   id =  sigma, name = sigma, constant
par sigma=13000.0

# Parameter:   id =  r, name = r, constant
par r=0.57

# assignmentRule: variable = E_0
E_0=E/100000
aux E_0=E_0

# assignmentRule: variable = f
f=R_1^(B-1)/(R_1^(B-1)+1)
aux f=f

# Reaction: id = tumor_growth, name = tumor growth

tumor_g_1=tumor_mic*tumor_gro(lm, B, R_1)

# Reaction: id = tumor_death, name = tumor death

tumor_d_1=tumor_mic*tumor_dea(la, R_1)

# Reaction: id = tumor_killing, name = tumor killing

tumor_kil=tumor_mic*killing(c, E_0, R_1, f)

# Reaction: id = tumor_nutrient_supply, name = tumor nutrient supply

tumor_nut=tumor_mic*nutrience(lm, B, ld, R_1)

# Reaction: id = effector_stimulation, name = effector stimulation

effecto_1=tumor_mic*stimulati(r, R_1, E, k)

# Reaction: id = effector_exhaustion, name = effector exhaustion

effecto_2=tumor_mic*effector_(d1, E, R_1, f)

# Reaction: id = effector_death, name = effector death

effecto_3=tumor_mic*d0*E

# Reaction: id = effector_source, name = effector source

effecto_4=tumor_mic*Constant_(sigma)

# Reaction: id = tumor_nutrient_missuply, name = tumor nutrient missuply

tumor_n_1=tumor_mic*nutrien_1(lm, B, ld, R_1)

# Species:   id = E, name = E, affected by kineticLaw

init E=1000000.0
dE/dt=(1/(tumor_mic))*(( 1.0 * effecto_1) + (-1.0 * effecto_2) + (-1.0 * effecto_3) + ( 1.0 * effecto_4))

# Species:   id = R, name = R, affected by kineticLaw

par R_1=2.0
aux R_1=R_1
dR_1/dt=(1/(tumor_mic))*(( 1.0 * tumor_g_1) + (-1.0 * tumor_d_1) + (-1.0 * tumor_kil) + ( 1.0 * tumor_nut) + (-1.0 * tumor_n_1))

# Species:   id = f, name = f, involved in a rule 

# Species:   id = E_0, name = E', involved in a rule 

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

