
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Heiland2012_CircadianClock_C.reinhardtii
#
# is http://identifiers.org/biomodels.db/MODEL1201130000
# is http://identifiers.org/biomodels.db/BIOMD0000000411
# isDescribedBy http://identifiers.org/pubmed/23729908
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = function_2, name = arhenius neg feedb tempvar
function_(v,E,R,T2,T1,k,S,h)=(v*exp(E/R*(T2-T1)/(T1*T2))/(k+S^h))


# FunctionDefinition id = function_1, name = arhenius mass action tempvar
functio_1(v,E,R,T2,T1,S)=(v*exp(E/R*(T2-T1)/(T1*T2))*S)


# FunctionDefinition id = function_4, name = arhenius tranls temp var
functio_2(v,E,R,T2,T1,S)=(v*exp(E/R*(T2-T1)/(T1*T2))*S)


# FunctionDefinition id = function_3, name = arhenius michaelis menten temp var
functio_3(v,E,R,T2,T1,S,Km)=(v*exp(E/R*(T2-T1)/(T1*T2))*S/(Km+S))


# FunctionDefinition id = function_5, name = arhenius complexf temp var
functio_4(v,E,R,T2,T1,S1,S2,a)=(v*exp(E/R*(T2-T1)/(T1*T2))*S1*S2^a)


# Compartment: id = default, name = default, constant
par default=1.0

# Parameter:   id =  T, name = T, constant
par T_renamed=291.0

# Parameter:   id =  T2, name = T2, defined by a Rule

# Parameter:   id =  parameter_1, name = v_phos, constant
par parameter=1.0

# Parameter:   id =  parameter_2, name = V_dephos, constant
par paramet_1=0.5

# Parameter:   id =  parameter_3, name = R, constant
par paramet_2=8.31447

# Parameter:   id =  parameter_4, name = amplitude, constant
par paramet_3=10.0

# Parameter:   id =  parameter_5, name = entrperiod, constant
par paramet_4=24.0

# Parameter:   id =  parameter_6, name = EAlow, defined by a Rule

# Parameter:   id =  parameter_7, name = EAhigh, defined by a Rule

# Parameter:   id =  parameter_8, name = vphosdegr, constant
par paramet_7=1.0

# Parameter:   id =  parameter_9, name = Ephos, constant
par paramet_8=60000.0

# Parameter:   id =  parameter_10, name = Edephos, constant
par paramet_9=67000.0

# assignmentRule: variable = T2
T2=296+paramet_3/2*sin(2*pi*t/paramet_4)
aux T2=T2

# assignmentRule: variable = parameter_6
paramet_5=50000
aux paramet_5=paramet_5

# assignmentRule: variable = parameter_7
paramet_6=84000
aux paramet_6=paramet_6

# Reaction: id = re12, name = C3_phos
# Local Parameter:   id =  v, name = v
par v=0.1


re12=default*functio_1(v, paramet_5, paramet_2, T2, T_renamed, s10)

# Reaction: id = re13, name = C3_transk
# Local Parameter:   id =  v, name = v
par v_1=2.6

# Local Parameter:   id =  k, name = k
par k=0.4

# Local Parameter:   id =  h, name = h
par h=2.0


re13=default*function_(v_1, paramet_6, paramet_2, T2, T_renamed, k, s11, h)

# Reaction: id = re14, name = C3_mRNADegr
# Local Parameter:   id =  v, name = v
par v_1_2=3.0

# Local Parameter:   id =  Km, name = Km
par Km=2.0


re14=default*functio_3(v_1_2, paramet_5, paramet_2, T2, T_renamed, s9, Km)

# Reaction: id = re15, name = C3_degr
# Local Parameter:   id =  v, name = v
par v_1_2_3=2.2

# Local Parameter:   id =  Km, name = Km
par Km_1=0.2


re15=default*functio_3(v_1_2_3, paramet_5, paramet_2, T2, T_renamed, s10, Km_1)

# Reaction: id = re16, name = C3_phos_degr
# Local Parameter:   id =  v, name = v
par v_1_2_3_4=1.5

# Local Parameter:   id =  Km, name = Km
par Km_1_2=1.4


re16=default*functio_3(v_1_2_3_4, paramet_5, paramet_2, T2, T_renamed, s11, Km_1_2)

# Reaction: id = re18, name = C3_transl
# Local Parameter:   id =  v, name = v
par v_1_2_3_5=5.0


re18=default*functio_2(v_1_2_3_5, paramet_6, paramet_2, T2, T_renamed, s9)

# Reaction: id = reaction_1, name = C1_transl
# Local Parameter:   id =  v, name = v
par v_1_2_3_6=19.0

# Local Parameter:   id =  E, name = E
par E=67000.0


reaction_=default*functio_1(v_1_2_3_6, E, paramet_2, T2, T_renamed, species_2)

# Reaction: id = reaction_2, name = complexformation
# Local Parameter:   id =  v, name = v
par v_1_2_3_7=10.0

# Local Parameter:   id =  a, name = a
par a=2.0


reactio_1=default*functio_4(v_1_2_3_7, paramet_6, paramet_2, T2, T_renamed, species_3, s11, a)

# Reaction: id = reaction_3, name = C1_phos

reactio_2=default*functio_1(parameter, paramet_8, paramet_2, T2, T_renamed, species_1)

# Reaction: id = reaction_4, name = C1_degr
# Local Parameter:   id =  v, name = v
par v_1_2_3_8=30.0

# Local Parameter:   id =  E, name = E
par E_1=67000.0

# Local Parameter:   id =  Km, name = Km
par Km_1_2_3=2.0


reactio_3=default*functio_3(v_1_2_3_8, E_1, paramet_2, T2, T_renamed, species_1, Km_1_2_3)

# Reaction: id = reaction_5, name = complexdegr
# Local Parameter:   id =  v, name = v
par v_1_2_3_9=20.0

# Local Parameter:   id =  E, name = E
par E_1_2=67000.0

# Local Parameter:   id =  Km, name = Km
par Km_1_2__4=4.0


reactio_4=default*functio_3(v_1_2_3_9, E_1_2, paramet_2, T2, T_renamed, species_4, Km_1_2__4)

# Reaction: id = reaction_6, name = C1_dephos

reactio_5=default*functio_1(paramet_1, paramet_9, paramet_2, T2, T_renamed, species_3)

# Reaction: id = reaction_7, name = C1_phos_degr
# Local Parameter:   id =  E, name = E
par E_1_2_3=67000.0

# Local Parameter:   id =  Km, name = Km
par Km_1_2__5=1.0


reactio_6=default*functio_3(paramet_7, E_1_2_3, paramet_2, T2, T_renamed, species_3, Km_1_2__5)

# Species:   id = s2, name = C3_Gene, constant
par s2=1.0


# Species:   id = s9, name = C3_mRNA, affected by kineticLaw

init s9=1.0
ds9/dt=(1/(default))*(( 1.0 * re13) + (-1.0 * re14))

# Species:   id = s10, name = C_3, affected by kineticLaw

init s10=1.0
ds10/dt=(1/(default))*((-1.0 * re12) + (-1.0 * re15) + ( 1.0 * re18))

# Species:   id = s11, name = C_3_P, affected by kineticLaw

init s11=1.0
ds11/dt=(1/(default))*(( 1.0 * re12) + (-1.0 * re16) + (-1.0 * reactio_1))

# Species:   id = s13, name = C_3_pre, constant
par s13=1.0


# Species:   id = species_1, name = C1, affected by kineticLaw

init species_1=1.0
dspecies_1/dt=(1/(default))*(( 1.0 * reaction_) + (-1.0 * reactio_2) + (-1.0 * reactio_3) + ( 1.0 * reactio_5))

# Species:   id = species_2, name = C1_mRNA, constant
par species_2=1.0


# Species:   id = species_3, name = C1_phos, affected by kineticLaw

init species_3=1.0
dspecies_3/dt=(1/(default))*((-1.0 * reactio_1) + ( 1.0 * reactio_2) + (-1.0 * reactio_5) + (-1.0 * reactio_6))

# Species:   id = species_4, name = c1c3complex, affected by kineticLaw

init species_4=1.0
dspecies_4/dt=(1/(default))*(( 1.0 * reactio_1) + (-1.0 * reactio_4))

# Species:   id = species_12, name = junk, affected by kineticLaw

par species_5=1.0
aux species_5=species_5
dspecies_5/dt=(1/(default))*(( 1.0 * re14) + ( 1.0 * re15) + ( 1.0 * re16) + ( 1.0 * reactio_3) + ( 1.0 * reactio_4) + ( 1.0 * reactio_6))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

