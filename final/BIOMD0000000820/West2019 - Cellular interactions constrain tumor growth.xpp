
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = West2019 - Cellular interactions constrain tumor growth
#
# is http://identifiers.org/biomodels.db/MODEL1909240001
# is http://identifiers.org/biomodels.db/BIOMD0000000820
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_exponential_linear_growth, name = Function for exponential-linear growth
Function_(alpha_0,n,alpha_1)=(alpha_0*n+alpha_1)


# FunctionDefinition id = Function_for_generalized_logistic_growth, name = Function for generalized logistic growth
Functio_1(alpha,n,K,v)=(alpha*n*(1-(n/K)^v))


# FunctionDefinition id = Function_for_Gompertz_growth, name = Function for Gompertz growth
Functio_2(alpha,n,K)=(alpha*n*log(K)-alpha*n*log(n))


# FunctionDefinition id = Function_for_Von_Bertalanffy_equation, name = Function for Von Bertalanffy equation
Functio_3(a,n,gamma,b)=(a*n^gamma-b*n)


# FunctionDefinition id = Function_for_exponential_growth, name = Function for exponential growth
Functio_4(alpha_0,n)=(alpha_0*n)


# FunctionDefinition id = Function_for_power_law_model, name = Function for power law model
Functio_5(a,n,gamma)=(a*n^gamma)


# FunctionDefinition id = Function_for_logistic_growth, name = Function for logistic growth
Functio_6(alpha,n,K)=(alpha*n*(1-n/K))


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  alpha_0, name = alpha_0, constant
par alpha_0=1.0

# Parameter:   id =  alpha_1, name = alpha_1, constant
par alpha_1=10000.0

# Parameter:   id =  tau, name = tau, constant
par tau=10.0

# Parameter:   id =  alpha_1_variable, name = alpha_1 variable
par alpha_1_v=0.0

# Parameter:   id =  alpha_0_variable, name = alpha_0 variable
par alpha_0_v=1.0

# Parameter:   id =  alpha, name = alpha, constant
par alpha=1.0

# Parameter:   id =  K, name = K, constant
par K=100.0

# Parameter:   id =  nu, name = nu, constant
par nu=0.3

# Parameter:   id =  a, name = a, constant
par a=4.0

# Parameter:   id =  b, name = b, constant
par b=0.2

# Parameter:   id =  gamma, name = gamma, defined by a Rule

# assignmentRule: variable = gamma
gamma=2/3
aux gamma=gamma

# Reaction: id = exponential_linear_growth, name = exponential-linear growth

exponenti=compartme*Function_(alpha_0_v, tumor_at_, alpha_1_v)

# Reaction: id = generalized_logistic_growth, name = generalized logistic growth

generaliz=compartme*Functio_1(alpha, tumor_a_1, K, nu)

# Reaction: id = Gompertz_growth, name = Gompertz growth

Gompertz_=compartme*Functio_2(alpha, tumor_a_2, K)

# Reaction: id = power_law_model, name = power law model

power_law=compartme*Functio_5(a, tumor_a_3, gamma)

# Reaction: id = Von_Bertalanffy_equation, name = Von Bertalanffy equation

Von_Berta=compartme*Functio_3(a, tumor_a_4, gamma, b)

# Reaction: id = exponential_growth, name = exponential growth

exponen_1=compartme*Functio_4(alpha_0, tumor_a_5)

# Reaction: id = logistic_growth, name = logistic growth

logistic_=compartme*Functio_6(alpha, tumor_a_6, K)

# Species:   id = tumor_at_Exp_Lin_growth, name = tumor at Exp-Lin growth, affected by kineticLaw

par tumor_at_=1.0
aux tumor_at_=tumor_at_
dtumor_at_/dt=(1/(compartme))*(( 1.0 * exponenti))

# Species:   id = tumor_at_Gen__logistic_growth, name = tumor at Gen. logistic growth, affected by kineticLaw

par tumor_a_1=1.0
aux tumor_a_1=tumor_a_1
dtumor_a_1/dt=(1/(compartme))*(( 1.0 * generaliz))

# Species:   id = tumor_at_Gomp__growth, name = tumor at Gomp. growth, affected by kineticLaw

par tumor_a_2=1.0
aux tumor_a_2=tumor_a_2
dtumor_a_2/dt=(1/(compartme))*(( 1.0 * Gompertz_))

# Species:   id = tumor_at_Power_growth, name = tumor at Power growth, affected by kineticLaw

par tumor_a_3=1.0
aux tumor_a_3=tumor_a_3
dtumor_a_3/dt=(1/(compartme))*(( 1.0 * power_law))

# Species:   id = tumor_at_Von_Bert__growth, name = tumor at Von Bert. growth, affected by kineticLaw

par tumor_a_4=1.0
aux tumor_a_4=tumor_a_4
dtumor_a_4/dt=(1/(compartme))*(( 1.0 * Von_Berta))

# Species:   id = tumor_at_Exp_growth, name = tumor at Exp growth, affected by kineticLaw

par tumor_a_5=1.0
aux tumor_a_5=tumor_a_5
dtumor_a_5/dt=(1/(compartme))*(( 1.0 * exponen_1))

# Species:   id = tumor_at_Logistic_growth, name = tumor at Logistic growth, affected by kineticLaw

par tumor_a_6=1.0
aux tumor_a_6=tumor_a_6
dtumor_a_6/dt=(1/(compartme))*(( 1.0 * logistic_))

# event : exponential_model_switch
exponen_2=if (t > tau) then (1.5) else (0.2)
global 1 {exponen_2 - 1.1} {alpha_1_variable=alpha_1_v+alpha_1;alpha_0_variable=alpha_0_v-alpha_0}

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

