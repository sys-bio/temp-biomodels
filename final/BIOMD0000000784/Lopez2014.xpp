
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Lopez2014 - A Validated Mathematical Model of Tumor Growth Including Tumor-Host Interaction and Cell-Mediated Immune Response
#
# isDescribedBy http://identifiers.org/pubmed/25348062
# isDerivedFrom http://identifiers.org/pubmed/16140967
# is http://identifiers.org/biomodels.db/MODEL1908090001
# is http://identifiers.org/biomodels.db/BIOMD0000000784
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = Function_for_Healthy_Cells_Competition_Tumor, name = Function_for_Healthy_Cells_Competition_Tumor
Function_(a_21,x,y)=(a_21*x*y)


# FunctionDefinition id = Function_for_Effector_Competition_Tumor, name = Function_for_Effector_Competition_Tumor
Functio_1(a_31,x,z)=(a_31*x*z)


# FunctionDefinition id = Function_for_Tumor_Competition_Healthy_Cells, name = Function_for_Tumor_Competition_Healthy_Cells
Functio_2(a_12,y,x)=(a_12*y*x)


# FunctionDefinition id = Function_for_Tumor_Growth, name = Function_for_Tumor_Growth
Functio_3(x)=(x*(1-x))


# FunctionDefinition id = Function_for_Helper_Cells_Production, name = Function_for_Helper_Cells_Production
Functio_4(r_2,y)=(r_2*y*(1-y))


# FunctionDefinition id = Function_for_Effector_Recruitment, name = Function_for_Effector_Recruitment
Functio_5(g,D_x_z,x,h)=(g*D_x_z^2*x^2/(h+D_x_z^2*x^2))


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  a_12, name = a_12, constant
par a_12=0.195

# Parameter:   id =  d, name = d, constant
par d=5.0

# Parameter:   id =  lambda, name = lambda, constant
par lambda=0.21

# Parameter:   id =  s, name = s, constant
par s=11.5

# Parameter:   id =  r_2, name = r_2, constant
par r_2=0.35

# Parameter:   id =  a_21, name = a_21, constant
par a_21=0.954

# Parameter:   id =  d_3, name = d_3, constant
par d_3=0.112

# Parameter:   id =  g, name = g, constant
par g=0.29

# Parameter:   id =  h, name = h, constant
par h=7.95E-11

# Parameter:   id =  a_31, name = a_31, constant
par a_31=5.25

# Parameter:   id =  D_x_z, name = D_x_z, defined by a Rule

# Parameter:   id =  h_x, name = h_x, defined by a Rule

# Parameter:   id =  ModelValue_1, name = Initial for d, constant
par ModelValu=5.0

# Parameter:   id =  ModelValue_2, name = Initial for lambda, constant
par ModelVa_1=0.21

# Parameter:   id =  ModelValue_3, name = Initial for s, constant
par ModelVa_2=11.5

# assignmentRule: variable = h_x
h_x=ModelVa_2*x_Tumor_C^ModelVa_1
aux h_x=h_x

# assignmentRule: variable = D_x_z
D_x_z=ModelValu*z_Effecto^ModelVa_1/(h_x+z_Effecto^ModelVa_1)
aux D_x_z=D_x_z

# Reaction: id = Tumor_Growth, name = Tumor_Growth

Tumor_Gro=compartme*Functio_3(x_Tumor_C)

# Reaction: id = Tumor_Competition_Healthy_Cells, name = Tumor_Competition_Healthy_Cells

Tumor_Com=compartme*Functio_2(a_12, y_Healthy, x_Tumor_C)

# Reaction: id = Tumor_Killing, name = Tumor_Killing

Tumor_Kil=compartme*D_x_z*x_Tumor_C

# Reaction: id = Healthy_Cells_Production, name = Healthy_Cells_Production

Healthy_C=compartme*Functio_4(r_2, y_Healthy)

# Reaction: id = Healthy_Cells_Competition_Tumor, name = Healthy_Cells_Competition_Tumor

Healthy_1=compartme*Function_(a_21, x_Tumor_C, y_Healthy)

# Reaction: id = Effector_Production_Constant, name = Effector_Production_Constant
# Local Parameter:   id =  v, name = v
par v=1.0


Effector_=compartme*Constant_(v)

# Reaction: id = Effector_Death, name = Effector_Death

Effecto_1=compartme*d_3*z_Effecto

# Reaction: id = Effector_Recruitment, name = Effector_Recruitment

Effecto_2=compartme*Functio_5(g, D_x_z, x_Tumor_C, h)

# Reaction: id = Effector_Competition_Tumor, name = Effector_Competition_Tumor

Effecto_3=compartme*Functio_1(a_31, x_Tumor_C, z_Effecto)

# Species:   id = x_Tumor_Cells, name = x_Tumor_Cells, affected by kineticLaw

par x_Tumor_C=0.1
aux x_Tumor_C=x_Tumor_C
dx_Tumor_C/dt=(1/(compartme))*(( 1.0 * Tumor_Gro) + (-1.0 * Tumor_Com) + (-1.0 * Tumor_Kil))

# Species:   id = y_Healthy_Cells, name = y_Healthy_Cells, affected by kineticLaw

par y_Healthy=0.9
aux y_Healthy=y_Healthy
dy_Healthy/dt=(1/(compartme))*(( 1.0 * Healthy_C) + (-1.0 * Healthy_1))

# Species:   id = z_Effector_Cells, name = z_Effector_Cells, affected by kineticLaw

par z_Effecto=0.2
aux z_Effecto=z_Effecto
dz_Effecto/dt=(1/(compartme))*(( 1.0 * Effector_) + (-1.0 * Effecto_1) + ( 1.0 * Effecto_2) + (-1.0 * Effecto_3))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

