
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Arnold2011_Sharkey2007_RuBisCO-CalvinCycle
#
# is http://identifiers.org/biomodels.db/MODEL1109270002
# is http://identifiers.org/biomodels.db/BIOMD0000000386
# isDescribedBy http://identifiers.org/pubmed/22001849
# is http://identifiers.org/go/GO:0019253
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = oxygenation, name = Oxygenation
oxygenati(phi,Vc,Vj,Vp)=(phi*((Vc+Vj-abs(Vc-Vj))/2+Vp-abs((Vc+Vj-abs(Vc-Vj))/2-Vp))/2)


# FunctionDefinition id = PGA_consumption, name = PGA consumption
PGA_consu(S1,Rp,R,Nt,Vc)=(S1/Rp*R/Nt*Vc)


# FunctionDefinition id = NADPH_production, name = NADPH production
NADPH_pro(j,S1,Nt)=(j/2*S1/Nt)


# FunctionDefinition id = carboxylation, name = Carboxylation
carboxyla(Vc,Vj,Vp)=(((Vc+Vj-abs(Vc-Vj))/2+Vp-abs((Vc+Vj-abs(Vc-Vj))/2-Vp))/2)


# Compartment: id = chloroplast, name = chloroplast, constant
par chloropla=1.0

# Parameter:   id =  Rp, name = Rp, constant
par Rp=3.2

# Parameter:   id =  Nt, name = Nt, constant
par Nt=0.5

# Parameter:   id =  Rd, name = Rd, constant
par Rd=0.0307674936008629

# Parameter:   id =  J, name = J, constant
par J=0.0307678189755062

# Parameter:   id =  gm, name = gm, constant
par gm=0.0307740792044142

# Parameter:   id =  Gamma, name = Gamma, constant
par Gamma=3.74116898182615

# Parameter:   id =  Vcmax, name = Vcmax, constant
par Vcmax=0.0307602623029146

# Parameter:   id =  Kc, name = Kc, constant
par Kc=27.2372124161502

# Parameter:   id =  Ko, name = Ko, constant
par Ko=16.5788431231261

# Parameter:   id =  phi, name = phi, defined by a Rule

# Parameter:   id =  TPU, name = TPU, constant
par TPU=0.0307585098788555

# Parameter:   id =  v_c, name = v_c, defined by a Rule

# Parameter:   id =  Vj, name = Vj, defined by a Rule

# Parameter:   id =  Vp, name = Vp, defined by a Rule

# Parameter:   id =  Vc, name = Vc, defined by a Rule

# assignmentRule: variable = Vj
Vj=J/4*(CO2-1/2*(CO2+2*Gamma+(J-4*Rd)/(4*gm)-((CO2+2*Gamma+(J-4*Rd)/(4*gm))^2+4/gm*(Rd*(CO2+2*Gamma)+J/4*(Gamma-CO2)))^(0.5)))/(CO2-1/2*(CO2+2*Gamma+(J-4*Rd)/(4*gm)-((CO2+2*Gamma+(J-4*Rd)/(4*gm))^2+4/gm*(Rd*(CO2+2*Gamma)+J/4*(Gamma-CO2)))^(0.5))+2*Gamma)
aux Vj=Vj

# assignmentRule: variable = NADP
NADP=Nt-NADPH
aux NADP=NADP

# assignmentRule: variable = Vp
Vp=3*TPU*(CO2-(3*TPU-Rd)/gm)/(CO2-(3*TPU-Rd)/gm-Gamma)
aux Vp=Vp

# assignmentRule: variable = Vc
Vc=Vcmax*(CO2-1/2*(CO2+Kc*(1+O2/Ko)+(Vcmax-Rd)/gm-((CO2+Kc*(1+O2/Ko)+(Vcmax-Rd)/gm)^2+4/gm*(Rd*(CO2+Kc*(1+O2/Ko))+Vcmax*(Gamma-CO2)))^(0.5)))/(CO2-1/2*(CO2+Kc*(1+O2/Ko)+(Vcmax-Rd)/gm-((CO2+Kc*(1+O2/Ko)+(Vcmax-Rd)/gm)^2+4/gm*(Rd*(CO2+Kc*(1+O2/Ko))+Vcmax*(Gamma-CO2)))^(0.5))+Kc*(1+O2/Ko))
aux Vc=Vc

# assignmentRule: variable = v_c
v_c=(abs((abs(Vc+Vj)-abs(Vc-Vj))/2+Vp)-abs((abs(Vc+Vj)-abs(Vc-Vj))/2-Vp))/2
aux v_c=v_c

# assignmentRule: variable = phi
phi=0.21*gm*O2/Ko/(gm*CO2-v_c+Rd)/Kc
aux phi=phi

# Reaction: id = PGA_prod_Vc, name = PGA production - v_c

PGA_prod_=chloropla*carboxyla(Vc, Vj, Vp)

# Reaction: id = PGA_prod_Vo, name = PGA production - v_o

PGA_pro_1=chloropla*oxygenati(phi, Vc, Vj, Vp)

# Reaction: id = PGA_cons, name = PGA consumption

PGA_cons=chloropla*PGA_consu(PGA, Rp, NADPH, Nt, Vcmax)

# Reaction: id = NADPH_prod, name = NADPH production

NADPH_p_1=chloropla*NADPH_pro(J, NADP, Nt)

# Species:   id = RuBP, name = RuBP, constant
par RuBP=2.0


# Species:   id = PGA, name = PGA, affected by kineticLaw

init PGA=2.4
dPGA/dt=(1/(chloropla))*(( 2.0 * PGA_prod_) + ( 1.5 * PGA_pro_1) + (-1.0 * PGA_cons))

# Species:   id = NADPH, name = NADPH, affected by kineticLaw

init NADPH=0.21
dNADPH/dt=(1/(chloropla))*((-2.0 * PGA_prod_) + (-2.0 * PGA_pro_1) + ( 1.0 * NADPH_p_1))

# Species:   id = CO2, name = CO2, constant
par CO2=24.5


# Species:   id = O2, name = O2, constant
par O2=21.0


# Species:   id = NADP, name = NADP, involved in a rule 

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

