
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Tsai2014 - Cell cycle duration control by oscillatory Dynamics  in Early Xenopus laevis Embryos
#
# is http://identifiers.org/biomodels.db/MODEL1809060006
# is http://identifiers.org/biomodels.db/BIOMD0000000719
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = function_for_cdk1a_degradation_by_apc_2, name = function for cdk1a degradation by apc_2
function_(APC_C_active,Cyclin_B1_Cdk1_complex_phosphorylated,k_dest)=(k_dest*APC_C_active*Cyclin_B1_Cdk1_complex_phosphorylated)


# FunctionDefinition id = function_for_apc_activation_1, name = function for apc activation_1
functio_1(APC_C_active,APC_C_total,Plx1_active,ec50_apc,k_apc_on,n_apc)=(k_apc_on/(1+(ec50_apc/Plx1_active)^n_apc)*(APC_C_total-APC_C_active))


# FunctionDefinition id = function_for_cdk1a_degradation_by_apc_1, name = function for cdk1a degradation by apc_1
functio_2(APC_C_active,Cyclin_B1_Cdk1_complex_unphosphorylated,k_dest)=(k_dest*APC_C_active*Cyclin_B1_Cdk1_complex_unphosphorylated)


# FunctionDefinition id = function_for_plx1_activation_1, name = function for plx1 activation_1
functio_3(Cyclin_B1_Cdk1_complex_phosphorylated,Plx1_active,Plx1_total,ec50_plx,k_plxon,n_plx)=(k_plxon/(1+(ec50_plx/Cyclin_B1_Cdk1_complex_phosphorylated)^n_plx)*(Plx1_total-Plx1_active))


# FunctionDefinition id = function_for_cdk_inactivation_1, name = function for cdk inactivation_1
functio_4(Cyclin_B1_Cdk1_complex_phosphorylated,ec50_wee1,k_cdk1_off,n_wee1,p,r)=(r^(1/2)*k_cdk1_off*(1+p/((Cyclin_B1_Cdk1_complex_phosphorylated/ec50_wee1)^n_wee1+1))*Cyclin_B1_Cdk1_complex_phosphorylated)


# FunctionDefinition id = function_for_cdk1_activation_1, name = function for cdk1 activation_1
functio_5(Cyclin_B1_Cdk1_complex_phosphorylated,Cyclin_B1_Cdk1_complex_unphosphorylated,ec50_cdc25,k_cdk1_on,n_cdc25,p,r)=(1/r^(1/2)*k_cdk1_on*(1+p/(1+(ec50_cdc25/Cyclin_B1_Cdk1_complex_phosphorylated)^n_cdc25))*Cyclin_B1_Cdk1_complex_unphosphorylated)


# Compartment: id = nuclear, name = nuclear, constant
par nuclear=1.0

# Parameter:   id =  k_synth, name = k_synth, constant
par k_synth=1.5

# Parameter:   id =  k_dest, name = k_dest, constant
par k_dest=0.4

# Parameter:   id =  ec50_cdc25, name = ec50_cdc25, constant
par ec50_cdc2=30.0

# Parameter:   id =  n_cdc25, name = n_cdc25, constant
par n_cdc25=11.0

# Parameter:   id =  ec50_wee1, name = ec50_wee1, constant
par ec50_wee1=35.0

# Parameter:   id =  n_wee1, name = n_wee1, constant
par n_wee1=3.5

# Parameter:   id =  k_cdk1_on, name = k_cdk1_on, constant
par k_cdk1_on=0.0354

# Parameter:   id =  k_cdk1_off, name = k_cdk1_off, constant
par k_cdk1_of=0.0354

# Parameter:   id =  p, name = p, constant
par p=5.0

# Parameter:   id =  ec50_plx, name = ec50_plx, constant
par ec50_plx=60.0

# Parameter:   id =  ec50_apc, name = ec50_apc, constant
par ec50_apc=0.5

# Parameter:   id =  n_apc, name = n_apc, constant
par n_apc=4.0

# Parameter:   id =  n_plx, name = n_plx, constant
par n_plx=5.0

# Parameter:   id =  k_plxon, name = k_plxon, constant
par k_plxon=1.5

# Parameter:   id =  k_plx_off, name = k_plx_off, constant
par k_plx_off=0.125

# Parameter:   id =  k_apc_on, name = k_apc_on, constant
par k_apc_on=1.5

# Parameter:   id =  k_apc_off, name = k_apc_off, constant
par k_apc_off=0.15

# Parameter:   id =  r, name = r, defined by a Rule

# Parameter:   id =  tau, name = tau, constant
par tau=4.0

# assignmentRule: variable = Cyclin_B1_Cdk1_complex_total
Cyclin__2=Cyclin__1+Cyclin_B1
aux Cyclin__2=Cyclin__2

# assignmentRule: variable = r
r=1/(2*(1+3/(1+exp((70-t)/tau)))^2)
aux r=r

# Reaction: id = Cyclin_B1_Cdk1_phosphorylated_synthesis, name = Cyclin B1 Cdk1 phosphorylated synthesis

Cyclin__3=nuclear*Constant_(k_synth)

# Reaction: id = Cyclin_B1_Cdk1_unphosphorylated_degradation, name = Cyclin B1 Cdk1 unphosphorylated degradation

Cyclin__4=nuclear*functio_2(APC_C_act, Cyclin__1, k_dest)

# Reaction: id = Cyclin_B1_Cdk1_phosphorylated_degradation, name = Cyclin B1 Cdk1 phosphorylated degradation

Cyclin__5=nuclear*function_(APC_C_act, Cyclin_B1, k_dest)

# Reaction: id = Cyclin_B1_Cdk1_phosphorylated_dephosphorylation, name = Cyclin B1 Cdk1 phosphorylated dephosphorylation

Cyclin__6=nuclear*functio_4(Cyclin_B1, ec50_wee1, k_cdk1_of, n_wee1, p, r)

# Reaction: id = Cyclin_B1_Cdk1_phosphorylated_phosphorylation, name = Cyclin B1 Cdk1 phosphorylated phosphorylation

Cyclin__7=nuclear*functio_5(Cyclin_B1, Cyclin__1, ec50_cdc2, k_cdk1_on, n_cdc25, p, r)

# Reaction: id = Plx1_activation_by_active_Cdk1, name = Plx1 activation by active Cdk1

Plx1_ac_1=nuclear*functio_3(Cyclin_B1, Plx1_acti, Plx1_tota, ec50_plx, k_plxon, n_plx)

# Reaction: id = Plx1_inactivation_after_Cdk1_inactivated, name = Plx1 inactivation after Cdk1 inactivated

Plx1_inac=nuclear*k_plx_off*Plx1_acti

# Reaction: id = Activation_of_APC_CCdc20_by_active_Plx1, name = Activation of APC/CCdc20 by active Plx1

Activatio=nuclear*functio_1(APC_C_act, APC_C_tot, Plx1_acti, ec50_apc, k_apc_on, n_apc)

# Reaction: id = inactivation_of_APC_CCdc20_after_Plx1_is_inactivated, name = inactivation of APC/CCdc20 after Plx1 is inactivated

inactivat=nuclear*k_apc_off*APC_C_act

# Species:   id = Cyclin_B1_Cdk1_complex_phosphorylated, name = Cyclin B1 Cdk1 complex phosphorylated, affected by kineticLaw

par Cyclin_B1=60.0
aux Cyclin_B1=Cyclin_B1
dCyclin_B1/dt=(1/(nuclear))*(( 1.0 * Cyclin__3) + (-1.0 * Cyclin__5) + (-1.0 * Cyclin__6) + ( 1.0 * Cyclin__7))

# Species:   id = Cyclin_B1_Cdk1_complex_unphosphorylated, name = Cyclin B1 Cdk1 complex unphosphorylated, affected by kineticLaw

par Cyclin__1=0.0
aux Cyclin__1=Cyclin__1
dCyclin__1/dt=(1/(nuclear))*((-1.0 * Cyclin__4) + ( 1.0 * Cyclin__6) + (-1.0 * Cyclin__7))

# Species:   id = Plx1_active, name = Plx1_active, affected by kineticLaw

par Plx1_acti=0.0
aux Plx1_acti=Plx1_acti
dPlx1_acti/dt=(1/(nuclear))*(( 1.0 * Plx1_ac_1) + (-1.0 * Plx1_inac))

# Species:   id = APC_C_active, name = APC/C active, affected by kineticLaw

par APC_C_act=1.0
aux APC_C_act=APC_C_act
dAPC_C_act/dt=(1/(nuclear))*(( 1.0 * Activatio) + (-1.0 * inactivat))

# Species:   id = Plx1_total, name = Plx1_total, constant
par Plx1_tota=1.0


# Species:   id = APC_C_total, name = APC/C total
# Warning species is not changed by either rules or reactions

par APC_C_tot=1.0
aux APC_C_tot=APC_C_tot

# Species:   id = Cyclin_B1_Cdk1_complex_total, name = Cyclin B1 Cdk1 complex total, involved in a rule 

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

