
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Cooling2007_IP3transients_CardiacMyocyte
#
# is http://identifiers.org/biomodels.db/MODEL0913194523
# is http://identifiers.org/biomodels.db/BIOMD0000000400
# isDescribedBy http://identifiers.org/pubmed/17693463
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = Compartment, name = Compartment, constant
par Compartme=1.0

# Parameter:   id =  L, name = L, defined by a Rule

# Parameter:   id =  Ls, name = Ls, constant
par Ls=0.1

# Parameter:   id =  ts, name = ts, constant
par ts=30.0

# Parameter:   id =  PIP2, name = PIP2, constant
par PIP2=4000.0

# Parameter:   id =  J1, name = J1, defined by a Rule

# Parameter:   id =  kf1, name = kf1, constant
par kf1=3.0E-4

# Parameter:   id =  kr1, name = kr1, defined by a Rule

# Parameter:   id =  Kd1, name = Kd1, constant
par Kd1=3.0E-5

# Parameter:   id =  J2, name = J2, defined by a Rule

# Parameter:   id =  kf2, name = kf2, constant
par kf2=2.75E-4

# Parameter:   id =  kr2, name = kr2, defined by a Rule

# Parameter:   id =  Kd2, name = Kd2, constant
par Kd2=27500.0

# Parameter:   id =  J3, name = J3, defined by a Rule

# Parameter:   id =  kf3, name = kf3, constant
par kf3=1.0

# Parameter:   id =  kr3, name = kr3, constant
par kr3=0.001

# Parameter:   id =  J4, name = J4, defined by a Rule

# Parameter:   id =  kf4, name = kf4, constant
par kf4=0.3

# Parameter:   id =  kr4, name = kr4, defined by a Rule

# Parameter:   id =  Kd4, name = Kd4, constant
par Kd4=3.0E-5

# Parameter:   id =  J5, name = J5, defined by a Rule

# Parameter:   id =  kf5, name = kf5, constant
par kf5=4.0E-4

# Parameter:   id =  J6, name = J6, defined by a Rule

# Parameter:   id =  kf6, name = kf6, constant
par kf6=1.0

# Parameter:   id =  J7, name = J7, defined by a Rule

# Parameter:   id =  kf7, name = kf7, constant
par kf7=0.15

# Parameter:   id =  J8, name = J8, defined by a Rule

# Parameter:   id =  kf8, name = kf8, constant
par kf8=0.0167

# Parameter:   id =  kr8, name = kr8, constant
par kr8=0.0167

# Parameter:   id =  J9, name = J9, defined by a Rule

# Parameter:   id =  kf9, name = kf9, constant
par kf9=0.0042

# Parameter:   id =  kr9, name = kr9, constant
par kr9=1.0

# Parameter:   id =  J10, name = J10, defined by a Rule

# Parameter:   id =  kf10, name = kf10, constant
par kf10=0.042

# Parameter:   id =  kr10, name = kr10, constant
par kr10=1.0

# Parameter:   id =  J11, name = J11, defined by a Rule

# Parameter:   id =  kf11, name = kf11, constant
par kf11=0.0334

# Parameter:   id =  kr11, name = kr11, defined by a Rule

# Parameter:   id =  Kd11, name = Kd11, constant
par Kd11=0.1

# Parameter:   id =  J12, name = J12, defined by a Rule

# Parameter:   id =  kf12, name = kf12, constant
par kf12=6.0

# Parameter:   id =  J13, name = J13, defined by a Rule

# Parameter:   id =  kf13, name = kf13, constant
par kf13=6.0

# Parameter:   id =  J14, name = J14, defined by a Rule

# Parameter:   id =  kf14, name = kf14, constant
par kf14=0.444

# Parameter:   id =  Km14, name = Km14, constant
par Km14=19.8

# Parameter:   id =  J15, name = J15, defined by a Rule

# Parameter:   id =  kf15, name = kf15, constant
par kf15=3.8

# Parameter:   id =  Km15, name = Km15, constant
par Km15=5.0

# Parameter:   id =  J16, name = J16, defined by a Rule

# Parameter:   id =  kf16, name = kf16, constant
par kf16=1.25

# Parameter:   id =  Cpc, name = Cpc, defined by a Rule

# Parameter:   id =  Cc, name = Cc, defined by a Rule

# Parameter:   id =  Cp, name = Cp, defined by a Rule

# Parameter:   id =  Vc, name = Vc, constant
par Vc=2550.0

# Parameter:   id =  Rpc, name = Rpc, constant
par Rpc=4.61

# rateRule: variable = P
init P=90.9
dP/dt=J13-(J9+J8)

# rateRule: variable = Pg
init Pg=0.0
dPg/dt=J9-(J11+J13)

# rateRule: variable = Pc
init Pc=9.09
dPc/dt=J8+J12-J10

# rateRule: variable = Pcg
init Pcg=0.0
dPcg/dt=J10+J11-J12

# rateRule: variable = IP3
init IP3=0.015
dIP3/dt=Cpc*(J14+J15)-J16

# rateRule: variable = Gd
init Gd=10000.0
dGd/dt=J7+J13+J12-(J2+J3)

# rateRule: variable = Gt
init Gt=0.0
dGt/dt=J6-(J7+J9+J10)

# rateRule: variable = Ca
init Ca=0.1
dCa/dt=Cpc*(-1)*(J8+J11)

# rateRule: variable = R
init R=13.9
dR/dt=(-1)*(J1+J2)

# rateRule: variable = Rl
init Rl=0.0
dRl/dt=J1+J6-J3

# rateRule: variable = Rg
init Rg=5.06
dRg/dt=J2-J4

# rateRule: variable = Rlgp
init Rlgp=0.0
dRlgp/dt=J5

# rateRule: variable = Rlg
init Rlg=0.0
dRlg/dt=J3-J5+J4-J6

# assignmentRule: variable = Cc
Cc=1/(Vc*602.2)
aux Cc=Cc

# assignmentRule: variable = Cp
Cp=1/(Vc*Rpc)
aux Cp=Cp

# assignmentRule: variable = Cpc
Cpc=Cc/Cp
aux Cpc=Cpc

# assignmentRule: variable = J13
J13=kf13*Pg
aux J13=J13

# assignmentRule: variable = J12
J12=kf12*Pcg
aux J12=J12

# assignmentRule: variable = kr11
kr11=kf11*Kd11
aux kr11=kr11

# assignmentRule: variable = J11
J11=kf11*Pg*Ca-kr11*Pcg
aux J11=J11

# assignmentRule: variable = J10
J10=kf10*Pc*Gt-kr10*Pcg
aux J10=J10

# assignmentRule: variable = J8
J8=kf8*P*Ca-kr8*Pc
aux J8=J8

# assignmentRule: variable = J9
J9=kf9*P*Gt-kr9*Pg
aux J9=J9

# assignmentRule: variable = J16
J16=kf16*IP3
aux J16=J16

# assignmentRule: variable = J14
J14=kf14*Pc*PIP2/(Km14/Cpc+PIP2)
aux J14=J14

# assignmentRule: variable = J15
J15=kf15*Pcg*PIP2/(Km15/Cpc+PIP2)
aux J15=J15

# assignmentRule: variable = J7
J7=kf7*Gt
aux J7=J7

# assignmentRule: variable = L
L= piecew1 
aux L=L

# assignmentRule: variable = kr1
kr1=kf1*Kd1
aux kr1=kr1

# assignmentRule: variable = J1
J1=kf1*R*L-kr1*Rl
aux J1=J1

# assignmentRule: variable = kr2
kr2=kf2*Kd2
aux kr2=kr2

# assignmentRule: variable = J2
J2=kf2*R*Gd-kr2*Rg
aux J2=J2

# assignmentRule: variable = J3
J3=kf3*Rl*Gd-kr3*Rlg
aux J3=J3

# assignmentRule: variable = kr4
kr4=kf4*Kd4
aux kr4=kr4

# assignmentRule: variable = J4
J4=kf4*L*Rg-kr4*Rlg
aux J4=J4

# assignmentRule: variable = J5
J5=kf5*Rlg
aux J5=J5

# assignmentRule: variable = J6
J6=kf6*Rlg
aux J6=J6

# Species:   id = Gd, name = Gd, defined in a rule 

# Species:   id = Gt, name = Gt, defined in a rule 

# Species:   id = R, name = R, defined in a rule 

# Species:   id = Rl, name = Rl, defined in a rule 

# Species:   id = Rg, name = Rg, defined in a rule 

# Species:   id = Rlg, name = Rlg, defined in a rule 

# Species:   id = Rlgp, name = Rlgp, defined in a rule 

# Species:   id = IP3, name = IP3, defined in a rule 

# Species:   id = Pc, name = Pc, defined in a rule 

# Species:   id = Pcg, name = Pcg, defined in a rule 

# Species:   id = P, name = P, defined in a rule 

# Species:   id = Pg, name = Pg, defined in a rule 

# Species:   id = Ca, name = Ca, defined in a rule 


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if ((t  <  (ts+0.15)) && (t  >=  ts)) then (Ls/(1+exp((-80)*(t-ts-0.05)))) else (if (t  >=  (ts+0.15)) then (Ls) else (0))


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

