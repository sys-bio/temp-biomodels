
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Viertel2019 - A Computational model of the mammalian external tufted cell
#
# isDescribedBy http://identifiers.org/pubmed/30290156
# isDerivedFrom http://identifiers.org/pubmed/25717156
# isDerivedFrom http://identifiers.org/pubmed/9497431
# isDerivedFrom http://identifiers.org/pubmed/21723921
# is http://identifiers.org/biomodels.db/MODEL1911100001
# is http://identifiers.org/biomodels.db/BIOMD0000000844
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_dAdt_Ca_Down, name = Function_for_dAdt_Ca_Down
Function_(Ca_buffer,ILVA,IHVA,Ca_z,F,d)=(Ca_buffer*10*(ILVA+IHVA)/(Ca_z*F*d))


# FunctionDefinition id = Function_for_dAdt_V, name = Function_for_dAdt_V
Functio_1(INa,IK,ILVA,IH,INaP,IL,IHVA,IBK,IHVK,C)=((INa+IK+ILVA+IH+INaP+IL+IHVA+IBK+IHVK)/C)


# FunctionDefinition id = Function_for_Ion, name = Function_for_Ion
Functio_2(inf,ion,tau)=((inf-ion)/tau)


# FunctionDefinition id = Function_for_dAdt_Ca_Up, name = Function_for_dAdt_Ca_Up
Functio_3(Ca0,Ca,tau_Ca)=((Ca0-Ca)/tau_Ca)


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  vL, name = vL, constant
par vL=-62.5

# Parameter:   id =  vH, name = vH, constant
par vH=-35.0

# Parameter:   id =  vNa, name = vNa, constant
par vNa=45.0

# Parameter:   id =  vK, name = vK, constant
par vK=-105.0

# Parameter:   id =  vCa, name = vCa, constant
par vCa=120.0

# Parameter:   id =  gL, name = gL, constant
par gL=2.5

# Parameter:   id =  gH, name = gH, constant
par gH=20.0

# Parameter:   id =  gNaP, name = gNaP, constant
par gNaP=8.3244

# Parameter:   id =  gLVA, name = gLVA, constant
par gLVA=15.0213

# Parameter:   id =  gNa, name = gNa, constant
par gNa=29.17

# Parameter:   id =  gK, name = gK, constant
par gK=12.96

# Parameter:   id =  gHVA, name = gHVA, constant
par gHVA=2.0

# Parameter:   id =  gBK, name = gBK, constant
par gBK=5.0

# Parameter:   id =  gHVK, name = gHVK, constant
par gHVK=10.0

# Parameter:   id =  theta_mNa, name = theta_mNa, constant
par theta_mNa=-25.0

# Parameter:   id =  beta_mNa, name = beta_mNa, constant
par beta_mNa=-6.5

# Parameter:   id =  theta_nK, name = theta_nK, constant
par theta_nK=-26.0

# Parameter:   id =  beta_nK, name = beta_nK, constant
par beta_nK=-9.0

# Parameter:   id =  tau_nK, name = tau_nK, constant
par tau_nK=10.0

# Parameter:   id =  theta_mLVA, name = theta_mLVA, constant
par theta_mLV=-37.1

# Parameter:   id =  beta_mLVA, name = beta_mLVA, constant
par beta_mLVA=-4.8916

# Parameter:   id =  tau_mLVA, name = tau_mLVA, constant
par tau_mLVA=40.0

# Parameter:   id =  theta_hLVA, name = theta_hLVA, constant
par theta_hLV=-59.2

# Parameter:   id =  beta_hLVA, name = beta_hLVA, constant
par beta_hLVA=11.2326

# Parameter:   id =  tau_hLVA, name = tau_hLVA, constant
par tau_hLVA=350.0

# Parameter:   id =  theta_mHVA, name = theta_mHVA, constant
par theta_mHV=-10.0

# Parameter:   id =  beta_mHVA, name = beta_mHVA, constant
par beta_mHVA=-6.5

# Parameter:   id =  theta_mNaP, name = theta_mNaP, constant
par theta_m_1=-40.0

# Parameter:   id =  beta_mNaP, name = beta_mNaP, constant
par beta_mNaP=-4.0

# Parameter:   id =  theta_hNaP, name = theta_hNaP, constant
par theta_hNa=-54.0

# Parameter:   id =  beta_hNaP, name = beta_hNaP, constant
par beta_hNaP=5.0

# Parameter:   id =  tau_hNaP, name = tau_hNaP, constant
par tau_hNaP=500.0

# Parameter:   id =  theta_hH, name = theta_hH, constant
par theta_hH=-61.32

# Parameter:   id =  beta_hH, name = beta_hH, constant
par beta_hH=5.855

# Parameter:   id =  tau_hH_T, name = tau_hH_T, constant
par tau_hH_T=100.0

# Parameter:   id =  delta_hH_T, name = delta_hH_T, constant
par delta_hH_=0.205

# Parameter:   id =  theta_hH_T, name = theta_hH_T, constant
par theta_hH_=-65.95

# Parameter:   id =  beta_hH_T, name = beta_hH_T, constant
par beta_hH_T=4.44

# Parameter:   id =  theta_mHVK, name = theta_mHVK, constant
par theta_m_2=-40.0

# Parameter:   id =  beta_mHVK, name = beta_mHVK, constant
par beta_mHVK=-2.0

# Parameter:   id =  theta_nHVK, name = theta_nHVK, constant
par theta_nHV=-30.0

# Parameter:   id =  beta_nHVK, name = beta_nHVK, constant
par beta_nHVK=-2.0

# Parameter:   id =  mBK_base, name = mBK_base, constant
par mBK_base=170.0

# Parameter:   id =  beta_mBK, name = beta_mBK, constant
par beta_mBK=-15.6

# Parameter:   id =  Ca0, name = Ca0, constant
par Ca0=2.0E-5

# Parameter:   id =  tau_Ca, name = tau_Ca, constant
par tau_Ca=8.0

# Parameter:   id =  Ca_buffer, name = Ca_buffer, constant
par Ca_buffer=0.5

# Parameter:   id =  Ca_z, name = Ca_z, constant
par Ca_z=2.0

# Parameter:   id =  d, name = d, constant
par d=1.0

# Parameter:   id =  C, name = C, constant
par C=21.0

# Parameter:   id =  F, name = F, constant
par F=96485.0

# Parameter:   id =  mNa_inf, name = mNa_inf, defined by a Rule

# Parameter:   id =  nK_Inf, name = nK_Inf, defined by a Rule

# Parameter:   id =  mNaP_inf, name = mNaP_inf, defined by a Rule

# Parameter:   id =  hNaP_inf, name = hNaP_inf, defined by a Rule

# Parameter:   id =  hH_inf, name = hH_inf, defined by a Rule

# Parameter:   id =  mLVA_inf, name = mLVA_inf, defined by a Rule

# Parameter:   id =  hLVA_inf, name = hLVA_inf, defined by a Rule

# Parameter:   id =  mHVA_inf, name = mHVA_inf, defined by a Rule

# Parameter:   id =  mBK_inf, name = mBK_inf, defined by a Rule

# Parameter:   id =  mHVK_inf, name = mHVK_inf, defined by a Rule

# Parameter:   id =  nHVK_inf, name = nHVK_inf, defined by a Rule

# Parameter:   id =  theta_mBK, name = theta_mBK, defined by a Rule

# Parameter:   id =  p_mBK, name = p_mBK, defined by a Rule

# Parameter:   id =  s, name = s, defined by a Rule

# Parameter:   id =  f, name = f, defined by a Rule

# Parameter:   id =  nHVK_tau, name = nHVK_tau, defined by a Rule

# Parameter:   id =  nK_tau, name = nK_tau, defined by a Rule

# Parameter:   id =  hNaP_tau, name = hNaP_tau, defined by a Rule

# Parameter:   id =  hH_tau, name = hH_tau, defined by a Rule

# Parameter:   id =  mLVA_tau, name = mLVA_tau, defined by a Rule

# Parameter:   id =  hLVA_tau, name = hLVA_tau, defined by a Rule

# Parameter:   id =  mBK_tau, name = mBK_tau, defined by a Rule

# Parameter:   id =  INa, name = INa, defined by a Rule

# Parameter:   id =  IHVK, name = IHVK, defined by a Rule

# Parameter:   id =  IK, name = IK, defined by a Rule

# Parameter:   id =  IL, name = IL, defined by a Rule

# Parameter:   id =  IH, name = IH, defined by a Rule

# Parameter:   id =  INaP, name = INaP, defined by a Rule

# Parameter:   id =  ILVA, name = ILVA, defined by a Rule

# Parameter:   id =  IHVA, name = IHVA, defined by a Rule

# Parameter:   id =  IBK, name = IBK, defined by a Rule

# assignmentRule: variable = hNaP_inf
hNaP_inf=1/(1+exp((V-theta_hNa)/beta_hNaP))
aux hNaP_inf=hNaP_inf

# assignmentRule: variable = hH_inf
hH_inf=1/(1+exp((V-theta_hH)/beta_hH))
aux hH_inf=hH_inf

# assignmentRule: variable = nK_Inf
nK_Inf=1/(1+exp((V-theta_nK)/beta_nK))
aux nK_Inf=nK_Inf

# assignmentRule: variable = mLVA_inf
mLVA_inf=1/(1+exp((V-theta_mLV)/beta_mLVA))
aux mLVA_inf=mLVA_inf

# assignmentRule: variable = mHVA_inf
mHVA_inf=1/(1+exp((V-theta_mHV)/beta_mHVA))
aux mHVA_inf=mHVA_inf

# assignmentRule: variable = mNa_inf
mNa_inf=1/(1+exp((V-theta_mNa)/beta_mNa))
aux mNa_inf=mNa_inf

# assignmentRule: variable = mHVK_inf
mHVK_inf=1/(1+exp((V-theta_m_2)/beta_mHVK))
aux mHVK_inf=mHVK_inf

# assignmentRule: variable = hLVA_inf
hLVA_inf=1/(1+exp((V-theta_hLV)/beta_hLVA))
aux hLVA_inf=hLVA_inf

# assignmentRule: variable = mNaP_inf
mNaP_inf=1/(1+exp((V-theta_m_1)/beta_mNaP))
aux mNaP_inf=mNaP_inf

# assignmentRule: variable = nHVK_inf
nHVK_inf=1/(1+exp((V-theta_nHV)/beta_nHVK))
aux nHVK_inf=nHVK_inf

# assignmentRule: variable = p_mBK
p_mBK=2.9+6.3*exp((-360)*Ca)
aux p_mBK=p_mBK

# assignmentRule: variable = s
s=-25.3+107.5*exp((-120)*Ca)
aux s=s

# assignmentRule: variable = theta_mBK
theta_mBK=-20+59.2*exp((-90)*Ca)+96.7*exp((-470)*Ca)
aux theta_mBK=theta_mBK

# assignmentRule: variable = mBK_inf
mBK_inf=1/(1+exp((V-theta_mBK)/beta_mBK))
aux mBK_inf=mBK_inf

# assignmentRule: variable = f
f_1=1/(10*(exp((-(V+100-s))/63.6)+exp((-150+(V+100-s))/63.6)))-5.2
aux f_1=f_1

# assignmentRule: variable = IHVK
IHVK=gHVK*mHVK_inf*nHVK*(V-vK)
aux IHVK=IHVK

# assignmentRule: variable = hH_tau
hH_tau=tau_hH_T*exp(delta_hH_*(V-theta_hH_)/beta_hH_T)/(1+exp((V-theta_hH_)/beta_hH_T))
aux hH_tau=hH_tau

# assignmentRule: variable = IL
IL=gL*(V-vL)
aux IL=IL

# assignmentRule: variable = mBK_tau
mBK_tau=(-(p_mBK-1))*(f_1-0.2)/0.8+mBK_base
aux mBK_tau=mBK_tau

# assignmentRule: variable = IBK
IBK=gBK*mBK*(V-vK)
aux IBK=IBK

# assignmentRule: variable = nK_tau
nK_tau=tau_nK/cosh((V-theta_nK)/(2*beta_nK))
aux nK_tau=nK_tau

# assignmentRule: variable = INa
INa=gNa*(1-nK)*mNa_inf^3*(V-vNa)
aux INa=INa

# assignmentRule: variable = INaP
INaP=gNaP*mNaP_inf*hNaP*(V-vNa)
aux INaP=INaP

# assignmentRule: variable = IH
IH=gH*hH*(V-vH)
aux IH=IH

# assignmentRule: variable = hLVA_tau
hLVA_tau=tau_hLVA/cosh((V-theta_hLV)/(2*beta_hLVA))
aux hLVA_tau=hLVA_tau

# assignmentRule: variable = ILVA
ILVA=gLVA*mLVA^2*hLVA*(V-vCa)
aux ILVA=ILVA

# assignmentRule: variable = IHVA
IHVA=gHVA*mHVA_inf*(V-vCa)
aux IHVA=IHVA

# assignmentRule: variable = mLVA_tau
mLVA_tau=tau_mLVA/cosh((V-theta_mLV)/(2*beta_mLVA))
aux mLVA_tau=mLVA_tau

# assignmentRule: variable = nHVK_tau
nHVK_tau=1000/(1+exp(-(V+35)))+1000
aux nHVK_tau=nHVK_tau

# assignmentRule: variable = hNaP_tau
hNaP_tau=tau_hNaP/cosh((V-theta_hNa)/(2*beta_hNaP))
aux hNaP_tau=hNaP_tau

# assignmentRule: variable = IK
IK=gK*nK^4*(V-vK)
aux IK=IK

# Reaction: id = dAdt_V, name = dAdt_V

dAdt_V=compartme*Functio_1(INa, IK, ILVA, IH, INaP, IL, IHVA, IBK, IHVK, C)

# Reaction: id = dAdt_nK, name = dAdt_nK

dAdt_nK=compartme*Functio_2(nK_Inf, nK, nK_tau)

# Reaction: id = dAdt_hNaP, name = dAdt_hNaP

dAdt_hNaP=compartme*Functio_2(hNaP_inf, hNaP, hNaP_tau)

# Reaction: id = dAdt_hH, name = dAdt_hH

dAdt_hH=compartme*Functio_2(hH_inf, hH, hH_tau)

# Reaction: id = dAdt_mLVA, name = dAdt_mLVA

dAdt_mLVA=compartme*Functio_2(mLVA_inf, mLVA, mLVA_tau)

# Reaction: id = dAdt_hLVA, name = dAdt_hLVA

dAdt_hLVA=compartme*Functio_2(hLVA_inf, hLVA, hLVA_tau)

# Reaction: id = dAdt_mBK, name = dAdt_mBK

dAdt_mBK=compartme*Functio_2(mBK_inf, mBK, mBK_tau)

# Reaction: id = dAdt_Ca_Up, name = dAdt_Ca_Up

dAdt_Ca_U=compartme*Functio_3(Ca0, Ca, tau_Ca)

# Reaction: id = dAdt_nHVK, name = dAdt_nHVK

dAdt_nHVK=compartme*Functio_2(nHVK_inf, nHVK, nHVK_tau)

# Reaction: id = dAdt_Ca_Down, name = dAdt_Ca_Down

dAdt_Ca_D=compartme*Function_(Ca_buffer, ILVA, IHVA, Ca_z, F, d)

# Species:   id = V, name = V, affected by kineticLaw

init V=-51.4085348748388
dV/dt=(1/(compartme))*((-1.0 * dAdt_V))

# Species:   id = Ca, name = Ca, affected by kineticLaw

init Ca=3.9839179219E-4
dCa/dt=(1/(compartme))*(( 1.0 * dAdt_Ca_U) + (-1.0 * dAdt_Ca_D))

# Species:   id = nK, name = nK, affected by kineticLaw

init nK=0.055706295559466
dnK/dt=(1/(compartme))*(( 1.0 * dAdt_nK))

# Species:   id = hNaP, name = hNaP, affected by kineticLaw

init hNaP=0.139259083672574
dhNaP/dt=(1/(compartme))*(( 1.0 * dAdt_hNaP))

# Species:   id = hH, name = hH, affected by kineticLaw

init hH=0.157733123889777
dhH/dt=(1/(compartme))*(( 1.0 * dAdt_hH))

# Species:   id = mLVA, name = mLVA, affected by kineticLaw

init mLVA=0.048620921041047
dmLVA/dt=(1/(compartme))*(( 1.0 * dAdt_mLVA))

# Species:   id = hLVA, name = hLVA, affected by kineticLaw

init hLVA=0.216830183163897
dhLVA/dt=(1/(compartme))*(( 1.0 * dAdt_hLVA))

# Species:   id = mBK, name = mBK, affected by kineticLaw

init mBK=0.118223401083348
dmBK/dt=(1/(compartme))*(( 1.0 * dAdt_mBK))

# Species:   id = nHVK, name = nHVK, affected by kineticLaw

init nHVK=0.049382804823416
dnHVK/dt=(1/(compartme))*(( 1.0 * dAdt_nHVK))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

