
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Plant1981_BurstingNerveCells
#
# is http://identifiers.org/biomodels.db/MODEL6762427183
# is http://identifiers.org/biomodels.db/BIOMD0000000304
# isDescribedBy http://identifiers.org/pubmed/7252375
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = COMpartment, name = COMpartment, constant
par COMpartme=1.0

# Parameter:   id =  i_Na, name = i_Na, defined by a Rule

# Parameter:   id =  V_I, name = V_I, constant
par V_I=30.0

# Parameter:   id =  V_K, name = V_K, constant
par V_K=-75.0

# Parameter:   id =  V_L, name = V_L, constant
par V_L=-40.0

# Parameter:   id =  V_Ca, name = V_Ca, constant
par V_Ca=140.0

# Parameter:   id =  g_I, name = g_I, constant
par g_I=4.0

# Parameter:   id =  g_K, name = g_K, constant
par g_K=0.3

# Parameter:   id =  g_T, name = g_T, constant
par g_T=0.01

# Parameter:   id =  g_K_Ca, name = g_K_Ca, constant
par g_K_Ca=0.03

# Parameter:   id =  g_L, name = g_L, constant
par g_L=0.003

# Parameter:   id =  K_p, name = K_p, constant
par K_p=0.5

# Parameter:   id =  K_c, name = K_c, constant
par K_c=0.0085

# Parameter:   id =  f, name = f, constant
par f=3.0E-4

# Parameter:   id =  tau_x, name = tau_x, constant
par tau_x=235.0

# Parameter:   id =  a, name = a, constant
par a=1.209

# Parameter:   id =  b, name = b, constant
par b=78.714

# Parameter:   id =  Vs, name = Vs, defined by a Rule

# Parameter:   id =  m_infinity, name = m_infinity, defined by a Rule

# Parameter:   id =  alpha_m, name = alpha_m, defined by a Rule

# Parameter:   id =  beta_m, name = beta_m, defined by a Rule

# Parameter:   id =  h_infinity, name = h_infinity, defined by a Rule

# Parameter:   id =  alpha_h, name = alpha_h, defined by a Rule

# Parameter:   id =  beta_h, name = beta_h, defined by a Rule

# Parameter:   id =  tau_h, name = tau_h, defined by a Rule

# Parameter:   id =  g_Ca, name = g_Ca
# Warning parameter g_Ca is not constant, it should be controled by a Rule and/or events
par g_Ca=0.004

# Parameter:   id =  x_infinity, name = x_infinity, defined by a Rule

# Parameter:   id =  i_Ca, name = i_Ca, defined by a Rule

# Parameter:   id =  n_infinity, name = n_infinity, defined by a Rule

# Parameter:   id =  i_K, name = i_K, defined by a Rule

# Parameter:   id =  alpha_n, name = alpha_n, defined by a Rule

# Parameter:   id =  beta_n, name = beta_n, defined by a Rule

# Parameter:   id =  tau_n, name = tau_n, defined by a Rule

# Parameter:   id =  i_K_Ca, name = i_K_Ca, defined by a Rule

# Parameter:   id =  i_L, name = i_L, defined by a Rule

# assignmentRule: variable = Vs
Vs=a*V_membran+b
aux Vs=Vs

# assignmentRule: variable = alpha_m
alpha_m=0.1*(50-Vs)/(exp((50-Vs)/10)-1)
aux alpha_m=alpha_m

# assignmentRule: variable = beta_m
beta_m=4*exp((25-Vs)/18)
aux beta_m=beta_m

# assignmentRule: variable = m_infinity
m_infinit=alpha_m/(alpha_m+beta_m)
aux m_infinit=m_infinit

# assignmentRule: variable = alpha_h
alpha_h=0.07*exp((25-Vs)/20)
aux alpha_h=alpha_h

# assignmentRule: variable = beta_h
beta_h=1/(exp((55-Vs)/10)+1)
aux beta_h=beta_h

# assignmentRule: variable = h_infinity
h_infinit=alpha_h/(alpha_h+beta_h)
aux h_infinit=h_infinit

# assignmentRule: variable = tau_h
tau_h=12.5/(alpha_h+beta_h)
aux tau_h=tau_h

# rateRule: variable = h1
init h1=0.9
dh1/dt=(h_infinit-h1)/tau_h

# assignmentRule: variable = i_Na
i_Na=g_I*m_infinit^3*h1*(V_I-V_membran)
aux i_Na=i_Na

# assignmentRule: variable = x_infinity
x_infinit=1/(exp(0.15*(-V_membran-50))+1)
aux x_infinit=x_infinit

# rateRule: variable = x1
init x1=0.27
dx1/dt=(x_infinit-x1)/tau_x

# assignmentRule: variable = i_Ca
i_Ca=g_T*x1*(V_I-V_membran)
aux i_Ca=i_Ca

# assignmentRule: variable = alpha_n
alpha_n=0.01*(55-Vs)/(exp((55-Vs)/10)-1)
aux alpha_n=alpha_n

# assignmentRule: variable = beta_n
beta_n=0.125*exp((45-Vs)/80)
aux beta_n=beta_n

# assignmentRule: variable = n_infinity
n_infinit=alpha_n/(alpha_n+beta_n)
aux n_infinit=n_infinit

# assignmentRule: variable = tau_n
tau_n=12.5/(alpha_n+beta_n)
aux tau_n=tau_n

# rateRule: variable = n1
init n1=0.03
dn1/dt=(n_infinit-n1)/tau_n

# assignmentRule: variable = i_K
i_K=g_K*n1^4*(V_K-V_membran)
aux i_K=i_K

# rateRule: variable = c
init c=0.4
dc/dt=f*(K_c*x1*(V_Ca-V_membran)-c)

# assignmentRule: variable = i_K_Ca
i_K_Ca=g_K_Ca*c/(K_p+c)*(V_K-V_membran)
aux i_K_Ca=i_K_Ca

# assignmentRule: variable = i_L
i_L=g_L*(V_L-V_membran)
aux i_L=i_L

# rateRule: variable = V_membrane
init V_membran=-55.0
dV_membran/dt=i_Na+i_Ca+i_K+i_K_Ca+i_L

# Species:   id = V_membrane, name = V, defined in a rule 

# Species:   id = h1, name = h1, defined in a rule 

# Species:   id = x1, name = x1, defined in a rule 

# Species:   id = n1, name = n1, defined in a rule 

# Species:   id = c, name = c, defined in a rule 

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

