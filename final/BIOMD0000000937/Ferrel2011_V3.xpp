
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Ferrel2011 - Autonomous biochemical oscillator in regulation of CDK1, Plk1, and APC in Xenopus Laevis cell cycle
#
# is http://identifiers.org/biomodels.db/MODEL1809040004
# is http://identifiers.org/biomodels.db/BIOMD0000000937
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = function_for_APC_activation, name = function for APC activation
function_(a2,product,modifier,n2,k2)=(a2*(1-product)*modifier^n2/(k2^n2+modifier^n2))


# FunctionDefinition id = function_for_cdk1_inactivation, name = function for cdk1 inactivation
functio_1(b1,modifier,n1,k1,substrate)=(b1*substrate*modifier^n1/(k1^n1+modifier^n1))


# Compartment: id = compartment, name = nuclear, constant
par compartme=1.0

# Parameter:   id =  a1, name = a1, constant
par a1=0.1

# Parameter:   id =  a2, name = a2, constant
par a2=3.0

# Parameter:   id =  a3, name = a3, constant
par a3=3.0

# Parameter:   id =  b1, name = b1, constant
par b1=3.0

# Parameter:   id =  b2, name = b2, constant
par b2=1.0

# Parameter:   id =  b3, name = b3, constant
par b3=1.0

# Parameter:   id =  k1, name = k1, constant
par k1=0.5

# Parameter:   id =  k2, name = k2, constant
par k2=0.5

# Parameter:   id =  k3, name = k3, constant
par k3=0.5

# Parameter:   id =  n1, name = n1, constant
par n1=8.0

# Parameter:   id =  n2, name = n2, constant
par n2=8.0

# Parameter:   id =  n3, name = n3, constant
par n3=8.0

# Reaction: id = R1_Cdk1_activation_by_cyclin_synthesis, name = R1 Cdk1 activation by cyclin synthesis

R1_Cdk1_a=compartme*Constant_(a1)

# Reaction: id = R2_Cdk1_inactivation_by_APC_active, name = R2 Cdk1 inactivation by APC_active

R2_Cdk1_i=compartme*functio_1(b1, APC_activ, n1, k1, CDK1_acti)

# Reaction: id = R3_APC_activation_by_Cdk1_active, name = R3 APC activation by Cdk1_active

R3_APC_ac=compartme*function_(a3, APC_activ, Plk1_acti, n3, k3)

# Reaction: id = R4_APC_Inactivation, name = R4 APC Inactivation

R4_APC_In=compartme*b3*APC_activ

# Reaction: id = R5_Plk1_activation_by, name = R5 Plk1 activation by

R5_Plk1_a=compartme*function_(a2, Plk1_acti, CDK1_acti, n2, k2)

# Reaction: id = R6_Plk1_inactivation, name = R6 Plk1 inactivation

R6_Plk1_i=compartme*b2*Plk1_acti

# Species:   id = CDK1_active, name = CDK1_active, affected by kineticLaw

par CDK1_acti=0.0
aux CDK1_acti=CDK1_acti
dCDK1_acti/dt=(1/(compartme))*(( 1.0 * R1_Cdk1_a) + (-1.0 * R2_Cdk1_i))

# Species:   id = APC_active, name = APC_active, affected by kineticLaw

par APC_activ=0.0
aux APC_activ=APC_activ
dAPC_activ/dt=(1/(compartme))*(( 1.0 * R3_APC_ac) + (-1.0 * R4_APC_In))

# Species:   id = Plk1_active, name = Plk1_active, affected by kineticLaw

par Plk1_acti=0.0
aux Plk1_acti=Plk1_acti
dPlk1_acti/dt=(1/(compartme))*(( 1.0 * R5_Plk1_a) + (-1.0 * R6_Plk1_i))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

