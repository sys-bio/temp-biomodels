
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Lolas2016 - tumour-induced neoneurogenesis and perineural tumour growth
#
# isDescribedBy http://identifiers.org/pubmed/26861829
# is http://identifiers.org/biomodels.db/MODEL1907160001
# is http://identifiers.org/biomodels.db/BIOMD0000000750
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = extra_growth, name = extra growth
extra_gro(mod,k1,k2,pro)=(mod*pro/(k1+k2*mod))


# FunctionDefinition id = t_d_agm, name = t-d-agm
t_d_agm(dt,delta,A,Tp)=(dt*(1+delta*A)*Tp)


# FunctionDefinition id = t_g_ngf, name = t-g-ngf
t_g_ngf(Tp,rtp,G,t1,t2,kt,ONn)=(7/8*Tp*(rtp+G/(t1+t2*G))*(1-Tp/kt)*(Tp/ONn-1))


# FunctionDefinition id = uptake, name = uptake
uptake(y,Tp,n)=(y*Tp*n)


# FunctionDefinition id = migration, name = migration
migration(u0,u1,A,u2,Na,Tp)=((u0+u1*A+u2*Na)*Tp)


# FunctionDefinition id = _1nd_growth, name = 1nd growth
_1nd_grow(const,product)=(const*product)


# FunctionDefinition id = _1par_growth, name = 1par growth
_1par_gro(const,mod)=(const*mod)


# FunctionDefinition id = internalisation, name = internalisation
internali(k1,Tp,k2,S,P,sub)=((k1*Tp+k2*(S+P))*sub)


# FunctionDefinition id = n_g, name = n-g
n_g(r,n,k)=(r*(1-n/k)*n)


# Compartment: id = tumor_microenvironment, name = tumor microenvironment, constant
par tumor_mic=1.0

# Parameter:   id =  rtp, name = rtp, constant
par rtp=4.81E-4

# Parameter:   id =  rtm, name = rtm, constant
par rtm=1.0E-4

# Parameter:   id =  t1, name = t1, constant
par t1=134.27

# Parameter:   id =  t2, name = t2, constant
par t2=2.39

# Parameter:   id =  kt, name = kt, constant
par kt=1000000.0

# Parameter:   id =  theta1, name = theta1, constant
par theta1=10000.0

# Parameter:   id =  theta2, name = theta2, constant
par theta2=1.0

# Parameter:   id =  dt, name = dt, constant
par dt=0.0127

# Parameter:   id =  delta, name = delta, constant
par delta=0.0129

# Parameter:   id =  u0, name = u0, constant
par u0=0.22

# Parameter:   id =  u1, name = u1, constant
par u1=9.8E-6

# Parameter:   id =  u2, name = u2, constant
par u2=0.002

# Parameter:   id =  sg, name = sg, constant
par sg=0.00222

# Parameter:   id =  dg, name = dg, constant
par dg=22.18

# Parameter:   id =  y1, name = y1, constant
par y1=5.57E-5

# Parameter:   id =  y2, name = y2, constant
par y2=0.05

# Parameter:   id =  sA, name = sA, constant
par sA=0.00542

# Parameter:   id =  dA, name = dA, constant
par dA=2.4

# Parameter:   id =  y3, name = y3, constant
par y3=1.0E-5

# Parameter:   id =  y4, name = y4, constant
par y4=1.47E-5

# Parameter:   id =  rs, name = rs, constant
par rs=0.06

# Parameter:   id =  ks, name = ks, constant
par ks=0.26

# Parameter:   id =  sigma1, name = sigma1, constant
par sigma1=129.0

# Parameter:   id =  sigma2, name = sigma2, constant
par sigma2=50.0

# Parameter:   id =  sigma3, name = sigma3, constant
par sigma3=7.79

# Parameter:   id =  sigma4, name = sigma4, constant
par sigma4=0.01

# Parameter:   id =  rp, name = rp, constant
par rp=7.0

# Parameter:   id =  kp, name = kp, constant
par kp=0.03

# Parameter:   id =  p1, name = p1, constant
par p1=0.33

# Parameter:   id =  p2, name = p2, constant
par p2=0.1

# Parameter:   id =  p3, name = p3, constant
par p3=1.0

# Parameter:   id =  p4, name = p4, constant
par p4=0.01

# Parameter:   id =  cn, name = cn, constant
par cn=0.41

# Parameter:   id =  sn, name = sn, constant
par sn=1.6

# Parameter:   id =  dn, name = dn, constant
par dn=1.66

# Parameter:   id =  y5, name = y5, constant
par y5=0.002

# Parameter:   id =  ca, name = ca, constant
par ca=3990.0

# Parameter:   id =  sa, name = sa, constant
par sa_1=0.73

# Parameter:   id =  da, name = da, constant
par da_1=49.91

# Parameter:   id =  y6, name = y6, constant
par y6=0.001

# Parameter:   id =  ONn, name = ONn, defined by a Rule

# assignmentRule: variable = ONn
ONn=theta1/(1+theta2*Nn)
aux ONn=ONn

# Reaction: id = tumor_growth_NGF__logistic, name = tumor growth-NGF, logistic

tumor_gro=tumor_mic*t_g_ngf(Tp, rtp, G, t1, t2, kt, ONn)

# Reaction: id = tumor_death_AGM, name = tumor death-AGM

tumor_dea=tumor_mic*t_d_agm(dt, delta, A, Tp)

# Reaction: id = tumor_migration, name = tumor migration

tumor_mig=tumor_mic*migration(u0, u1, A, u2, Na, Tp)

# Reaction: id = migrating_tumor_cell_growth, name = migrating tumor cell growth

migrating=tumor_mic*_1nd_grow(rtm, Tm)

# Reaction: id = migrating_cell_death, name = migrating cell death

migrati_1=tumor_mic*dt*Tm

# Reaction: id = NGF_production, name = NGF production

NGF_produ=tumor_mic*_1par_gro(sg, Tp)

# Reaction: id = NGF_decay, name = NGF decay

NGF_decay=tumor_mic*dg*G

# Reaction: id = NGF_internalisation, name = NGF internalisation

NGF_inter=tumor_mic*internali(y1, Tp, y2, S, P, G)

# Reaction: id = AGM_production, name = AGM production

AGM_produ=tumor_mic*_1par_gro(sA, Tp)

# Reaction: id = AGM_decay, name = AGM decay

AGM_decay=tumor_mic*dA*A

# Reaction: id = AGM_internalisation, name = AGM internalisation

AGM_inter=tumor_mic*internali(y3, Tp, y4, S, P, A)

# Reaction: id = sympathetic_neuron_growth, name = sympathetic neuron growth

sympathet=tumor_mic*n_g(rs, S, ks)

# Reaction: id = sympathetic_neuron_growth_NGF, name = sympathetic neuron growth-NGF

sympath_1=tumor_mic*extra_gro(G, sigma1, sigma2, S)

# Reaction: id = sympathetic_neuron_growth_AGM, name = sympathetic neuron growth-AGM

sympath_2=tumor_mic*extra_gro(A, sigma3, sigma4, S)

# Reaction: id = parasym_neuron_growth, name = parasym neuron growth

parasym_n=tumor_mic*n_g(rp, P, kp)

# Reaction: id = parasym_neuron_growth_NGF, name = parasym neuron growth-NGF

parasym_1=tumor_mic*extra_gro(G, p1, p2, P)

# Reaction: id = parasym_neuron_growth_AGM, name = parasym neuron growth-AGM

parasym_2=tumor_mic*extra_gro(A, p3, p4, P)

# Reaction: id = norepinephrine_source, name = norepinephrine source

norepinep=tumor_mic*Constant_(cn)

# Reaction: id = norepinephrine_by_SNC, name = norepinephrine by SNC

norepin_1=tumor_mic*_1par_gro(sn, S)

# Reaction: id = norepinephrine_decay, name = norepinephrine decay

norepin_2=tumor_mic*dn*Nn

# Reaction: id = norepinephrine_uptake_tumor, name = norepinephrine uptake-tumor

norepin_3=tumor_mic*uptake(y5, Tp, Nn)

# Reaction: id = ACh_source, name = ACh source

ACh_sourc=tumor_mic*Constant_(ca)

# Reaction: id = ACh_by_PNC, name = ACh by PNC

ACh_by_PN=tumor_mic*_1par_gro(sa_1, P)

# Reaction: id = ACh_decay, name = ACh decay

ACh_decay=tumor_mic*da_1*Na

# Reaction: id = ACh_uptake_tumor, name = ACh uptake-tumor

ACh_uptak=tumor_mic*uptake(y6, Tp, Na)

# Species:   id = Tp, name = Tp, affected by kineticLaw

init Tp=100000.0
dTp/dt=(1/(tumor_mic))*(( 1.0 * tumor_gro) + (-1.0 * tumor_dea) + (-1.0 * tumor_mig))

# Species:   id = Tm, name = Tm, affected by kineticLaw

init Tm=0.0
dTm/dt=(1/(tumor_mic))*(( 1.0 * tumor_mig) + ( 1.0 * migrating) + (-1.0 * migrati_1))

# Species:   id = G, name = G, affected by kineticLaw

init G=0.0
dG/dt=(1/(tumor_mic))*(( 1.0 * NGF_produ) + (-1.0 * NGF_decay) + (-1.0 * NGF_inter))

# Species:   id = A, name = A, affected by kineticLaw

init A=0.0
dA/dt=(1/(tumor_mic))*(( 1.0 * AGM_produ) + (-1.0 * AGM_decay) + (-1.0 * AGM_inter))

# Species:   id = S, name = S, affected by kineticLaw

init S=0.26
dS/dt=(1/(tumor_mic))*(( 1.0 * sympathet) + ( 1.0 * sympath_1) + ( 1.0 * sympath_2))

# Species:   id = P, name = P, affected by kineticLaw

init P=0.03
dP/dt=(1/(tumor_mic))*(( 1.0 * parasym_n) + ( 1.0 * parasym_1) + ( 1.0 * parasym_2))

# Species:   id = Nn, name = Nn, affected by kineticLaw

init Nn=0.5
dNn/dt=(1/(tumor_mic))*(( 1.0 * norepinep) + ( 1.0 * norepin_1) + (-1.0 * norepin_2) + (-1.0 * norepin_3))

# Species:   id = Na, name = Na, affected by kineticLaw

init Na=80.0
dNa/dt=(1/(tumor_mic))*(( 1.0 * ACh_sourc) + ( 1.0 * ACh_by_PN) + (-1.0 * ACh_decay) + (-1.0 * ACh_uptak))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

