
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Kim2007_CellularMemory_SymmetricModel
#
# is http://identifiers.org/biomodels.db/MODEL8716097586
# is http://identifiers.org/biomodels.db/BIOMD0000000180
# isDescribedBy http://identifiers.org/pubmed/17892872
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  i1, name = i1, defined by a Rule

# Parameter:   id =  d_R1, name = d_R1, constant
par d_R1=0.23521

# Parameter:   id =  sP1R1, name = sP1R1, constant
par sP1R1=0.47305

# Parameter:   id =  d_P1, name = d_P1, constant
par d_P1=0.22367

# Parameter:   id =  sP1_prime_P1, name = sP1_prime_P1, constant
par sP1_prime=0.28687

# Parameter:   id =  s1, name = s1, constant
par s1=0.4

# Parameter:   id =  n, name = n, constant
par n=9.0

# Parameter:   id =  s3, name = s3, constant
par s3=0.2

# Parameter:   id =  d_P1_prime, name = d_P1_prime, constant
par d_P1_prim=0.37048

# Parameter:   id =  i2, name = i2, defined by a Rule

# Parameter:   id =  d_R2, name = d_R2, constant
par d_R2=0.23521

# Parameter:   id =  sP2R2, name = sP2R2, constant
par sP2R2=0.47305

# Parameter:   id =  d_P2, name = d_P2, constant
par d_P2=0.22367

# Parameter:   id =  sP2_prime_P2, name = sP2_prime_P2, constant
par sP2_prime=0.28687

# Parameter:   id =  s2, name = s2, constant
par s2=0.3

# Parameter:   id =  d_P2_prime, name = d_P2_prime, constant
par d_P2_prim=0.37048

# Parameter:   id =  sP3_prime_P2_prime, name = sP3_prime_P2_prime, constant
par sP3_prime=0.5

# Parameter:   id =  d_P3_prime, name = d_P3_prime, constant
par d_P3_prim=0.37048

# Parameter:   id =  d_P4_prime, name = d_P4_prime, constant
par d_P4_prim=0.37048

# Parameter:   id =  sP4_prime_P1_prime, name = sP4_prime_P1_prime, constant
par sP4_prime=0.5

# assignmentRule: variable = i2
i2= piecew1 
aux i2=i2

# assignmentRule: variable = i1
i1= piecew2 
aux i1=i1

# Reaction: id = React1

React1=i1

# Reaction: id = React2

React2=d_R1*R1

# Reaction: id = React3

React3=sP1R1*R1

# Reaction: id = React4

React4=d_P1*P1

# Reaction: id = React5

React5=sP1_prime*P1

# Reaction: id = React6

React6=s1/(1+P2_prime^n)

# Reaction: id = React7

React7=s3/(1+P3_prime^n)

# Reaction: id = React8

React8=d_P1_prim*P1_prime

# Reaction: id = React9

React9=i2

# Reaction: id = React10

React10=d_R2*R2

# Reaction: id = React11

React11=sP2R2*R2

# Reaction: id = React12

React12=d_P2*P2

# Reaction: id = React13

React13=sP2_prime*P2

# Reaction: id = React14

React14=s2/(1+P1_prime^n)

# Reaction: id = React15

React15=d_P2_prim*P2_prime

# Reaction: id = React16

React16=sP3_prime*P2_prime^n/(1+P2_prime^n)

# Reaction: id = React17

React17=d_P3_prim*P3_prime

# Reaction: id = React18

React18=s3/(1+P4_prime^n)

# Reaction: id = React19

React19=sP4_prime*P1_prime^n/(1+P1_prime^n)

# Reaction: id = React20

React20=d_P4_prim*P4_prime

# Species:   id = R1, name = R1, affected by kineticLaw

init R1=0.01
dR1/dt=( 1.0 * React1) + (-1.0 * React2)

# Species:   id = P1, name = P1, affected by kineticLaw

init P1=0.1
dP1/dt=( 1.0 * React3) + (-1.0 * React4)

# Species:   id = P1_prime, name = P1_prime, affected by kineticLaw

init P1_prime=0.1
dP1_prime/dt=( 1.0 * React5) + ( 1.0 * React6) + ( 1.0 * React7) + (-1.0 * React8)

# Species:   id = R2, name = R2, affected by kineticLaw

init R2=0.1
dR2/dt=( 1.0 * React9) + (-1.0 * React10)

# Species:   id = P2, name = P2, affected by kineticLaw

init P2=1.0
dP2/dt=( 1.0 * React11) + (-1.0 * React12)

# Species:   id = P2_prime, name = P2_prime, affected by kineticLaw

init P2_prime=1.0
dP2_prime/dt=( 1.0 * React13) + ( 1.0 * React14) + (-1.0 * React15) + ( 1.0 * React18)

# Species:   id = P3_prime, name = P3_prime, affected by kineticLaw

init P3_prime=0.1
dP3_prime/dt=( 1.0 * React16) + (-1.0 * React17)

# Species:   id = P4_prime, name = P4_prime, affected by kineticLaw

init P4_prime=0.1
dP4_prime/dt=( 1.0 * React19) + (-1.0 * React20)


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if ((t  >=  175) && (t  <=  225)) then (1) else (0)

piecew2=if ((t  >=  50) && (t  <=  100)) then (1) else (0)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

