
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Wilson2012 - tumor vaccine efficacy
#
# isDescribedBy http://identifiers.org/pubmed/22438084
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = er, name = er
er(d0,R,E)=(d0*R*E)


# FunctionDefinition id = es, name = es
es(f,E,T,c3,B)=(f*E*T/(1+c3*T*B))


# FunctionDefinition id = tg, name = tg
tg(a0,T,c0)=(a0*T*(1-c0*T))


# FunctionDefinition id = imm, name = imm
imm(d0,E,T,c1,B)=(d0*E*T/(1+c1*B))


# FunctionDefinition id = induced, name = induced
induced(d0,T,V)=(d0*T*V)


# FunctionDefinition id = tgfb, name = tgfb
tgfb(a1,T,c2)=(a1*T^2/(c2+T^2))


# Compartment: id = tme, name = tme, constant
par tme=1.0

# Parameter:   id =  g0, name = g0, constant
par g0=0.0

# Parameter:   id =  a0, name = a0, constant
par a0=0.1946

# Parameter:   id =  c0, name = c0, defined by a Rule

# Parameter:   id =  d0, name = d0, constant
par d0=1.0E-5

# Parameter:   id =  c1, name = c1, constant
par c1=100.0

# Parameter:   id =  a1, name = a1, constant
par a1=0.3

# Parameter:   id =  c2, name = c2, constant
par c2=300.0

# Parameter:   id =  d, name = d, constant
par d=7.0E-4

# Parameter:   id =  f, name = f, constant
par f=0.62

# Parameter:   id =  c3, name = c3, constant
par c3=300.0

# Parameter:   id =  r, name = r, constant
par r=0.01

# Parameter:   id =  d1, name = d1, constant
par d1=1.0E-5

# Parameter:   id =  c0inv, name = c0inv, constant
par c0inv=369.0

# assignmentRule: variable = c0
c0=1/c0inv
aux c0=c0

# Reaction: id = tumor_growth, name = tumor growth

tumor_gro=tme*tg(a0, T_renamed, c0)

# Reaction: id = tumor_immune, name = tumor immune

tumor_imm=tme*imm(d0, E, T_renamed, c1, B)

# Reaction: id = tumor_immune_induced, name = tumor immune-induced

tumor_i_1=tme*induced(d0, T_renamed, V)

# Reaction: id = tgfb_secretion, name = tgfb secretion

tgfb_secr=tme*tgfb(a1, T_renamed, c2)

# Reaction: id = tgfb_decay, name = tgfb decay

tgfb_deca=tme*d*B

# Reaction: id = effector_stimulation, name = effector stimulation

effector_=tme*es(f, E, T_renamed, c3, B)

# Reaction: id = effector_death, name = effector death

effecto_1=tme*d1*E

# Reaction: id = effector_regulation, name = effector regulation

effecto_2=tme*er(d0, R_1, E)

# Reaction: id = effector_conversion, name = effector conversion

effecto_3=tme*r*E

# Reaction: id = Treg_death, name = Treg death

Treg_deat=tme*d1*R_1

# Reaction: id = vaccine_decay, name = vaccine decay

vaccine_d=tme*d1*V

# Species:   id = T, name = T, affected by kineticLaw

par T_renamed=3.0
aux T_renamed=T_renamed
dT_renamed/dt=(1/(tme))*(( 1.0 * tumor_gro) + (-1.0 * tumor_imm) + (-1.0 * tumor_i_1))

# Species:   id = B, name = B, affected by kineticLaw

init B=0.0
dB/dt=(1/(tme))*(( 1.0 * tgfb_secr) + (-1.0 * tgfb_deca))

# Species:   id = E, name = E, affected by kineticLaw

init E=100.0
dE/dt=(1/(tme))*(( 1.0 * effector_) + (-1.0 * effecto_1) + (-1.0 * effecto_2) + (-1.0 * effecto_3))

# Species:   id = R, name = R, affected by kineticLaw

par R_1=1.0
aux R_1=R_1
dR_1/dt=(1/(tme))*(( 1.0 * effecto_3) + (-1.0 * Treg_deat))

# Species:   id = V, name = V, affected by kineticLaw
# Species is changed by 1 event(s)
init V=0.0
dV/dt=(1/(tme))*((-1.0 * vaccine_d))

# event : vaccine_administration
vaccine_a=if (t >= 3) then (1.5) else (0.2)
global 1 {vaccine_a - 1.1} {V=g0}

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

