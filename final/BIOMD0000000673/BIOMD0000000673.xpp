
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Lockwood2006 - Alzheimer's Disease PBPK model
#
# is http://identifiers.org/biomodels.db/MODEL1006230054
# isDescribedBy http://identifiers.org/pubmed/16906456
# is http://identifiers.org/biomodels.db/BIOMD0000000673
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = Compartment, name = Compartment, constant
par Compartme=1.0

# Parameter:   id =  S0, name = S0, constant
par S0=30.0

# Parameter:   id =  alpha, name = alpha, constant
par alpha=0.0164

# Parameter:   id =  MODEL_TIME, name = MODEL_TIME, constant
par MODEL_TIM=1.0

# Parameter:   id =  PD_CeP, name = PD_CeP, defined by a Rule

# Parameter:   id =  PD_CeA, name = PD_CeA, defined by a Rule

# Parameter:   id =  epsilon, name = epsilon, constant
par epsilon=0.0

# Parameter:   id =  S, name = S, defined by a Rule

# Parameter:   id =  Beta_P, name = Beta_P, constant
par Beta_P=-3.0

# Parameter:   id =  Keq_P, name = Keq_P, defined by a Rule

# Parameter:   id =  Kel_P, name = Kel_P, defined by a Rule

# Parameter:   id =  t_half_eq, name = t_half_eq, constant
par t_half_eq=6.0

# Parameter:   id =  t_half_el, name = t_half_el, constant
par t_half_el=7.0

# Parameter:   id =  Beta_A, name = Beta_A, constant
par Beta_A=-0.047

# Parameter:   id =  CeA, name = CeA, constant
par CeA=25.0

# Parameter:   id =  ECeA_50, name = ECeA_50, constant
par ECeA_50=21.0

# Parameter:   id =  Emax, name = Emax, defined by a Rule

# Parameter:   id =  n, name = n, defined by a Rule

# Parameter:   id =  CeA_U, name = CeA_U, defined by a Rule

# Parameter:   id =  ICea_U, name = ICea_U, defined by a Rule

# Parameter:   id =  ECea_U50, name = ECea_U50, constant
par ECea_U50=18.0

# Parameter:   id =  ICea_U50, name = ICea_U50, constant
par ICea_U50=38.0

# Parameter:   id =  MODEL_TYPE, name = MODEL_TYPE, constant
par MODEL_TYP=3.0

# Parameter:   id =  ANT_AGONIST_COMBINATION, name = ANT_AGONIST_COMBINATION, constant
par ANT_AGONI=0.0

# Parameter:   id =  Model_Inactive, name = Model_Inactive, defined by a Rule

# Parameter:   id =  Model_active_Linear, name = Model_active_Linear, defined by a Rule

# Parameter:   id =  Model_active_Hyperbolic, name = Model_active_Hyperbolic, defined by a Rule

# Parameter:   id =  Model_active_Sigmoidal, name = Model_active_Sigmoidal, defined by a Rule

# Parameter:   id =  Model_active_U_Shaped, name = Model_active_U_Shaped, defined by a Rule

# Parameter:   id =  ADAS_COG_P, name = ADAS_COG_P, defined by a Rule

# assignmentRule: variable = Keq_P
Keq_P=log(2)/t_half_eq
aux Keq_P=Keq_P

# assignmentRule: variable = Kel_P
Kel_P=log(2)/t_half_el
aux Kel_P=Kel_P

# assignmentRule: variable = Emax
Emax= piecew3 
aux Emax=Emax

# assignmentRule: variable = n
n= piecew5 
aux n=n

# assignmentRule: variable = CeA_U
CeA_U= piecew8 
aux CeA_U=CeA_U

# assignmentRule: variable = ICea_U
ICea_U= piecew11 
aux ICea_U=ICea_U

# assignmentRule: variable = Model_Inactive
Model_Ina=0*CeA
aux Model_Ina=Model_Ina

# assignmentRule: variable = Model_active_Linear
Model_act=Beta_A*CeA
aux Model_act=Model_act

# assignmentRule: variable = Model_active_Hyperbolic
Model_a_1=Emax*CeA/(ECeA_50+CeA)
aux Model_a_1=Model_a_1

# assignmentRule: variable = Model_active_Sigmoidal
Model_a_2=Emax*CeA^n/(ECeA_50^n+CeA^n)
aux Model_a_2=Model_a_2

# assignmentRule: variable = Model_active_U_Shaped
Model_a_3=Emax*(CeA_U^n/(ECea_U50^n+CeA_U^n)-ICea_U^n/(ICea_U50^n+ICea_U^n))
aux Model_a_3=Model_a_3

# assignmentRule: variable = PD_CeA
PD_CeA= piecew16 
aux PD_CeA=PD_CeA

# assignmentRule: variable = ADAS_COG_P
ADAS_COG_=Beta_P*Keq_P/(Keq_P-Kel_P)*(exp((-1)*Kel_P*MODEL_TIM)-exp((-1)*Keq_P*MODEL_TIM))
aux ADAS_COG_=ADAS_COG_

# assignmentRule: variable = PD_CeP
PD_CeP=ADAS_COG_
aux PD_CeP=PD_CeP

# assignmentRule: variable = S
S=S0+alpha*MODEL_TIM+PD_CeP+PD_CeA+epsilon
aux S=S


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if (MODEL_TYP  ==  4) then (-6) else (0)

piecew2=if (MODEL_TYP  ==  3) then (-3) else ( piecew1 )

piecew3=if (MODEL_TYP  ==  2) then (-4) else ( piecew2 )

piecew4=if (MODEL_TYP  ==  4) then (3) else (0)

piecew5=if (MODEL_TYP  ==  3) then (4) else ( piecew4 )

piecew6=if (ANT_AGONI  ==  2) then (0*CeA) else (0)

piecew7=if (ANT_AGONI  ==  0) then (0*CeA) else ( piecew6 )

piecew8=if (MODEL_TYP  ==  4) then ( piecew7 ) else (0)

piecew9=if (ANT_AGONI  ==  2) then (0*CeA) else (0)

piecew10=if (ANT_AGONI  ==  1) then (0*CeA) else ( piecew9 )

piecew11=if (MODEL_TYP  ==  4) then ( piecew10 ) else (0)

piecew12=if (MODEL_TYP  ==  4) then (Model_a_3) else (0)

piecew13=if (MODEL_TYP  ==  3) then (Model_a_2) else ( piecew12 )

piecew14=if (MODEL_TYP  ==  2) then (Model_a_1) else ( piecew13 )

piecew15=if (MODEL_TYP  ==  1) then (Model_act) else ( piecew14 )

piecew16=if (MODEL_TYP  ==  0) then (Model_Ina) else ( piecew15 )


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

