
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Hermansen2015 - denovo biosynthesis of pyrimidines in yeast
#
# is http://identifiers.org/biomodels.db/MODEL1512160000
# isDescribedBy http://identifiers.org/pubmed/26511837
# is http://identifiers.org/biomodels.db/BIOMD0000000590
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_r2, name = Function for r2
Function_(K_asp,K_m2,K_utp,asp,compartment,cp,utp,vmax2)=(vmax2*cp*asp/((1+utp/K_utp)*(K_m2+cp)*(K_asp+asp))/compartment)


# FunctionDefinition id = Function_for_r1, name = Function for r1
Functio_1(K_atp,K_bc,K_q,K_utp,atp,bc,compartment,glu,utp,vmax1)=(vmax1*bc*glu*atp/((1+utp/K_utp)*(K_atp+atp)*(K_bc+bc)*(K_q+glu))/compartment)


# FunctionDefinition id = Function_for_r3, name = Function for r3
Functio_2(K_m3,ca,compartment,vmax3)=(vmax3*ca/(K_m3+ca)/compartment)


# FunctionDefinition id = Function_for_r4, name = Function for r4
Functio_3(K_m4,compartment,dho,vmax4)=(vmax4*dho/(K_m4+dho)/compartment)


# FunctionDefinition id = Function_for_r5, name = Function for r5
Functio_4(K_m5,compartment,oro,prpp,vmax5)=(vmax5*oro*prpp/(K_m5+oro*prpp)/compartment)


# FunctionDefinition id = Function_for_r6, name = Function for r6
Functio_5(K_m6,compartment,omp,vmax6)=(vmax6*omp/(K_m6+omp)/compartment)


# FunctionDefinition id = Function_for_r10, name = Function for r10
Functio_6(K_m10,compartment,ump,vmax10)=(vmax10*ump/(K_m10+ump)/compartment)


# FunctionDefinition id = Function_for_r7, name = Function for r7
Functio_7(K_m7,compartment,udp,vmax7)=(vmax7*udp/(K_m7+udp)/compartment)


# FunctionDefinition id = Function_for_utp_degradation, name = Function for utp_degradation
Functio_8(K_Mp,compartment,g_pyr,utp)=(g_pyr*utp/(K_Mp+utp)/compartment)


# FunctionDefinition id = Function_for_r8, name = Function for r8
Functio_9(K_m8,compartment,utp,vmax8)=(vmax8*utp/(K_m8+utp)/compartment)


# FunctionDefinition id = Function_for_ctp_degradation, name = Function for ctp_degradation
Functi_10(K_Mp,compartment,ctp,g_pyr)=(g_pyr*ctp/(K_Mp+ctp)/compartment)


# FunctionDefinition id = Function_for_cp_dilution, name = Function for cp_dilution
Functi_11(compartment,cp,d)=(d*cp/compartment)


# FunctionDefinition id = Function_for_ca_dilution, name = Function for ca_dilution
Functi_12(ca,compartment,d)=(d*ca/compartment)


# FunctionDefinition id = Function_for_dho_dilution, name = Function for dho_dilution
Functi_13(compartment,d,dho)=(d*dho/compartment)


# FunctionDefinition id = Function_for_oro_dilution, name = Function for oro_dilution
Functi_14(compartment,d,oro)=(d*oro/compartment)


# FunctionDefinition id = Function_for_omp_dilution, name = Function for omp_dilution
Functi_15(compartment,d,omp)=(d*omp/compartment)


# FunctionDefinition id = Function_for_ump_dilution, name = Function for ump_dilution
Functi_16(compartment,d,ump)=(d*ump/compartment)


# FunctionDefinition id = Function_for_udp_dilution, name = Function for udp_dilution
Functi_17(compartment,d,udp)=(d*udp/compartment)


# FunctionDefinition id = Function_for_utp_dilution, name = Function for utp_dilution
Functi_18(compartment,d,utp)=(d*utp/compartment)


# FunctionDefinition id = Function_for_ctp_dilution, name = Function for ctp_dilution
Functi_19(compartment,ctp,d)=(d*ctp/compartment)


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  vmax1, name = vmax1, constant
par vmax1=3.61602627459517

# Parameter:   id =  bc, name = [bc], constant
par bc=1.52264278250403

# Parameter:   id =  glu, name = [glu], constant
par glu=0.54620785996429

# Parameter:   id =  K_utp, name = K_utp, constant
par K_utp=1.413855257896

# Parameter:   id =  K_q, name = K_q, constant
par K_q=0.05784981576165

# Parameter:   id =  K_bc, name = K_bc, constant
par K_bc=2.3716657188714

# Parameter:   id =  vmax2, name = vmax2, constant
par vmax2=2.44590712912244

# Parameter:   id =  asp, name = [asp], constant
par asp=0.0972544685826559

# Parameter:   id =  atp, name = [atp], constant
par atp=0.150650172583633

# Parameter:   id =  K_atp, name = K_atp, constant
par K_atp=1.28940553329954

# Parameter:   id =  K_m2, name = K_m2, constant
par K_m2=2.00489353757245

# Parameter:   id =  vmax3, name = vmax3, constant
par vmax3=28.6613123782585

# Parameter:   id =  K_m3, name = K_m3, constant
par K_m3=1.27179181717468

# Parameter:   id =  vmax4, name = vmax4, constant
par vmax4=91.7802875108298

# Parameter:   id =  K_m4, name = K_m4, constant
par K_m4=0.0160033122150611

# Parameter:   id =  vmax5, name = vmax5, constant
par vmax5=5227.49670547203

# Parameter:   id =  K_m5, name = K_m5, constant
par K_m5=0.0195216150005324

# Parameter:   id =  prpp, name = [prpp], constant
par prpp=0.181644900226225

# Parameter:   id =  vmax6, name = vmax6, constant
par vmax6=34.9720846528477

# Parameter:   id =  K_m6, name = K_m6, constant
par K_m6=20.3406449182435

# Parameter:   id =  vmax10, name = vmax10, constant
par vmax10=6.55543523218919

# Parameter:   id =  K_m10, name = K_m10, constant
par K_m10=0.0267841313759584

# Parameter:   id =  vmax7, name = vmax7, constant
par vmax7=5.83104141997666

# Parameter:   id =  K_m7, name = K_m7, constant
par K_m7=0.166382738667754

# Parameter:   id =  g_pyr, name = g_pyr, constant
par g_pyr=0.198306450999093

# Parameter:   id =  K_Mp, name = K_Mp, constant
par K_Mp=5.48714446027226

# Parameter:   id =  vmax8, name = vmax8, constant
par vmax8=0.162943604164789

# Parameter:   id =  K_m8, name = K_m8, constant
par K_m8=0.00435621076587497

# Parameter:   id =  K_asp, name = K_asp, constant
par K_asp=0.168308889432487

# Parameter:   id =  d, name = d, constant
par d=0.1

# Reaction: id = r1, name = r1

r1=compartme*Functio_1(K_atp, K_bc, K_q, K_utp, atp, bc, compartme, glu, utp, vmax1)

# Reaction: id = r2, name = r2

r2=compartme*Function_(K_asp, K_m2, K_utp, asp, compartme, cp, utp, vmax2)

# Reaction: id = r3, name = r3

r3=compartme*Functio_2(K_m3, ca, compartme, vmax3)

# Reaction: id = r4, name = r4

r4=compartme*Functio_3(K_m4, compartme, dho, vmax4)

# Reaction: id = r5, name = r5

r5=compartme*Functio_4(K_m5, compartme, oro, prpp, vmax5)

# Reaction: id = r6, name = r6

r6=compartme*Functio_5(K_m6, compartme, omp, vmax6)

# Reaction: id = r10, name = r10

r10=compartme*Functio_6(K_m10, compartme, ump, vmax10)

# Reaction: id = r7, name = r7

r7=compartme*Functio_7(K_m7, compartme, udp, vmax7)

# Reaction: id = utp_degradation, name = utp_degradation

utp_degra=compartme*Functio_8(K_Mp, compartme, g_pyr, utp)

# Reaction: id = r8, name = r8

r8=compartme*Functio_9(K_m8, compartme, utp, vmax8)

# Reaction: id = ctp_degradation, name = ctp_degradation

ctp_degra=compartme*Functi_10(K_Mp, compartme, ctp, g_pyr)

# Reaction: id = cp_dilution, name = cp_dilution

cp_diluti=compartme*Functi_11(compartme, cp, d)

# Reaction: id = ca_dilution, name = ca_dilution

ca_diluti=compartme*Functi_12(ca, compartme, d)

# Reaction: id = dho_dilution, name = dho_dilution

dho_dilut=compartme*Functi_13(compartme, d, dho)

# Reaction: id = oro_dilution, name = oro_dilution

oro_dilut=compartme*Functi_14(compartme, d, oro)

# Reaction: id = omp_dilution, name = omp_dilution

omp_dilut=compartme*Functi_15(compartme, d, omp)

# Reaction: id = ump_dilution, name = ump_dilution

ump_dilut=compartme*Functi_16(compartme, d, ump)

# Reaction: id = udp_dilution, name = udp_dilution

udp_dilut=compartme*Functi_17(compartme, d, udp)

# Reaction: id = utp_dilution, name = utp_dilution

utp_dilut=compartme*Functi_18(compartme, d, utp)

# Reaction: id = ctp_dilution, name = ctp_dilution

ctp_dilut=compartme*Functi_19(compartme, ctp, d)

# Species:   id = cp, name = cp, affected by kineticLaw

init cp=3.7E-4
dcp/dt=(1/(compartme))*(( 1.0 * r1) + (-1.0 * r2) + (-1.0 * cp_diluti))

# Species:   id = ca, name = ca, affected by kineticLaw

init ca=3.7E-4
dca/dt=(1/(compartme))*(( 1.0 * r2) + (-1.0 * r3) + (-1.0 * ca_diluti))

# Species:   id = dho, name = dho, affected by kineticLaw

init dho=3.7E-4
ddho/dt=(1/(compartme))*(( 1.0 * r3) + (-1.0 * r4) + (-1.0 * dho_dilut))

# Species:   id = oro, name = oro, affected by kineticLaw

init oro=3.7E-4
doro/dt=(1/(compartme))*(( 1.0 * r4) + (-1.0 * r5) + (-1.0 * oro_dilut))

# Species:   id = omp, name = omp, affected by kineticLaw

init omp=3.7E-4
domp/dt=(1/(compartme))*(( 1.0 * r5) + (-1.0 * r6) + (-1.0 * omp_dilut))

# Species:   id = ump, name = ump, affected by kineticLaw

init ump=3.7E-4
dump/dt=(1/(compartme))*(( 1.0 * r6) + (-1.0 * r10) + (-1.0 * ump_dilut))

# Species:   id = udp, name = udp, affected by kineticLaw

init udp=0.002886
dudp/dt=(1/(compartme))*(( 1.0 * r10) + (-1.0 * r7) + (-1.0 * udp_dilut))

# Species:   id = utp, name = utp, affected by kineticLaw

init utp=0.00666
dutp/dt=(1/(compartme))*(( 1.0 * r7) + (-1.0 * utp_degra) + (-1.0 * r8) + (-1.0 * utp_dilut))

# Species:   id = ctp, name = ctp, affected by kineticLaw

init ctp=3.7E-4
dctp/dt=(1/(compartme))*(( 1.0 * r8) + (-1.0 * ctp_degra) + (-1.0 * ctp_dilut))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

