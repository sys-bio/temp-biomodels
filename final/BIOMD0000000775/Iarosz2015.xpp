
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Iarosz2015 - brain tumor
#
# isDescribedBy http://identifiers.org/pubmed/25596516
# is http://identifiers.org/biomodels.db/MODEL1908020001
# is http://identifiers.org/biomodels.db/BIOMD0000000775
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = rateOf
# Inconsistent mathML operators in Function Definition, function ignored
# FunctionDefinition id = death, name = death
death(beta,sub,mod)=(beta*sub*mod)


# FunctionDefinition id = logistic, name = logistic
logistic(o,cell)=(o*cell*(1-cell))


# FunctionDefinition id = n, name = n+
n(a,gg,H,N)=(a*gg*H*N)


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = kill, name = kill
kill(p,sub,Q,a)=(p*sub*Q/(a+sub))


# Compartment: id = tme, name = tme, constant
par tme=1.0

# Parameter:   id =  o1, name = o1, constant
par o1=0.0068

# Parameter:   id =  b1, name = b1, constant
par b1=0.018

# Parameter:   id =  p1, name = p1, constant
par p1=4.7E-8

# Parameter:   id =  a1, name = a1, constant
par a1=1.0

# Parameter:   id =  o2, name = o2, constant
par o2=0.012

# Parameter:   id =  b2, name = b2, constant
par b2=0.0018

# Parameter:   id =  p2, name = p2, constant
par p2=4.7E-5

# Parameter:   id =  a2, name = a2, constant
par a2=1.0

# Parameter:   id =  a, name = a, constant
par a=2.0

# Parameter:   id =  p3, name = p3, constant
par p3=4.7E-8

# Parameter:   id =  a3, name = a3, constant
par a3=1.0

# Parameter:   id =  fi, name = fi, constant
par fi=100.0

# Parameter:   id =  zeta, name = zeta, constant
par zeta=0.2

# Parameter:   id =  H, name = H, defined by a Rule

# Parameter:   id =  gg, name = gg, defined by a Rule

# assignmentRule: variable = gg
gg=rateOf(G)
aux gg=gg

# assignmentRule: variable = H
H= piecew2 
aux H=H

# Reaction: id = gc_growth, name = gc growth

gc_growth=tme*logistic(o1, G)

# Reaction: id = gc_death, name = gc death

gc_death=tme*death(b1, G, C)

# Reaction: id = gc_killing, name = gc killing

gc_killin=tme*kill(p1, G, Q, a1)

# Reaction: id = cc_growth, name = cc growth

cc_growth=tme*logistic(o2, C)

# Reaction: id = cc_death, name = cc death

cc_death=tme*death(b2, C, G)

# Reaction: id = cc_killing, name = cc killing

cc_killin=tme*kill(p2, C, Q, a2)

# Reaction: id = n_increase, name = n increase

n_increas=tme*n(a, gg, H, N_1)

# Reaction: id = n_killing, name = n killing

n_killing=tme*kill(p3, N_1, Q, a3)

# Reaction: id = chemotherapy, name = chemotherapy

chemother=tme*Constant_(fi)

# Reaction: id = drug_decay, name = drug decay

drug_deca=tme*zeta*Q

# Species:   id = G, name = G, affected by kineticLaw

init G=0.99
dG/dt=(1/(tme))*(( 1.0 * gc_growth) + (-1.0 * gc_death) + (-1.0 * gc_killin))

# Species:   id = C, name = C, affected by kineticLaw

init C=0.01
dC/dt=(1/(tme))*(( 1.0 * cc_growth) + (-1.0 * cc_death) + (-1.0 * cc_killin))

# Species:   id = N, name = N, affected by kineticLaw

par N_1=0.99
aux N_1=N_1
dN_1/dt=(1/(tme))*(( 1.0 * n_increas) + (-1.0 * n_killing))

# Species:   id = Q, name = Q, affected by kineticLaw

init Q=0.0
dQ/dt=(1/(tme))*(( 1.0 * chemother) + (-1.0 * drug_deca))


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if ((-gg)  >  0) then (1) else (0.5)

piecew2=if ((-gg)  <  0) then (0) else ( piecew1 )


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

