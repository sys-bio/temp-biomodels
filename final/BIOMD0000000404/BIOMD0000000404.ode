
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Bray1993_chemotaxis
#
# is http://identifiers.org/biomodels.db/MODEL6929313478
# is http://identifiers.org/biomodels.db/BIOMD0000000404
# isDescribedBy http://identifiers.org/pubmed/8334303
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = function_4_motor_r1, name = function_4_motor_r1
function_(M,MYp,Yp,cell,ka,kappa)=(ka*(M*Yp-kappa/4*MYp)/cell)


# FunctionDefinition id = function_4_motor_r2, name = function_4_motor_r2
functio_1(MYp,MYpYp,Yp,alpha,cell,ka,kappa)=(ka*(MYp*Yp-2*alpha*kappa/3*MYpYp)/cell)


# FunctionDefinition id = function_4_motor_r3, name = function_4_motor_r3
functio_2(MYpYp,MYpYpYp,Yp,alpha,cell,ka,kappa)=(ka*(MYpYp*Yp-3*alpha*alpha*kappa/2*MYpYpYp)/cell)


# FunctionDefinition id = function_4_motor_r4, name = function_4_motor_r4
functio_3(MYpYpYp,MYpYpYpYp,Yp,alpha,cell,ka,kappa)=(ka*(MYpYpYp*Yp-4*alpha*alpha*alpha*kappa*MYpYpYpYp)/cell)


# FunctionDefinition id = Autophosphorylation, name = Autophosphorylation
Autophosp(kcat,correction,E)=(kcat*correction*E)


# FunctionDefinition id = ModAutophosphorylation, name = ModAutophosphorylation
ModAutoph(M,S,kcat,correction)=(M*S*kcat*correction)


# Compartment: id = cell, name = cell, constant
par cell=1.41E-15

# Parameter:   id =  alpha, name = alpha, constant
par alpha=0.14

# Parameter:   id =  kappa, name = kappa, constant
par kappa=2.25E-7

# Parameter:   id =  ka, name = ka, constant
par ka=0.1

# Parameter:   id =  Bias, name = Bias, defined by a Rule

# Parameter:   id =  parameter_1, name = asp_pulse, constant
par parameter=1.0E-7

# Parameter:   id =  parameter_2, name = autoPhospho, defined by a Rule

# Parameter:   id =  parameter_3, name = KmATP, constant
par paramet_2=3.0E-4

# assignmentRule: variable = Bias
Bias=(M+MYp)/(M+MYp+MYpYp+MYpYpYp+MYpYpYpYp)
aux Bias=Bias

# assignmentRule: variable = parameter_2
paramet_1=species_1/(species_1+paramet_2)
aux paramet_1=paramet_1

# Reaction: id = phosphorylation_r1, name = A->Ap
# Local Parameter:   id =  kcat, name = kcat
par kcat=0.001


phosphory=cell*Autophosp(kcat, paramet_1, A)

# Reaction: id = phosphorylation_r2, name = TWA+A->TWA+Ap
# Local Parameter:   id =  kcat, name = kcat
par kcat_1=75000.0


phospho_1=cell*ModAutoph(TWA, A, kcat_1, paramet_1)

# Reaction: id = phosphorylation_r3, name = Tni_WA+A->Tni_WA+Ap
# Local Parameter:   id =  kcat, name = kcat
par kcat_1_2=200000.0


phospho_2=cell*ModAutoph(Tni_WA, A, kcat_1_2, paramet_1)

# Reaction: id = phosphorylation_r4, name = Tasp_WA+Yp->Tasp_WA+Y
# Local Parameter:   id =  k1, name = k1
par k1=1.0E8


phospho_3=cell*k1*Tasp_WA*Yp

# Reaction: id = phosphorylation_r5, name = Ap+Y->A+Yp
# Local Parameter:   id =  k1, name = k1
par k1_1=200000.0


phospho_4=cell*k1_1*Ap*Y

# Reaction: id = phosphorylation_r6, name = Y ->Yp
# Local Parameter:   id =  kcat, name = kcat
par kcat_1__3=0.0


phospho_5=cell*Autophosp(kcat_1__3, paramet_1, Y)

# Reaction: id = phosphorylation_r7, name = Yp->Y
# Local Parameter:   id =  k1, name = k1
par k1_1_2=0.037


phospho_6=cell*k1_1_2*Yp

# Reaction: id = phosphorylation_r8, name = Yp+Z->Y+Z
# Local Parameter:   id =  k1, name = k1
par k1_1_2_3=500000.0


phospho_7=cell*k1_1_2_3*Yp*Z

# Reaction: id = phosphorylation_r9, name = Ap+B->A+Bp
# Local Parameter:   id =  k1, name = k1
par k1_1_2__4=1000000.0


phospho_8=cell*k1_1_2__4*Ap*B

# Reaction: id = phosphorylation_r10, name = Bp->B
# Local Parameter:   id =  k1, name = k1
par k1_1_2__5=1.0


phospho_9=cell*k1_1_2__5*Bp

# Reaction: id = regulatory_r1, name = T+asp<->Tasp
# Local Parameter:   id =  k1, name = k1
par k1_1_2__6=1000000.0

# Local Parameter:   id =  k2, name = k2
par k2=1.0


regulator=cell*(k1_1_2__6*T_renamed*asp-k2*Tasp)

# Reaction: id = regulatory_r2, name = T+ni<->Tni
# Local Parameter:   id =  k1, name = k1
par k1_1_2__7=1000.0

# Local Parameter:   id =  k2, name = k2
par k2_1=1.0


regulat_1=cell*(k1_1_2__7*T_renamed*ni-k2_1*Tni)

# Reaction: id = regulatory_r3, name = T+W<->TW
# Local Parameter:   id =  k1, name = k1
par k1_1_2__8=100000.0

# Local Parameter:   id =  k2, name = k2
par k2_1_2=1.0


regulat_2=cell*(k1_1_2__8*T_renamed*W-k2_1_2*TW)

# Reaction: id = regulatory_r4, name = T+A<->TA
# Local Parameter:   id =  k1, name = k1
par k1_1_2__9=10000.0

# Local Parameter:   id =  k2, name = k2
par k2_1_2_3=1.0


regulat_3=cell*(k1_1_2__9*T_renamed*A-k2_1_2_3*TA)

# Reaction: id = regulatory_r5, name = W+A<->WA
# Local Parameter:   id =  k1, name = k1
par k1_1_2_10=100000.0

# Local Parameter:   id =  k2, name = k2
par k2_1_2__4=1.0


regulat_4=cell*(k1_1_2_10*W*A-k2_1_2__4*WA)

# Reaction: id = regulatory_r6, name = TW+A<->TWA
# Local Parameter:   id =  k1, name = k1
par k1_1_2_11=400000.0

# Local Parameter:   id =  k2, name = k2
par k2_1_2__5=1.0


regulat_5=cell*(k1_1_2_11*TW*A-k2_1_2__5*TWA)

# Reaction: id = regulatory_r7, name = TA+W<->TWA
# Local Parameter:   id =  k1, name = k1
par k1_1_2_12=400000.0

# Local Parameter:   id =  k2, name = k2
par k2_1_2__6=1.0


regulat_6=cell*(k1_1_2_12*TA*W-k2_1_2__6*TWA)

# Reaction: id = regulatory_r8, name = T+WA<->TWA
# Local Parameter:   id =  k1, name = k1
par k1_1_2_13=400000.0

# Local Parameter:   id =  k2, name = k2
par k2_1_2__7=1.0


regulat_7=cell*(k1_1_2_13*T_renamed*WA-k2_1_2__7*TWA)

# Reaction: id = regulatory_r9, name = Tasp+W<->Tasp_W
# Local Parameter:   id =  k1, name = k1
par k1_1_2_14=100000.0

# Local Parameter:   id =  k2, name = k2
par k2_1_2__8=1.0


regulat_8=cell*(k1_1_2_14*Tasp*W-k2_1_2__8*Tasp_W)

# Reaction: id = regulatory_r10, name = Tasp+A<->Tasp_A
# Local Parameter:   id =  k1, name = k1
par k1_1_2_15=10000.0

# Local Parameter:   id =  k2, name = k2
par k2_1_2__9=1.0


regulat_9=cell*(k1_1_2_15*Tasp*A-k2_1_2__9*Tasp_A)

# Reaction: id = regulatory_r11, name = Tasp_W+A<->Tasp_WA
# Local Parameter:   id =  k1, name = k1
par k1_1_2_16=400000.0

# Local Parameter:   id =  k2, name = k2
par k2_1_2_10=1.0


regula_10=cell*(k1_1_2_16*Tasp_W*A-k2_1_2_10*Tasp_WA)

# Reaction: id = regulatory_r12, name = Tasp_A+W<->Tasp_WA
# Local Parameter:   id =  k1, name = k1
par k1_1_2_17=400000.0

# Local Parameter:   id =  k2, name = k2
par k2_1_2_11=1.0


regula_11=cell*(k1_1_2_17*Tasp_A*W-k2_1_2_11*Tasp_WA)

# Reaction: id = regulatory_r13, name = Tasp+WA<->Tasp_WA
# Local Parameter:   id =  k1, name = k1
par k1_1_2_18=400000.0

# Local Parameter:   id =  k2, name = k2
par k2_1_2_12=1.0


regula_12=cell*(k1_1_2_18*Tasp*WA-k2_1_2_12*Tasp_WA)

# Reaction: id = regulatory_r14, name = Tni+W<->Tni_W
# Local Parameter:   id =  k1, name = k1
par k1_1_2_19=0.1

# Local Parameter:   id =  k2, name = k2
par k2_1_2_13=1.0


regula_13=cell*(k1_1_2_19*Tni*W-k2_1_2_13*Tni_W)

# Reaction: id = regulatory_r15, name = Tni+A<->Tni_A
# Local Parameter:   id =  k1, name = k1
par k1_1_2_20=0.01

# Local Parameter:   id =  k2, name = k2
par k2_1_2_14=1.0


regula_14=cell*(k1_1_2_20*Tni*A-k2_1_2_14*Tni_A)

# Reaction: id = regulatory_r16, name = Tni_W+A<->Tni_WA
# Local Parameter:   id =  k1, name = k1
par k1_1_2_21=0.4

# Local Parameter:   id =  k2, name = k2
par k2_1_2_15=1.0


regula_15=cell*(k1_1_2_21*Tni_W*A-k2_1_2_15*Tni_WA)

# Reaction: id = regulatory_r17, name = Tni_A+W<->Tni_WA
# Local Parameter:   id =  k1, name = k1
par k1_1_2_22=0.4

# Local Parameter:   id =  k2, name = k2
par k2_1_2_16=1.0


regula_16=cell*(k1_1_2_22*Tni_A*W-k2_1_2_16*Tni_WA)

# Reaction: id = regulatory_r18, name = Tni+WA<->Tni_WA
# Local Parameter:   id =  k1, name = k1
par k1_1_2_23=0.4

# Local Parameter:   id =  k2, name = k2
par k2_1_2_17=1.0


regula_17=cell*(k1_1_2_23*Tni*WA-k2_1_2_17*Tni_WA)

# Reaction: id = motor_r1, name = M+Yp<->MYp

motor_r1=cell*function_(M, MYp, Yp, cell, ka, kappa)

# Reaction: id = motor_r2, name = MYp+Yp<->MYpYp

motor_r2=cell*functio_1(MYp, MYpYp, Yp, alpha, cell, ka, kappa)

# Reaction: id = motor_r3, name = MYpYp+Yp<->MYpYpYp

motor_r3=cell*functio_2(MYpYp, MYpYpYp, Yp, alpha, cell, ka, kappa)

# Reaction: id = motor_r4, name = MYpYpYp+Yp<->MYpYpYpYp

motor_r4=cell*functio_3(MYpYpYp, MYpYpYpYp, Yp, alpha, cell, ka, kappa)

# Reaction: id = reaction_1, name = TA + asp <-> Tasp_A
# Local Parameter:   id =  k1, name = k1
par k1_1_2_24=1000000.0

# Local Parameter:   id =  k2, name = k2
par k2_1_2_18=1.0


reaction_=cell*(k1_1_2_24*TA*asp-k2_1_2_18*Tasp_A)

# Reaction: id = reaction_2, name = TW+asp <-> Tasp_W
# Local Parameter:   id =  k1, name = k1
par k1_1_2_25=1000000.0

# Local Parameter:   id =  k2, name = k2
par k2_1_2_19=1.0


reactio_1=cell*(k1_1_2_25*TW*asp-k2_1_2_19*Tasp_W)

# Reaction: id = reaction_3, name = TWA+asp <-> Tasp_WA
# Local Parameter:   id =  k1, name = k1
par k1_1_2_26=1000000.0

# Local Parameter:   id =  k2, name = k2
par k2_1_2_20=1.0


reactio_2=cell*(k1_1_2_26*TWA*asp-k2_1_2_20*Tasp_WA)

# Species:   id = asp, name = asp# Species is changed by 2 event(s)
par asp=0.0
aux asp=asp

# Species:   id = ni, name = ni, constant
par ni=0.0


# Species:   id = T, name = T, affected by kineticLaw

par T_renamed=3.12E-6
aux T_renamed=T_renamed
dT_renamed/dt=(1/(cell))*((-1.0 * regulator) + (-1.0 * regulat_1) + (-1.0 * regulat_2) + (-1.0 * regulat_3) + (-1.0 * regulat_7))

# Species:   id = Tasp, name = Tasp, affected by kineticLaw

init Tasp=0.0
dTasp/dt=(1/(cell))*(( 1.0 * regulator) + (-1.0 * regulat_8) + (-1.0 * regulat_9) + (-1.0 * regula_12))

# Species:   id = Tni, name = Tni, affected by kineticLaw

init Tni=0.0
dTni/dt=(1/(cell))*(( 1.0 * regulat_1) + (-1.0 * regula_13) + (-1.0 * regula_14) + (-1.0 * regula_17))

# Species:   id = W, name = W, affected by kineticLaw

init W=2.89E-6
dW/dt=(1/(cell))*((-1.0 * regulat_2) + (-1.0 * regulat_4) + (-1.0 * regulat_6) + (-1.0 * regulat_8) + (-1.0 * regula_11) + (-1.0 * regula_13) + (-1.0 * regula_16))

# Species:   id = TW, name = TW, affected by kineticLaw

init TW=5.91E-7
dTW/dt=(1/(cell))*(( 1.0 * regulat_2) + (-1.0 * regulat_5) + (-1.0 * reactio_1))

# Species:   id = Tasp_W, name = Tasp_W, affected by kineticLaw

init Tasp_W=0.0
dTasp_W/dt=(1/(cell))*(( 1.0 * regulat_8) + (-1.0 * regula_10) + ( 1.0 * reactio_1))

# Species:   id = Tni_W, name = Tni_W, affected by kineticLaw

init Tni_W=0.0
dTni_W/dt=(1/(cell))*(( 1.0 * regula_13) + (-1.0 * regula_15))

# Species:   id = TA, name = TA, affected by kineticLaw

init TA=4.44E-7
dTA/dt=(1/(cell))*(( 1.0 * regulat_3) + (-1.0 * regulat_6) + (-1.0 * reaction_))

# Species:   id = Tasp_A, name = Tasp_A, affected by kineticLaw

init Tasp_A=0.0
dTasp_A/dt=(1/(cell))*(( 1.0 * regulat_9) + (-1.0 * regula_11) + ( 1.0 * reaction_))

# Species:   id = Tni_A, name = Tni_A, affected by kineticLaw

init Tni_A=0.0
dTni_A/dt=(1/(cell))*(( 1.0 * regula_14) + (-1.0 * regula_16))

# Species:   id = WA, name = WA, affected by kineticLaw

init WA=6.78E-7
dWA/dt=(1/(cell))*(( 1.0 * regulat_4) + (-1.0 * regulat_7) + (-1.0 * regula_12) + (-1.0 * regula_17))

# Species:   id = TWA, name = TWA, affected by kineticLaw

init TWA=8.47E-7
dTWA/dt=(1/(cell))*(( 1.0 * regulat_5) + ( 1.0 * regulat_6) + ( 1.0 * regulat_7) + (-1.0 * reactio_2))

# Species:   id = Tasp_WA, name = Tasp_WA, affected by kineticLaw

init Tasp_WA=0.0
dTasp_WA/dt=(1/(cell))*((-1.0 * phospho_3) + ( 1.0 * phospho_3) + ( 1.0 * regula_10) + ( 1.0 * regula_11) + ( 1.0 * regula_12) + ( 1.0 * reactio_2))

# Species:   id = Tni_WA, name = Tni_WA, affected by kineticLaw

init Tni_WA=0.0
dTni_WA/dt=(1/(cell))*(( 1.0 * regula_15) + ( 1.0 * regula_16) + ( 1.0 * regula_17))

# Species:   id = A, name = A, affected by kineticLaw

init A=3.0E-6
dA/dt=(1/(cell))*((-1.0 * phosphory) + (-1.0 * phospho_1) + (-1.0 * phospho_2) + ( 1.0 * phospho_4) + ( 1.0 * phospho_8) + (-1.0 * regulat_3) + (-1.0 * regulat_4) + (-1.0 * regulat_5) + (-1.0 * regulat_9) + (-1.0 * regula_10) + (-1.0 * regula_14) + (-1.0 * regula_15))

# Species:   id = Ap, name = Ap, affected by kineticLaw

init Ap=3.48E-8
dAp/dt=(1/(cell))*(( 1.0 * phosphory) + ( 1.0 * phospho_1) + ( 1.0 * phospho_2) + (-1.0 * phospho_4) + (-1.0 * phospho_8))

# Species:   id = B, name = B, affected by kineticLaw

init B=1.93E-6
dB/dt=(1/(cell))*((-1.0 * phospho_8) + ( 1.0 * phospho_9))

# Species:   id = Bp, name = Bp, affected by kineticLaw

init Bp=6.87E-8
dBp/dt=(1/(cell))*(( 1.0 * phospho_8) + (-1.0 * phospho_9))

# Species:   id = Z, name = Z, affected by kineticLaw

init Z=2.0E-5
dZ/dt=(1/(cell))*((-1.0 * phospho_7) + ( 1.0 * phospho_7))

# Species:   id = Y, name = Y, affected by kineticLaw

init Y=9.9E-6
dY/dt=(1/(cell))*(( 1.0 * phospho_3) + (-1.0 * phospho_4) + (-1.0 * phospho_5) + ( 1.0 * phospho_6) + ( 1.0 * phospho_7))

# Species:   id = Yp, name = Yp, affected by kineticLaw

init Yp=7.0E-9
dYp/dt=(1/(cell))*((-1.0 * phospho_3) + ( 1.0 * phospho_4) + ( 1.0 * phospho_5) + (-1.0 * phospho_6) + (-1.0 * phospho_7) + (-1.0 * motor_r1) + (-1.0 * motor_r2) + (-1.0 * motor_r3) + (-1.0 * motor_r4))

# Species:   id = M, name = M, affected by kineticLaw

init M=6.24E-9
dM/dt=(1/(cell))*((-1.0 * motor_r1))

# Species:   id = MYp, name = MYp, affected by kineticLaw

init MYp=7.77E-10
dMYp/dt=(1/(cell))*(( 1.0 * motor_r1) + (-1.0 * motor_r2))

# Species:   id = MYpYp, name = MYpYp, affected by kineticLaw

init MYpYp=2.99E-10
dMYpYp/dt=(1/(cell))*(( 1.0 * motor_r2) + (-1.0 * motor_r3))

# Species:   id = MYpYpYp, name = MYpYpYp, affected by kineticLaw

init MYpYpYp=3.78E-10
dMYpYpYp/dt=(1/(cell))*(( 1.0 * motor_r3) + (-1.0 * motor_r4))

# Species:   id = MYpYpYpYp, name = MYpYpYpYp, affected by kineticLaw

init MYpYpYpYp=2.31E-9
dMYpYpYpYp/dt=(1/(cell))*(( 1.0 * motor_r4))

# Species:   id = species_1, name = ATP, constant
par species_1=0.1


# event : event_1
event_1=if (t >= 5) then (1.5) else (0.2)
global 1 {event_1 - 1.1} {asp=parameter}

# event : event_2
event_2=if (t >= 10) then (1.5) else (0.2)
global 1 {event_2 - 1.1} {asp=0}

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

