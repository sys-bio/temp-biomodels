
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Smolen2002_CircClock
#
# is http://identifiers.org/biomodels.db/MODEL6618294363
# is http://identifiers.org/biomodels.db/BIOMD0000000025
# isDescribedBy http://identifiers.org/pubmed/12414672
# isDerivedFrom http://identifiers.org/pubmed/11517254
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = CELL, name = CELL, constant
par CELL=1.0E-15

# Parameter:   id =  dClkF_tau1, name = dClkF_tau1, defined by a Rule

# Parameter:   id =  dClkF_tau2, name = dClkF_tau2, defined by a Rule

# Parameter:   id =  tau1, name = tau1, constant
par tau1=10.0

# Parameter:   id =  tau2, name = tau2, constant
par tau2=10.0

# Parameter:   id =  Vsp, name = Vsp, constant
par Vsp=0.5

# Parameter:   id =  K1, name = K1, constant
par K1=0.3

# Parameter:   id =  Vsc, name = Vsc, constant
par Vsc=0.25

# Parameter:   id =  K2, name = K2, constant
par K2=0.1

# Parameter:   id =  kdc, name = kdc, constant
par kdc=0.5

# Parameter:   id =  kdp, name = kdp, constant
par kdp=0.5

# assignmentRule: variable = dClkF
dClkF= piecew1 
aux dClkF=dClkF

# assignmentRule: variable = dClkF_tau1
dClkF_tau= piecew2 
aux dClkF_tau=dClkF_tau

# assignmentRule: variable = dClkF_tau2
dClkF_t_1= piecew3 
aux dClkF_t_1=dClkF_t_1

# Reaction: id = rPer, name = Per production

rPer=Vsp*dClkF_tau/(K1+dClkF_tau)*CELL

# Reaction: id = rdClk, name = dClk production

rdClk=CELL*Vsc*K2/(K2+dClkF_t_1)

# Reaction: id = rPerD, name = Per degradation

rPerD=kdc*Per*CELL

# Reaction: id = rdClkD, name = dClk degradation

rdClkD=kdp*dClk*CELL

# Species:   id = EmptySet, name = EmptySet, constant
par EmptySet=0.0


# Species:   id = Per, name = Per, affected by kineticLaw

init Per=5.0E-16
dPer/dt=(1/(CELL))*(( 1.0 * rPer) + (-1.0 * rPerD))

# Species:   id = dClk, name = dClk, affected by kineticLaw

init dClk=1.0E-16
ddClk/dt=(1/(CELL))*(( 1.0 * rdClk) + (-1.0 * rdClkD))

# Species:   id = dClkF, name = free dClk, defined in a rule 


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if ((dClk-Per)  <  0) then (0) else (dClk-Per)

piecew2=if ((delay(dClk, tau1)-delay(Per, tau1))  <  0) then (0) else (delay(dClk, tau1)-delay(Per, tau1))

piecew3=if ((delay(dClk, tau2)-delay(Per, tau2))  <  0) then (0) else (delay(dClk, tau2)-delay(Per, tau2))


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

