
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Mayya2005_STATmodule
#
# is http://identifiers.org/biomodels.db/MODEL6095659304
# is http://identifiers.org/biomodels.db/BIOMD0000000167
# isDescribedBy http://identifiers.org/pubmed/17091582
# isDerivedFrom http://identifiers.org/biomodels.db/BIOMD0000000093
# isDerivedFrom http://identifiers.org/biomodels.db/BIOMD0000000094
# isDerivedFrom http://identifiers.org/pubmed/12552139
# isDerivedFrom http://identifiers.org/pubmed/15240442
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = nuc, name = nuc, constant
par nuc=1.0

# Compartment: id = sol, name = sol, constant
par sol=14.625

# Compartment: id = nm, name = nm, constant
par nm=1.0

# assignmentRule: variable = statKinase_sol
statKinas= piecew1 
aux statKinas=statKinas

# Reaction: id = PstatDimerisation, name = PstatDimerisation
# Local Parameter:   id =  Kf_PstatDimerisation, name = Kf_PstatDimerisation
par Kf_PstatD=0.6

# Local Parameter:   id =  Kr_PstatDimerisation, name = Kr_PstatDimerisation
par Kr_PstatD=0.03


PstatDi_2=(Kf_PstatD*Pstat_sol^2+(-Kr_PstatD*PstatDime))*sol

# Reaction: id = statDephosphorylation, name = statDephosphorylation
# Local Parameter:   id =  Kcat_dephos, name = Kcat_dephos
par Kcat_deph=1.0

# Local Parameter:   id =  Km_dephos, name = Km_dephos
par Km_dephos=2.0


statDepho=Kcat_deph*statPhosp*Pstat_nuc*1/(Km_dephos+Pstat_nuc)*nuc

# Reaction: id = statPhosphorylation, name = statPhosphorylation
# Local Parameter:   id =  Kcat_phos, name = Kcat_phos
par Kcat_phos=1.0

# Local Parameter:   id =  Km_phos, name = Km_phos
par Km_phos=4.0


statPho_1=Kcat_phos*statKinas*stat_sol*1/(Km_phos+stat_sol)*sol

# Reaction: id = PstatDimerisationNuc, name = PstatDimerisationNuc
# Local Parameter:   id =  Kf_PstatDimerisation, name = Kf_PstatDimerisation
par Kf_Psta_1=0.6

# Local Parameter:   id =  Kr_PstatDimerisation, name = Kr_PstatDimerisation
par Kr_Psta_1=0.03


PstatDi_3=(Kf_Psta_1*Pstat_nuc^2+(-Kr_Psta_1*PstatDi_1))*nuc

# Reaction: id = PstatDimer__import, name = PstatDimer_ import
# Local Parameter:   id =  PstatDimer_impMax, name = PstatDimer_impMax
par PstatDi_5=0.045

# Local Parameter:   id =  Kpsd_imp, name = Kpsd_imp
par Kpsd_imp=0.3


PstatDi_4=PstatDi_5*PstatDime*1/(Kpsd_imp+PstatDime)*nm

# Reaction: id = stat_export, name = stat_export
# Local Parameter:   id =  stat_expMax, name = stat_expMax
par stat_expM=-0.06

# Local Parameter:   id =  Ks_exp, name = Ks_exp
par Ks_exp=0.6


stat_expo=nuc*stat_expM*stat_nuc*1/(Ks_exp+stat_nuc)*nm

# Reaction: id = stat_import, name = stat_import
# Local Parameter:   id =  stat_impMax, name = stat_impMax
par stat_impM=0.003

# Local Parameter:   id =  Ks_imp, name = Ks_imp
par Ks_imp=3.0


stat_impo=nuc*stat_impM*stat_sol*1/(Ks_imp+stat_sol)*nm

# Species:   id = stat_sol, name = stat_sol, affected by kineticLaw

init stat_sol=1.0
dstat_sol/dt=(1/(sol))*((-1.0 * statPho_1) + (-1.0 * stat_expo) + (-1.0 * stat_impo))

# Species:   id = Pstat_sol, name = Pstat_sol, affected by kineticLaw

init Pstat_sol=0.0
dPstat_sol/dt=(1/(sol))*((-2.0 * PstatDi_2) + ( 1.0 * statPho_1))

# Species:   id = statKinase_sol, name = statKinase_sol, involved in a rule 

# Species:   id = PstatDimer_sol, name = PstatDimer_sol, affected by kineticLaw

par PstatDime=0.0
aux PstatDime=PstatDime
dPstatDime/dt=(1/(sol))*(( 1.0 * PstatDi_2) + (-1.0 * PstatDi_4))

# Species:   id = PstatDimer_nuc, name = PstatDimer_nuc, affected by kineticLaw

par PstatDi_1=0.0
aux PstatDi_1=PstatDi_1
dPstatDi_1/dt=(1/(nuc))*(( 1.0 * PstatDi_3) + ( 1.0 * PstatDi_4))

# Species:   id = stat_nuc, name = stat_nuc, affected by kineticLaw

init stat_nuc=0.0
dstat_nuc/dt=(1/(nuc))*(( 1.0 * statDepho) + ( 1.0 * stat_expo) + ( 1.0 * stat_impo))

# Species:   id = Pstat_nuc, name = Pstat_nuc, affected by kineticLaw

init Pstat_nuc=0.0
dPstat_nuc/dt=(1/(nuc))*((-1.0 * statDepho) + (-2.0 * PstatDi_3))

# Species:   id = statPhosphatase_nuc, name = statPhosphatase_nuc
# Warning species is not changed by either rules or reactions

par statPhosp=0.05
aux statPhosp=statPhosp

# Species:   id = species_test, name = species_test, affected by kineticLaw

par species_t=0.0
aux species_t=species_t
dspecies_t/dt=(1/(sol))*(( 1.0 * statPho_1))


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if ((t  >  500) && (t  <  2502.54614894971)) then (0.01*sin(0.001571*(-500+t))) else (0)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

