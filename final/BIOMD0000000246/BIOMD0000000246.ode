
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Vasalou2010_Pacemaker_Neuron_SCN
#
# is http://identifiers.org/biomodels.db/MODEL1004080000
# is http://identifiers.org/biomodels.db/BIOMD0000000246
# isDescribedBy http://identifiers.org/pubmed/20300645
# isDerivedFrom http://identifiers.org/biomodels.db/BIOMD0000000073
# isDerivedFrom http://identifiers.org/biomodels.db/BIOMD0000000074
# isDerivedFrom http://identifiers.org/biomodels.db/BIOMD0000000078
# isDerivedFrom http://identifiers.org/biomodels.db/BIOMD0000000083
# isDerivedFrom http://identifiers.org/pubmed/11316338
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = extra, name = extra, constant
par extra=1.0

# Compartment: id = cytoplasm, name = cytoplasm, constant
par cytoplasm=1.0

# Compartment: id = store, name = store, constant
par store=1.0

# Compartment: id = nucleus, name = nucleus, constant
par nucleus=1.0

# Parameter:   id =  v_vo, name = v_vo, constant
par v_vo=0.09

# Parameter:   id =  n_vo, name = n_vo, constant
par n_vo=4.5

# Parameter:   id =  K_vo, name = K_vo, constant
par K_vo=4.5

# Parameter:   id =  v_kk, name = v_kk, constant
par v_kk=3.3

# Parameter:   id =  n_kk, name = n_kk, constant
par n_kk=0.1

# Parameter:   id =  K_kk, name = K_kk, constant
par K_kk=0.02

# Parameter:   id =  n_kCa, name = n_kCa, constant
par n_kCa=2.0

# Parameter:   id =  V_M1, name = V_M1, constant
par V_M1=3.0E-4

# Parameter:   id =  beta_IP3, name = beta_IP3, constant
par beta_IP3=0.5

# Parameter:   id =  V_M2, name = V_M2, constant
par V_M2=149.5

# Parameter:   id =  n_M2, name = n_M2, constant
par n_M2=2.2

# Parameter:   id =  K_2, name = K_2, constant
par K_2=5.0

# Parameter:   id =  V_M3, name = V_M3, constant
par V_M3=400.0

# Parameter:   id =  n_M3, name = n_M3, constant
par n_M3=6.0

# Parameter:   id =  K_R_Ca, name = K_R_Ca, constant
par K_R_Ca=3.0

# Parameter:   id =  p_A, name = p_A, constant
par p_A=4.2

# Parameter:   id =  K_A, name = K_A, constant
par K_A=0.67

# Parameter:   id =  k_f, name = k_f, constant
par k_f=0.001

# Parameter:   id =  v_sP0, name = v_sP0, constant
par v_sP0=1.0

# Parameter:   id =  C_T, name = C_T, constant
par C_T=1.6

# Parameter:   id =  K_C, name = K_C, constant
par K_C=0.15

# Parameter:   id =  n_BN, name = n_BN, constant
par n_BN=4.0

# Parameter:   id =  K_AP, name = K_AP, constant
par K_AP=0.6

# Parameter:   id =  v_mP, name = v_mP, constant
par v_mP=1.1

# Parameter:   id =  K_mP, name = K_mP, constant
par K_mP=0.31

# Parameter:   id =  kd_mP, name = kd_mP, constant
par kd_mP=0.01

# Parameter:   id =  v_sC, name = v_sC, constant
par v_sC=1.1

# Parameter:   id =  K_sC, name = K_sC, constant
par K_sC=0.6

# Parameter:   id =  v_mC, name = v_mC, constant
par v_mC=1.0

# Parameter:   id =  K_mC, name = K_mC, constant
par K_mC=0.4

# Parameter:   id =  kd_mC, name = kd_mC, constant
par kd_mC=0.01

# Parameter:   id =  v_sB, name = v_sB, constant
par v_sB=1.0

# Parameter:   id =  K_IB, name = K_IB, constant
par K_IB=2.2

# Parameter:   id =  m_BN, name = m_BN, constant
par m_BN=2.0

# Parameter:   id =  v_mB, name = v_mB, constant
par v_mB=0.8

# Parameter:   id =  K_mB, name = K_mB, constant
par K_mB=0.4

# Parameter:   id =  kd_mB, name = kd_mB, constant
par kd_mB=0.01

# Parameter:   id =  ks_P, name = ks_P, constant
par ks_P=0.6

# Parameter:   id =  kd_n, name = kd_n, constant
par kd_n=0.01

# Parameter:   id =  V1_P, name = V1_P, constant
par V1_P=NaN

# Parameter:   id =  K_p, name = K_p, constant
par K_p=0.1

# Parameter:   id =  V2_P, name = V2_P, constant
par V2_P=0.3

# Parameter:   id =  K_dp, name = K_dp, constant
par K_dp=0.1

# Parameter:   id =  k3, name = k3, constant
par k3=0.4

# Parameter:   id =  k4, name = k4, constant
par k4=0.2

# Parameter:   id =  ks_C, name = ks_C, constant
par ks_C=1.6

# Parameter:   id =  kd_nc, name = kd_nc, constant
par kd_nc=0.12

# Parameter:   id =  V1_C, name = V1_C, constant
par V1_C=0.6

# Parameter:   id =  V2_C, name = V2_C, constant
par V2_C=0.1

# Parameter:   id =  v_dPC, name = v_dPC, constant
par v_dPC=0.7

# Parameter:   id =  Kd, name = Kd, constant
par Kd=0.3

# Parameter:   id =  v_dCC, name = v_dCC, constant
par v_dCC=0.7

# Parameter:   id =  k1, name = k1, constant
par k1=0.45

# Parameter:   id =  k2, name = k2, constant
par k2=0.2

# Parameter:   id =  V1_PC, name = V1_PC, constant
par V1_PC=NaN

# Parameter:   id =  V2_PC, name = V2_PC, constant
par V2_PC=0.1

# Parameter:   id =  vd_PCC, name = vd_PCC, constant
par vd_PCC=0.7

# Parameter:   id =  V3_PC, name = V3_PC, constant
par V3_PC=NaN

# Parameter:   id =  V4_PC, name = V4_PC, constant
par V4_PC=0.1

# Parameter:   id =  vd_PCN, name = vd_PCN, constant
par vd_PCN=0.7

# Parameter:   id =  k7, name = k7, constant
par k7=0.5

# Parameter:   id =  k8, name = k8, constant
par k8=0.1

# Parameter:   id =  vd_IN, name = vd_IN, constant
par vd_IN=0.8

# Parameter:   id =  ksB, name = ksB, constant
par ksB=0.12

# Parameter:   id =  V1_B, name = V1_B, constant
par V1_B=0.5

# Parameter:   id =  V2_B, name = V2_B, constant
par V2_B=0.1

# Parameter:   id =  k5, name = k5, constant
par k5=0.4

# Parameter:   id =  k6, name = k6, constant
par k6=0.2

# Parameter:   id =  vd_BC, name = vd_BC, constant
par vd_BC=0.5

# Parameter:   id =  V3_B, name = V3_B, constant
par V3_B=0.5

# Parameter:   id =  V4_B, name = V4_B, constant
par V4_B=0.2

# Parameter:   id =  vd_BN, name = vd_BN, constant
par vd_BN=0.6

# Parameter:   id =  v_K, name = v_K, defined by a Rule

# Parameter:   id =  K_1_CB, name = K_1_CB, constant
par K_1_CB=0.01

# Parameter:   id =  vP, name = vP, constant
par vP=1.0

# Parameter:   id =  K_2_CB, name = K_2_CB, constant
par K_2_CB=0.01

# Parameter:   id =  WT, name = WT, constant
par WT=1.0

# Parameter:   id =  v_VIP, name = v_VIP, constant
par v_VIP=0.5

# Parameter:   id =  f_r, name = f_r, defined by a Rule

# Parameter:   id =  n_VIP, name = n_VIP, constant
par n_VIP=1.9

# Parameter:   id =  K_VIP, name = K_VIP, constant
par K_VIP=15.0

# Parameter:   id =  k_dVIP, name = k_dVIP, constant
par k_dVIP=0.5

# Parameter:   id =  n_dVIP, name = n_dVIP, constant
par n_dVIP=0.2

# Parameter:   id =  v_GABA, name = v_GABA, constant
par v_GABA=19.0

# Parameter:   id =  K_GABA, name = K_GABA, constant
par K_GABA=3.0

# Parameter:   id =  beta, name = beta, defined by a Rule

# Parameter:   id =  K_D, name = K_D, constant
par K_D=0.08

# Parameter:   id =  v_sPc, name = v_sPc, defined by a Rule

# Parameter:   id =  V_MK, name = V_MK, constant
par V_MK=5.0

# Parameter:   id =  k_MK, name = k_MK, constant
par k_MK=2.9

# Parameter:   id =  V_b, name = V_b, constant
par V_b=2.0

# Parameter:   id =  k_b, name = k_b, constant
par k_b=2.0

# Parameter:   id =  E_Na, name = E_Na, defined by a Rule

# Parameter:   id =  E_Na_0, name = E_Na_0, constant
par E_Na_0=45.0

# Parameter:   id =  T, name = T, constant
par T_renamed=37.0

# Parameter:   id =  T_abs, name = T_abs, constant
par T_abs=273.15

# Parameter:   id =  T_room, name = T_room, constant
par T_room=22.0

# Parameter:   id =  E_K, name = E_K, defined by a Rule

# Parameter:   id =  E_K_0, name = E_K_0, constant
par E_K_0=-97.0

# Parameter:   id =  E_L, name = E_L, defined by a Rule

# Parameter:   id =  E_L_0, name = E_L_0, constant
par E_L_0=-29.0

# Parameter:   id =  E_Ca, name = E_Ca, defined by a Rule

# Parameter:   id =  k_q, name = k_q, constant
par k_q=8.75E-5

# Parameter:   id =  Cl_in, name = Cl_in, defined by a Rule

# Parameter:   id =  K_Cl1, name = K_Cl1, constant
par K_Cl1=4.0

# Parameter:   id =  v_Cl1, name = v_Cl1, constant
par v_Cl1=15.5

# Parameter:   id =  n_Cl, name = n_Cl, constant
par n_Cl=-0.2

# Parameter:   id =  K_Cl2, name = K_Cl2, constant
par K_Cl2=1.0

# Parameter:   id =  v_Cl2, name = v_Cl2, constant
par v_Cl2=19.0

# Parameter:   id =  E_inhib, name = E_inhib, defined by a Rule

# Parameter:   id =  P_K, name = P_K, defined by a Rule

# Parameter:   id =  v_PK, name = v_PK, constant
par v_PK=1.9

# Parameter:   id =  n_PK, name = n_PK, constant
par n_PK=-2.0

# Parameter:   id =  K_PK, name = K_PK, constant
par K_PK=1.0

# Parameter:   id =  theta_Na, name = theta_Na, defined by a Rule

# Parameter:   id =  theta_K, name = theta_K, defined by a Rule

# Parameter:   id =  alpha, name = alpha, defined by a Rule

# Parameter:   id =  P_Ca, name = P_Ca, constant
par P_Ca=0.05

# Parameter:   id =  P_Na, name = P_Na, constant
par P_Na=0.036

# Parameter:   id =  P_Cl, name = P_Cl, constant
par P_Cl=0.3

# Parameter:   id =  beta_a, name = beta_a, defined by a Rule

# Parameter:   id =  c, name = c, defined by a Rule

# Parameter:   id =  psi, name = psi, defined by a Rule

# Parameter:   id =  V_rest, name = V_rest, defined by a Rule

# Parameter:   id =  R_g, name = R_g, constant
par R_g=8.314

# Parameter:   id =  Faraday, name = Faraday, constant
par Faraday=96485.0

# Parameter:   id =  theta, name = theta, defined by a Rule

# Parameter:   id =  V_theta, name = V_theta, constant
par V_theta=20.0

# Parameter:   id =  V_reset, name = V_reset, defined by a Rule

# Parameter:   id =  R, name = R, defined by a Rule

# Parameter:   id =  V_R, name = V_R, constant
par V_R=0.41

# Parameter:   id =  K_R, name = K_R, constant
par K_R=34.0

# Parameter:   id =  I_Na, name = I_Na, defined by a Rule

# Parameter:   id =  g_Na, name = g_Na, constant
par g_Na=36.0

# Parameter:   id =  g_K, name = g_K, defined by a Rule

# Parameter:   id =  g_K_0, name = g_K_0, constant
par g_K_0=9.7

# Parameter:   id =  K_gk, name = K_gk, constant
par K_gk=10.0

# Parameter:   id =  v_gk, name = v_gk, constant
par v_gk=10.0

# Parameter:   id =  I_Na_abs, name = I_Na_abs, defined by a Rule

# Parameter:   id =  g_ex, name = g_ex, defined by a Rule

# Parameter:   id =  V_ex1, name = V_ex1, constant
par V_ex1=105.0

# Parameter:   id =  n_ex1, name = n_ex1, constant
par n_ex1=2.5

# Parameter:   id =  K_ex1, name = K_ex1, constant
par K_ex1=5.7405E8

# Parameter:   id =  n_ex2, name = n_ex2, constant
par n_ex2=-1.0

# Parameter:   id =  K_ex2, name = K_ex2, constant
par K_ex2=1.0

# Parameter:   id =  V_ex2, name = V_ex2, constant
par V_ex2=4.4

# Parameter:   id =  g_L, name = g_L, defined by a Rule

# Parameter:   id =  g_Ca, name = g_Ca, defined by a Rule

# Parameter:   id =  v_Ca, name = v_Ca, constant
par v_Ca=12.3

# Parameter:   id =  n_Ca, name = n_Ca, constant
par n_Ca=2.2

# Parameter:   id =  K_Ca, name = K_Ca, constant
par K_Ca=22.0

# Parameter:   id =  gK_Ca, name = gK_Ca, defined by a Rule

# Parameter:   id =  VK_Ca, name = VK_Ca, constant
par VK_Ca=3.0

# Parameter:   id =  n_KCa, name = n_KCa, constant
par n_KCa_1=-1.0

# Parameter:   id =  K_KCa, name = K_KCa, constant
par K_KCa=0.16

# Parameter:   id =  I_star, name = I_star, defined by a Rule

# Parameter:   id =  g_inhib, name = g_inhib, constant
par g_inhib=12.3

# Parameter:   id =  E_ex, name = E_ex, constant
par E_ex=0.0

# Parameter:   id =  R_star, name = R_star, defined by a Rule

# Parameter:   id =  tau_m, name = tau_m, defined by a Rule

# Parameter:   id =  Cm, name = Cm, constant
par Cm=5.0

# Parameter:   id =  PK_o, name = PK_o, constant
par PK_o=1.1

# Parameter:   id =  V_phos, name = V_phos, constant
par V_phos=0.4

# assignmentRule: variable = GABA
GABA=GABA_o+v_GABA*VIP/(K_GABA+VIP)
aux GABA=GABA

# assignmentRule: variable = K_in
K_in=K_ex/theta_K
aux K_in=K_in

# assignmentRule: variable = Na_in
Na_in=Na_ex/theta_Na
aux Na_in=Na_in

# assignmentRule: variable = v_K
v_K=V_MK*Ca_in/(k_MK+Ca_in)+V_b*beta/(k_b+beta)
aux v_K=v_K

# assignmentRule: variable = f_r
f_r=-1/(tau_m*log((theta-R_star*I_star)/(V_reset-R_star*I_star)))
aux f_r=f_r

# assignmentRule: variable = beta
beta=VIP/(VIP+K_D)
aux beta=beta

# assignmentRule: variable = v_sPc
v_sPc=v_sP0+C_T*CB/(K_C+CB)
aux v_sPc=v_sPc

# assignmentRule: variable = E_Na
E_Na=E_Na_0*(T_renamed+T_abs)/(T_room+T_abs)
aux E_Na=E_Na

# assignmentRule: variable = E_K
E_K=E_K_0*(T_renamed+T_abs)/(T_room+T_abs)
aux E_K=E_K

# assignmentRule: variable = E_L
E_L=E_L_0*(T_renamed+T_abs)/(T_room+T_abs)
aux E_L=E_L

# assignmentRule: variable = E_Ca
E_Ca=k_q*(T_renamed+T_abs)/2*log(Ca_ex/Ca_in)*1000
aux E_Ca=E_Ca

# assignmentRule: variable = Cl_in
Cl_in=Cl_o+M_P/(K_Cl1+M_P)*v_Cl1+GABA^n_Cl/(K_Cl2+GABA^n_Cl)*v_Cl2
aux Cl_in=Cl_in

# assignmentRule: variable = E_inhib
E_inhib=(-k_q)*(T_renamed+T_abs)*log(Cl_ex/Cl_in)*1000
aux E_inhib=E_inhib

# assignmentRule: variable = P_K
P_K=v_PK*B_C^n_PK/(K_PK+B_C^n_PK)
aux P_K=P_K

# assignmentRule: variable = theta_Na
theta_Na=exp(E_Na/(k_q*(T_renamed+T_abs)*1000))
aux theta_Na=theta_Na

# assignmentRule: variable = theta_K
theta_K=exp(E_K/(k_q*(T_renamed+T_abs)*1000))
aux theta_K=theta_K

# assignmentRule: variable = alpha
alpha=4*P_Ca*Ca_in*10^(-3)+P_K*K_in+P_Na*Na_in+P_Cl*Cl_ex
aux alpha=alpha

# assignmentRule: variable = beta_a
beta_a=P_K*K_in-P_K*K_ex+P_Na*Na_in-P_Na*Na_ex+P_Cl*Cl_ex-P_Cl*Cl_in
aux beta_a=beta_a

# assignmentRule: variable = c
c=-(4*P_Ca*Ca_ex*10^(-3)+P_K*K_ex+P_Na*Na_ex+P_Cl*Cl_in)
aux c=c

# assignmentRule: variable = psi
psi=((beta_a^2-4*alpha*c)^(0.5)-beta_a)/(2*alpha)
aux psi=psi

# assignmentRule: variable = V_rest
V_rest=R_g*(T_renamed+T_abs)/Faraday*log(psi)*1000
aux V_rest=V_rest

# assignmentRule: variable = theta
theta=V_rest+V_theta
aux theta=theta

# assignmentRule: variable = V_reset
V_reset=V_rest+4
aux V_reset=V_reset

# assignmentRule: variable = R
R=V_R*V_rest/(K_R+V_rest)
aux R=R

# assignmentRule: variable = I_Na
I_Na=g_Na*(V_rest-E_Na)
aux I_Na=I_Na

# assignmentRule: variable = g_K
g_K=g_K_0+M_P/(K_gk+M_P)*v_gk
aux g_K=g_K

# assignmentRule: variable = I_Na_abs
I_Na_abs=(I_Na^2)^(0.5)
aux I_Na_abs=I_Na_abs

# assignmentRule: variable = g_ex
g_ex=V_ex1*I_Na_abs^n_ex1/(K_ex1+I_Na_abs^n_ex1)+Ca_in^n_ex2/(K_ex2+Ca_in^n_ex2)*V_ex2
aux g_ex=g_ex

# assignmentRule: variable = g_L
g_L=1/R
aux g_L=g_L

# assignmentRule: variable = g_Ca
g_Ca=v_Ca*M_P^n_Ca/(K_Ca+M_P^n_Ca)
aux g_Ca=g_Ca

# assignmentRule: variable = gK_Ca
gK_Ca=VK_Ca*C_C^n_KCa_1/(K_KCa+C_C^n_KCa_1)
aux gK_Ca=gK_Ca

# assignmentRule: variable = I_star
I_star=g_Na*E_Na+g_Ca*E_Ca+g_K*E_K+g_L*E_L+gK_Ca*E_K-g_inhib*E_inhib-g_ex*E_ex
aux I_star=I_star

# assignmentRule: variable = R_star
R_star=1/(g_Na+g_K+g_L+g_Ca+gK_Ca-g_inhib-g_ex)
aux R_star=R_star

# assignmentRule: variable = tau_m
tau_m=Cm*R_star
aux tau_m=tau_m

# Reaction: id = vo

vo=1000*cytoplasm*v_vo*B_C^n_vo/(K_vo+B_C^n_vo)

# Reaction: id = v_ca_out

v_ca_out=1000*cytoplasm*v_kk*C_C^n_kk/(K_kk+C_C^n_kk)*Ca_in^n_kCa

# Reaction: id = v1

v1=1000*cytoplasm*V_M1*beta_IP3

# Reaction: id = v2

v2=1000*cytoplasm*V_M2*Ca_in^n_M2/(K_2^n_M2+Ca_in^n_M2)

# Reaction: id = v3

v3=1000*store*V_M3*Ca_store^n_M3/(K_R_Ca^n_M3+Ca_store^n_M3)*Ca_in^p_A/(K_A^p_A+Ca_in^p_A)

# Reaction: id = v_Ca_leak

v_Ca_leak=1000*store*k_f*Ca_store

# Reaction: id = MP_transcription

MP_transc=cytoplasm*(v_sP0+C_T*CB/(K_C+CB))*B_N^n_BN/(K_AP^n_BN+B_N^n_BN)

# Reaction: id = MP_decay

MP_decay=cytoplasm*(v_mP*M_P/(K_mP+M_P)+kd_mP*M_P)

# Reaction: id = MC_transcription

MC_transc=cytoplasm*v_sC*B_N^n_BN/(K_sC^n_BN+B_N^n_BN)

# Reaction: id = MC_decay

MC_decay=cytoplasm*(v_mC*M_C/(K_mC+M_C)+kd_mC*M_C)

# Reaction: id = MB_transcription

MB_transc=cytoplasm*v_sB*K_IB^m_BN/(K_IB^m_BN+B_N^m_BN)

# Reaction: id = MB_decay

MB_decay=cytoplasm*(v_mB*M_B/(K_mB+M_B)+kd_mB*M_B)

# Reaction: id = PC_translation

PC_transl=cytoplasm*ks_P*M_P

# Reaction: id = PC_degradation

PC_degrad=cytoplasm*kd_n*P_C

# Reaction: id = PC_phosphorylation

PC_phosph=cytoplasm*(V1_P*P_C/(K_p+P_C)-V2_P*P_CP/(K_dp+P_CP))

# Reaction: id = PCC_formation

PCC_forma=cytoplasm*(k3*P_C*C_C-k4*PC_C)

# Reaction: id = CC_translation

CC_transl=cytoplasm*ks_C*M_C

# Reaction: id = CC_degradation

CC_degrad=cytoplasm*kd_nc*C_C

# Reaction: id = CC_phosphorylation

CC_phosph=cytoplasm*(V1_C*C_C/(K_p+C_C)-V2_C*C_CP/(K_dp+C_CP))

# Reaction: id = PCP_degradation

PCP_degra=cytoplasm*(v_dPC*P_CP/(Kd+P_CP)+kd_n*P_CP)

# Reaction: id = CCP_degradation

CCP_degra=cytoplasm*(v_dCC*C_CP/(Kd+C_CP)+kd_n*C_CP)

# Reaction: id = PCC_shuttling

PCC_shutt=cytoplasm*k1*PC_C-nucleus*k2*PC_N

# Reaction: id = PCC_phosphorylation

PCC_phosp=cytoplasm*(V1_PC*PC_C/(K_p+PC_C)-V2_PC*PC_CP/(K_dp+PC_CP))

# Reaction: id = PCC_degradation

PCC_degra=cytoplasm*kd_n*PC_C

# Reaction: id = PCCP_degradation

PCCP_degr=cytoplasm*(vd_PCC*PC_CP/(Kd+PC_CP)+kd_n*PC_CP)

# Reaction: id = PCN_phosphorylation

PCN_phosp=nucleus*(V3_PC*PC_N/(K_p+PC_N)-V4_PC*PC_NP/(K_dp+PC_NP))

# Reaction: id = PCN_degradation

PCN_degra=nucleus*kd_n*PC_N

# Reaction: id = PCNP_degradation

PCNP_degr=nucleus*(vd_PCN*PC_NP/(Kd+PC_NP)+kd_n*PC_NP)

# Reaction: id = IN_formation

IN_format=cytoplasm*(k7*B_N*PC_N-k8*I_N)

# Reaction: id = IN_degradation

IN_degrad=nucleus*(vd_IN*I_N/(Kd+I_N)+kd_n*I_N)

# Reaction: id = BC_translation

BC_transl=cytoplasm*ksB*M_B

# Reaction: id = BC_phosphorylation

BC_phosph=cytoplasm*(V1_B*B_C/(K_p+B_C)-V2_B*B_CP/(K_dp+B_CP))

# Reaction: id = BC_shuttling

BC_shuttl=cytoplasm*k5*B_C-nucleus*k6*B_N

# Reaction: id = BC_degradation

BC_degrad=cytoplasm*kd_n*B_C

# Reaction: id = BCP_degradation

BCP_degra=cytoplasm*(vd_BC*B_CP/(Kd+B_CP)+kd_n*B_CP)

# Reaction: id = BN_phosphorylation

BN_phosph=nucleus*(V3_B*B_N/(K_p+B_N)-V4_B*B_NP/(K_dp+B_NP))

# Reaction: id = BN_degradation

BN_degrad=nucleus*kd_n*B_N

# Reaction: id = BNP_degradation

BNP_degra=nucleus*(vd_BN*B_NP/(Kd+B_NP)+kd_n*B_NP)

# Reaction: id = CB_activation

CB_activa=cytoplasm*(v_K*(1-CB)/(K_1_CB+1-CB)-vP*CB/(K_2_CB+CB))/WT

# Reaction: id = VIP_accumulation

VIP_accum=cytoplasm*v_VIP*f_r^n_VIP/(K_VIP+f_r^n_VIP)

# Reaction: id = VIP_depletion

VIP_deple=cytoplasm*k_dVIP*VIP^n_dVIP

# Species:   id = Ca_in, name = Ca_in, affected by kineticLaw

init Ca_in=0.1
dCa_in/dt=(1/(cytoplasm))*(( 0.001 * vo) + (-0.001 * v_ca_out) + ( 0.001 * v1) + (-0.001 * v2) + ( 0.001 * v3) + ( 0.001 * v_Ca_leak))

# Species:   id = Ca_store, name = Ca_store, affected by kineticLaw

init Ca_store=0.1
dCa_store/dt=(1/(store))*(( 0.001 * v2) + (-0.001 * v3) + (-0.001 * v_Ca_leak))

# Species:   id = Ca_ex, name = Ca_ex
# Warning species is not changed by either rules or reactions

par Ca_ex=5.0
aux Ca_ex=Ca_ex

# Species:   id = M_P, name = M_P, affected by kineticLaw

init M_P=2.8
dM_P/dt=(1/(cytoplasm))*(( 1.0 * MP_transc) + (-1.0 * MP_decay))

# Species:   id = M_C, name = M_C, affected by kineticLaw

init M_C=2.0
dM_C/dt=(1/(cytoplasm))*(( 1.0 * MC_transc) + (-1.0 * MC_decay))

# Species:   id = M_B, name = M_B, affected by kineticLaw

init M_B=7.94
dM_B/dt=(1/(cytoplasm))*(( 1.0 * MB_transc) + (-1.0 * MB_decay))

# Species:   id = P_C, name = P_C, affected by kineticLaw

init P_C=0.4
dP_C/dt=(1/(cytoplasm))*(( 1.0 * PC_transl) + (-1.0 * PC_degrad) + (-1.0 * PC_phosph) + (-1.0 * PCC_forma))

# Species:   id = C_C, name = C_C, affected by kineticLaw

init C_C=12.0
dC_C/dt=(1/(cytoplasm))*((-1.0 * PCC_forma) + ( 1.0 * CC_transl) + (-1.0 * CC_degrad) + (-1.0 * CC_phosph))

# Species:   id = P_CP, name = P_CP, affected by kineticLaw

init P_CP=0.13
dP_CP/dt=(1/(cytoplasm))*(( 1.0 * PC_phosph) + (-1.0 * PCP_degra))

# Species:   id = C_CP, name = C_CP, affected by kineticLaw

init C_CP=9.0
dC_CP/dt=(1/(cytoplasm))*(( 1.0 * CC_phosph) + (-1.0 * CCP_degra))

# Species:   id = PC_C, name = PC_C, affected by kineticLaw

init PC_C=1.26
dPC_C/dt=(1/(cytoplasm))*(( 1.0 * PCC_forma) + (-1.0 * PCC_shutt) + (-1.0 * PCC_phosp) + (-1.0 * PCC_degra))

# Species:   id = PC_N, name = PC_N, affected by kineticLaw

init PC_N=0.16
dPC_N/dt=(1/(nucleus))*(( 1.0 * PCC_shutt) + (-1.0 * PCN_phosp) + (-1.0 * PCN_degra) + (-1.0 * IN_format))

# Species:   id = PC_CP, name = PC_CP, affected by kineticLaw

init PC_CP=0.2
dPC_CP/dt=(1/(cytoplasm))*(( 1.0 * PCC_phosp) + (-1.0 * PCCP_degr))

# Species:   id = PC_NP, name = PC_NP, affected by kineticLaw

init PC_NP=0.091
dPC_NP/dt=(1/(nucleus))*(( 1.0 * PCN_phosp) + (-1.0 * PCNP_degr))

# Species:   id = B_C, name = B_C, affected by kineticLaw

init B_C=2.41
dB_C/dt=(1/(cytoplasm))*(( 1.0 * BC_transl) + (-1.0 * BC_phosph) + (-1.0 * BC_shuttl) + (-1.0 * BC_degrad))

# Species:   id = B_CP, name = B_CP, affected by kineticLaw

init B_CP=0.48
dB_CP/dt=(1/(cytoplasm))*(( 1.0 * BC_phosph) + (-1.0 * BCP_degra))

# Species:   id = B_N, name = B_N, affected by kineticLaw

init B_N=1.94
dB_N/dt=(1/(nucleus))*((-1.0 * IN_format) + ( 1.0 * BC_shuttl) + (-1.0 * BN_phosph) + (-1.0 * BN_degrad))

# Species:   id = B_NP, name = B_NP, affected by kineticLaw

init B_NP=0.32
dB_NP/dt=(1/(nucleus))*(( 1.0 * BN_phosph) + (-1.0 * BNP_degra))

# Species:   id = I_N, name = I_N, affected by kineticLaw

init I_N=0.05
dI_N/dt=(1/(nucleus))*(( 1.0 * IN_format) + (-1.0 * IN_degrad))

# Species:   id = CB, name = CB, affected by kineticLaw

init CB=0.12
dCB/dt=(1/(cytoplasm))*(( 1.0 * CB_activa))

# Species:   id = VIP, name = VIP, affected by kineticLaw

init VIP=0.0
dVIP/dt=(1/(cytoplasm))*(( 1.0 * VIP_accum) + (-1.0 * VIP_deple))

# Species:   id = Cl_ex, name = Cl_ex
# Warning species is not changed by either rules or reactions

par Cl_ex=114.5
aux Cl_ex=Cl_ex

# Species:   id = Cl_o, name = Cl_o
# Warning species is not changed by either rules or reactions

par Cl_o=1.0
aux Cl_o=Cl_o

# Species:   id = GABA, name = GABA, involved in a rule 

# Species:   id = GABA_o, name = GABA_o
# Warning species is not changed by either rules or reactions

par GABA_o=0.2
aux GABA_o=GABA_o

# Species:   id = K_in, name = K_in, involved in a rule 

# Species:   id = K_ex, name = K_ex
# Warning species is not changed by either rules or reactions

par K_ex=1.0
aux K_ex=K_ex

# Species:   id = Na_in, name = Na_in, involved in a rule 

# Species:   id = Na_ex, name = Na_ex
# Warning species is not changed by either rules or reactions

par Na_ex=145.0
aux Na_ex=Na_ex

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

