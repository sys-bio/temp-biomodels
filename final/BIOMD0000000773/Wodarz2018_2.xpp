
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Wodarz2018/2 - model with transit amplifying cells
#
# isDescribedBy http://identifiers.org/pubmed/29605227
# is http://identifiers.org/biomodels.db/MODEL1908010002
# is http://identifiers.org/biomodels.db/BIOMD0000000773
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = s_t, name = s+t
s_t(r2,T,q,p2)=(2*r2*T*q*(1-p2))


# FunctionDefinition id = t_s, name = t+s
t_s(r1,S,p1)=(2*r1*S*(1-p1))


# FunctionDefinition id = t, name = t+
t_renamed(p2,r2,T)=((2*p2-1)*r2*T)


# FunctionDefinition id = diff, name = diff
diff(r2,T,p2,q)=(2*r2*T*(1-p2)*(1-q))


# FunctionDefinition id = s, name = s+
s(p1,r1,S)=((2*p1-1)*r1*S)


# Compartment: id = tme, name = tme, constant
par tme=1.0

# Parameter:   id =  p1, name = p1', constant
par p1=0.7

# Parameter:   id =  r1, name = r1', constant
par r1=0.01

# Parameter:   id =  p2, name = p2', constant
par p2=0.4

# Parameter:   id =  r2, name = r2', constant
par r2=0.02

# Parameter:   id =  q, name = q', constant
par q=0.4

# Parameter:   id =  a, name = a, constant
par a=0.0025

# Parameter:   id =  h1, name = h1, constant
par h1=1.0E-4

# Parameter:   id =  h2, name = h2, constant
par h2=1.0E-4

# Parameter:   id =  h3, name = h3, constant
par h3=1.0E-4

# Parameter:   id =  h4, name = h4, constant
par h4=1.0E-4

# Parameter:   id =  h5, name = h5, constant
par h5=0.01

# Parameter:   id =  k1, name = k1, constant
par k1=1.0

# Parameter:   id =  k2, name = k2, constant
par k2=1.0

# Parameter:   id =  k3, name = k3, constant
par k3=1.0

# Parameter:   id =  k4, name = k4, constant
par k4=1.0

# Parameter:   id =  k5, name = k5, constant
par k5=1.0

# Parameter:   id =  r1_0, name = r1, defined by a Rule

# Parameter:   id =  r2_0, name = r2, defined by a Rule

# Parameter:   id =  p1_0, name = p1, defined by a Rule

# Parameter:   id =  p2_0, name = p2, defined by a Rule

# Parameter:   id =  q_0, name = q, defined by a Rule

# assignmentRule: variable = r2_0
r2_0=r2/(1+h3*D^k3)
aux r2_0=r2_0

# assignmentRule: variable = p1_0
p1_0=p1/(1+h2*D^k2)
aux p1_0=p1_0

# assignmentRule: variable = p2_0
p2_0=p2/(1+h4*D^k4)
aux p2_0=p2_0

# assignmentRule: variable = r1_0
r1_0=r1/(1+h1*D^k1)
aux r1_0=r1_0

# assignmentRule: variable = q_0
q_0=q/(1+h5*S_1^k5)
aux q_0=q_0

# Reaction: id = stem_cell_division, name = stem cell division

stem_cell=tme*s(p1_0, r1_0, S_1)

# Reaction: id = stem_cell_activation, name = stem cell activation

stem_ce_1=tme*s_t(r2_0, T_renamed, q_0, p2_0)

# Reaction: id = activation_cell_division_from_stem, name = activation cell division from stem

activatio=tme*t_s(r1_0, S_1, p1_0)

# Reaction: id = activation_cell_renewal, name = activation cell renewal

activat_1=tme*t_renamed(p2_0, r2_0, T_renamed)

# Reaction: id = differentiation_of_cell, name = differentiation of cell

different=tme*diff(r2_0, T_renamed, p2_0, q_0)

# Reaction: id = differentiation_cell_death, name = differentiation cell death

differe_1=tme*a*D

# Species:   id = S, name = S, affected by kineticLaw

par S_1=1.0
aux S_1=S_1
dS_1/dt=(1/(tme))*(( 1.0 * stem_cell) + ( 1.0 * stem_ce_1))

# Species:   id = T, name = T, affected by kineticLaw

par T_renamed=0.0
aux T_renamed=T_renamed
dT_renamed/dt=(1/(tme))*(( 1.0 * activatio) + ( 1.0 * activat_1))

# Species:   id = D, name = D, affected by kineticLaw

init D=0.0
dD/dt=(1/(tme))*(( 1.0 * different) + (-1.0 * differe_1))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

