
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Schwarz2018-Cdk Activity Threshold Determines Passage through the Restriction Point
#
# is http://identifiers.org/biomodels.db/MODEL2003030001
# is http://identifiers.org/biomodels.db/BIOMD0000000918
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Rate_Law_for_for_RE__1__1__1, name = Rate Law for for RE [1]_1 [1]
Rate_Law_(CycD,CycE,KCD,KCE,Rb_E2F_complex,dRE,kP1,kP2,kRE)=(kRE-kP1*CycD*Rb_E2F_complex/(KCD+Rb_E2F_complex)+kP2*CycE*Rb_E2F_complex/(KCE+Rb_E2F_complex)-dRE*Rb_E2F_complex)


# FunctionDefinition id = Rate_Law_for_For_E__1__1, name = Rate Law for For E [1]_1
Rate_La_1(CycD,CycE,E2F,KCD,KCE,KE,KM,Myc,Rb,Rb_E2F_complex,dE,kE,kP1,kP2,kRE,kb,kpfb)=(kE*(kpfb+Myc/(KM+Myc))*E2F/(KE+E2F)+kb*Myc/(KM+Myc)+kP1*CycD*Rb_E2F_complex/(KCD+Rb_E2F_complex)+kP2*CycE*Rb_E2F_complex/(KCE+Rb_E2F_complex)-dE*E2F-kRE*Rb*E2F)


# FunctionDefinition id = Rate_Law_for_for_CE_1, name = Rate Law for for CE_1
Rate_La_2(CycE,E2F,KE,dCE,kCE)=(kCE*E2F/(KE+E2F)-dCE*CycE)


# FunctionDefinition id = Rate_Law_for_For_CD_1, name = Rate Law for For CD_1
Rate_La_3(CycD,KM,KS,Myc,dCD,kCD,kCDS,serum)=(kCD*Myc/(KM+Myc)+kCDS*serum/(KS+serum)-dCD*CycD)


# FunctionDefinition id = Rate_Law_for_For_R_1, name = Rate Law for For R_1
Rate_La_4(CycD,CycE,E2F,KCD,KCE,KRP,Phosphorylated_Rb,Rb,dR,kDP,kP1,kP2,kR,kRE)=(kR+kDP*Phosphorylated_Rb/(KRP+Phosphorylated_Rb)-kRE*Rb*E2F-kP1*CycD*Rb/(KCD+Rb)-kP2*CycE*Rb/(KCE+Rb)-dR*Rb)


# FunctionDefinition id = Rate_Law_for_for_RP__1__1__1, name = Rate Law for for RP [1]_1 [1]
Rate_La_5(CycD,CycE,KCD,KCE,Phosphorylated_Rb,Rb,Rb_E2F_complex,dRP,kP1,kP2)=(kP1*CycD*Rb/(KCD+Rb)+kP2*CycE*Rb/(KCE+Rb_E2F_complex)+kP1*CycD*Rb_E2F_complex/(KCD+Rb_E2F_complex)+kP2*CycE*Rb_E2F_complex/(KCE+Rb_E2F_complex)-dRP*Phosphorylated_Rb)


# FunctionDefinition id = Rate_Law_for_For_M__1__1__1, name = Rate Law for For M [1]_1 [1]
Rate_La_6(KS,Myc,dM,kM,serum)=(kM*Myc/(KS+serum)-dM*Myc)


# Compartment: id = Cell, name = Cell, constant
par Cell=1.0

# Parameter:   id =  kE, name = kE, constant
par kE=0.4

# Parameter:   id =  kM, name = kM, constant
par kM=1.0

# Parameter:   id =  kCD, name = kCD, constant
par kCD=0.03

# Parameter:   id =  kCDS, name = kCDS, constant
par kCDS=0.45

# Parameter:   id =  kR, name = kR, constant
par kR=0.18

# Parameter:   id =  kRE, name = kRE, constant
par kRE=180.0

# Parameter:   id =  kb, name = kb, constant
par kb=0.003

# Parameter:   id =  KS, name = KS, constant
par KS=0.5

# Parameter:   id =  kCE, name = kCE, constant
par kCE=0.35

# Parameter:   id =  dM, name = dM, constant
par dM=0.7

# Parameter:   id =  dE, name = dE, constant
par dE=0.25

# Parameter:   id =  dCD, name = dCD, constant
par dCD=1.5

# Parameter:   id =  dCE, name = dCE, constant
par dCE=1.5

# Parameter:   id =  dR, name = dR, constant
par dR=0.06

# Parameter:   id =  dRP, name = dRP, constant
par dRP=0.06

# Parameter:   id =  dRE, name = dRE, constant
par dRE=0.03

# Parameter:   id =  kP1, name = kP1, constant
par kP1=18.0

# Parameter:   id =  kP2, name = kP2, constant
par kP2=18.0

# Parameter:   id =  kDP, name = kDP, constant
par kDP=3.6

# Parameter:   id =  KM, name = KM, constant
par KM_1=0.15

# Parameter:   id =  KE, name = KE, constant
par KE_1=0.15

# Parameter:   id =  KCD, name = KCD, constant
par KCD_1=0.92

# Parameter:   id =  KCE, name = KCE, constant
par KCE_1=0.92

# Parameter:   id =  KRP, name = KRP, constant
par KRP=0.01

# Parameter:   id =  kpfb, name = kpfb, constant
par kpfb=4.0

# Reaction: id = For_Myc, name = For Myc

For_Myc=Cell*Rate_La_6(KS, Myc, dM, kM, serum)

# Reaction: id = For_E2F, name = For E2F

For_E2F=Cell*Rate_La_1(CycD, CycE, E2F, KCD_1, KCE_1, KE_1, KM_1, Myc, Rb, Rb_E2F_co, dE, kE, kP1, kP2, kRE, kb, kpfb)

# Reaction: id = For_CycD, name = For CycD

For_CycD=Cell*Rate_La_3(CycD, KM_1, KS, Myc, dCD, kCD, kCDS, serum)

# Reaction: id = for_CycE, name = for CycE

for_CycE=Cell*Rate_La_2(CycE, E2F, KE_1, dCE, kCE)

# Reaction: id = For_Rb, name = For Rb

For_Rb=Cell*Rate_La_4(CycD, CycE, E2F, KCD_1, KCE_1, KRP, Phosphory, Rb, dR, kDP, kP1, kP2, kR, kRE)

# Reaction: id = for_Phosphorylated_Rb, name = for Phosphorylated Rb

for_Phosp=Cell*Rate_La_5(CycD, CycE, KCD_1, KCE_1, Phosphory, Rb, Rb_E2F_co, dRP, kP1, kP2)

# Reaction: id = for_Rb_E2F_complex, name = for Rb-E2F complex

for_Rb_E2=Cell*Rate_Law_(CycD, CycE, KCD_1, KCE_1, Rb_E2F_co, dRE, kP1, kP2, kRE)

# Species:   id = Myc, name = Myc, affected by kineticLaw

init Myc=0.0
dMyc/dt=(1/(Cell))*(( 1.0 * For_Myc))

# Species:   id = E2F, name = E2F, affected by kineticLaw

init E2F=0.0
dE2F/dt=(1/(Cell))*(( 1.0 * For_E2F))

# Species:   id = CycD, name = CycD, affected by kineticLaw

init CycD=0.0
dCycD/dt=(1/(Cell))*(( 1.0 * For_CycD))

# Species:   id = CycE, name = CycE, affected by kineticLaw

init CycE=0.0
dCycE/dt=(1/(Cell))*(( 1.0 * for_CycE))

# Species:   id = Rb, name = Rb, affected by kineticLaw

init Rb=55.0
dRb/dt=(1/(Cell))*(( 1.0 * For_Rb))

# Species:   id = Phosphorylated_Rb, name = Phosphorylated Rb, affected by kineticLaw

par Phosphory=0.0
aux Phosphory=Phosphory
dPhosphory/dt=(1/(Cell))*(( 1.0 * for_Phosp))

# Species:   id = Rb_E2F_complex, name = Rb-E2F complex, affected by kineticLaw

par Rb_E2F_co=0.0
aux Rb_E2F_co=Rb_E2F_co
dRb_E2F_co/dt=(1/(Cell))*(( 1.0 * for_Rb_E2))

# Species:   id = serum, name = serum
# Warning species is not changed by either rules or reactions
# Species is changed by 1 event(s)
par serum=2.0
aux serum=serum

# event : Serum_Pulse
# unable to handle events with delays currently.
# event ignored.


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

