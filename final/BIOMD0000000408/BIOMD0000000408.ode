
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Hettling2011_CreatineKinase
#
# is http://identifiers.org/biomodels.db/MODEL1201250000
# is http://identifiers.org/biomodels.db/BIOMD0000000408
# isDescribedBy http://identifiers.org/pubmed/21912519
# isDerivedFrom http://identifiers.org/biomodels.db/BIOMD0000000041
# isDerivedFrom http://identifiers.org/biomodels.db/MODEL1006230027
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = IMS, name = IMS, constant
par IMS=0.0625

# Compartment: id = CYT, name = CYT, constant
par CYT=0.75

# Compartment: id = cell, name = cell, constant
par cell=1.0

# Parameter:   id =  j_diff_pcr, name = j_diff_pcr, defined by a Rule

# Parameter:   id =  j_diff_atp, name = j_diff_atp, defined by a Rule

# Parameter:   id =  densyn, name = densyn, defined by a Rule

# Parameter:   id =  tmito, name = tmito, defined by a Rule

# Parameter:   id =  vatpnorm, name = vatpnorm, defined by a Rule

# Parameter:   id =  jsyn, name = jsyn, defined by a Rule

# Parameter:   id =  r_diff_pcr, name = r_diff_pcr, defined by a Rule

# Parameter:   id =  j_ck_mi, name = j_ck_mi, defined by a Rule

# Parameter:   id =  j_ck_mm, name = j_ck_mm, defined by a Rule

# Parameter:   id =  j_diff_adp, name = j_diff_adp, defined by a Rule

# Parameter:   id =  j_diff_cr, name = j_diff_cr, defined by a Rule

# Parameter:   id =  j_diff_pi, name = j_diff_pi, defined by a Rule

# Parameter:   id =  stepsize, name = stepsize, constant
par stepsize=0.001

# Parameter:   id =  phase, name = phase, defined by a Rule

# Parameter:   id =  heartrate_bpm, name = heartrate_bpm
par heartrate=135.0

# Parameter:   id =  heartrate_basis, name = heartrate_basis, constant
par heartra_1=135.0

# Parameter:   id =  heartrate_test, name = heartrate_test, constant
par heartra_2=220.0

# Parameter:   id =  fracDia, name = fracDia, defined by a Rule

# Parameter:   id =  fracSysUp, name = fracSysUp, constant
par fracSysUp=0.1666666666

# Parameter:   id =  fracSysDown, name = fracSysDown, constant
par fracSysDo=0.1666666666

# Parameter:   id =  VhydAmp_basis, name = VhydAmp_basis, defined by a Rule

# Parameter:   id =  VhydAmp_test, name = VhydAmp_test, defined by a Rule

# Parameter:   id =  time_Jhyd_step, name = time_Jhyd_step, constant
par time_Jhyd=40.0

# Parameter:   id =  Jhyd_test, name = Jhyd_test
# Warning parameter Jhyd_test is not constant, it should be controled by a Rule and/or events
par Jhyd_test=627.6

# Parameter:   id =  Jhyd_basis, name = Jhyd_basis, constant
par Jhyd_basi=486.5

# Parameter:   id =  last_time_fired, name = last_time_fired
par last_time=0.0

# Parameter:   id =  Jhyd, name = Jhyd
par Jhyd=486.5

# Parameter:   id =  ck_factor_iaa, name = ck_factor_iaa, constant
par ck_factor=1.0

# Parameter:   id =  ck_factor_ia, name = ck_factor_ia, constant
par ck_fact_1=0.0286

# Parameter:   id =  tmito_factor, name = tmito_factor
par tmito_fac=0.0

# Parameter:   id =  PSmomATP, name = PSmomATP, constant
par PSmomATP=13.29477

# Parameter:   id =  K_CK_eq, name = K_CK_eq, constant
par K_CK_eq=152.0

# Parameter:   id =  VmaxMMb, name = VmaxMMb, defined by a Rule

# Parameter:   id =  VmaxMib, name = VmaxMib, defined by a Rule

# Parameter:   id =  VmaxMif_full_activity, name = VmaxMif_full_activity, constant
par VmaxMif_f=882.0756

# Parameter:   id =  VmaxMMf_full_activity, name = VmaxMMf_full_activity, constant
par VmaxMMf_f=11441.78

# Parameter:   id =  VmaxMif, name = VmaxMif, defined by a Rule

# Parameter:   id =  VmaxMMf, name = VmaxMMf, defined by a Rule

# Parameter:   id =  KiaMi, name = KiaMi, constant
par KiaMi=750.0

# Parameter:   id =  KbMi, name = KbMi, constant
par KbMi=5200.0

# Parameter:   id =  KicMi, name = KicMi, constant
par KicMi=204.8

# Parameter:   id =  KdMi, name = KdMi, constant
par KdMi=500.0

# Parameter:   id =  KibMi, name = KibMi, constant
par KibMi=28800.0

# Parameter:   id =  KidMi, name = KidMi, constant
par KidMi=1600.0

# Parameter:   id =  KiaMM, name = KiaMM, constant
par KiaMM=900.0

# Parameter:   id =  KbMM, name = KbMM, constant
par KbMM=15500.0

# Parameter:   id =  KicMM, name = KicMM, constant
par KicMM=222.4

# Parameter:   id =  KdMM, name = KdMM, constant
par KdMM=1670.0

# Parameter:   id =  KibMM, name = KibMM, constant
par KibMM=34900.0

# Parameter:   id =  KidMM, name = KidMM, constant
par KidMM=4730.0

# Parameter:   id =  Vmaxsyn, name = Vmaxsyn, constant
par Vmaxsyn=1503.74

# Parameter:   id =  Kadp, name = Kadp, constant
par Kadp=25.0

# Parameter:   id =  Kpi, name = Kpi, constant
par Kpi=800.0

# Parameter:   id =  PSmomPi, name = PSmomPi, constant
par PSmomPi=194.0

# Parameter:   id =  PSmomCr, name = PSmomCr, constant
par PSmomCr=155.0

# Parameter:   id =  PSmomPCr, name = PSmomPCr, constant
par PSmomPCr=155.0

# Parameter:   id =  pulsatility, name = pulsatility
# Warning parameter pulsatility is not constant, it should be controled by a Rule and/or events
par pulsatili=1.0

# rateRule: variable = tmito
init tmito=0.0
dtmito/dt=vatpnorm

# assignmentRule: variable = densyn
densyn=1+ADPi/Kadp+P_ii/Kpi+ADPi*P_ii/(Kadp*Kpi)
aux densyn=densyn

# assignmentRule: variable = jsyn
jsyn=Vmaxsyn*ADPi*P_ii/(Kpi*Kadp*densyn)
aux jsyn=jsyn

# assignmentRule: variable = vatpnorm
vatpnorm=tmito_fac*(Jhyd_test-jsyn)/(Jhyd_test-Jhyd_basi)
aux vatpnorm=vatpnorm

# assignmentRule: variable = VmaxMif
VmaxMif=VmaxMif_f*ck_factor
aux VmaxMif=VmaxMif

# assignmentRule: variable = VmaxMMf
VmaxMMf=VmaxMMf_f*ck_factor
aux VmaxMMf=VmaxMMf

# assignmentRule: variable = VmaxMib
VmaxMib=K_CK_eq*KicMi*KdMi*VmaxMif/(KiaMi*KbMi)
aux VmaxMib=VmaxMib

# assignmentRule: variable = VmaxMMb
VmaxMMb=K_CK_eq*KicMM*KdMM*VmaxMMf/(KiaMM*KbMM)
aux VmaxMMb=VmaxMMb

# assignmentRule: variable = j_diff_pcr
j_diff_pc=PSmomPCr*(PCri-PCr)
aux j_diff_pc=j_diff_pc

# assignmentRule: variable = j_diff_atp
j_diff_at=PSmomATP*(ATPi-ATP)
aux j_diff_at=j_diff_at

# assignmentRule: variable = r_diff_pcr
r_diff_pc=j_diff_pc/(j_diff_pc+j_diff_at)
aux r_diff_pc=r_diff_pc

# assignmentRule: variable = phase
phase=(abs(t-time_Jhyd)-flr(abs(t-time_Jhyd)/60/heartrate)*60/heartrate)/60/heartrate
aux phase=phase

# assignmentRule: variable = fracDia
fracDia=1-fracSysUp-fracSysDo
aux fracDia=fracDia

# assignmentRule: variable = VhydAmp_basis
VhydAmp_b=2*Jhyd_basi/(fracSysUp+fracSysDo)
aux VhydAmp_b=VhydAmp_b

# assignmentRule: variable = VhydAmp_test
VhydAmp_t=2*Jhyd_test/(fracSysUp+fracSysDo)
aux VhydAmp_t=VhydAmp_t

# assignmentRule: variable = j_ck_mi
j_ck_mi=(VmaxMif*ATPi*Cri/(KiaMi*KbMi)-VmaxMib*ADPi*PCri/(KicMi*KdMi))/(1+Cri/KibMi+PCri/KidMi+ATPi*(1/KiaMi+Cri/(KiaMi*KbMi))+ADPi*(1/KicMi+Cri/(KicMi*KibMi)+PCri/(KidMi*KicMi*KdMi/KidMi)))
aux j_ck_mi=j_ck_mi

# assignmentRule: variable = j_ck_mm
j_ck_mm=(VmaxMMf*ATP*Cr/(KiaMM*KbMM)-VmaxMMb*ADP*PCr/(KicMM*KdMM))/(1+Cr/KibMM+PCr/KidMM+ATP*(1/KiaMM+Cr/(KiaMM*KbMM))+ADP*(1/KicMM+Cr/(KicMM*KibMM)+PCr/(KidMM*KicMM*KdMM/KidMM)))
aux j_ck_mm=j_ck_mm

# assignmentRule: variable = j_diff_adp
j_diff_ad=PSmomATP*(ADPi-ADP)
aux j_diff_ad=j_diff_ad

# assignmentRule: variable = j_diff_pi
j_diff_pi=PSmomPi*(P_ii-P_i)
aux j_diff_pi=j_diff_pi

# assignmentRule: variable = j_diff_cr
j_diff_cr=PSmomCr*(Cri-Cr)
aux j_diff_cr=j_diff_cr

# Reaction: id = Jsyn

Jsyn_1=Vmaxsyn*ADPi*P_ii/(Kadp*Kpi*(1+ADPi/Kadp+P_ii/Kpi+ADPi*P_ii/(Kadp*Kpi)))

# Reaction: id = J_CK_Mi

J_CK_Mi_1=j_ck_mi

# Reaction: id = J_CK_MM

J_CK_MM_1=j_ck_mm

# Reaction: id = Jhyd_reaction

Jhyd_reac=Jhyd

# Reaction: id = J_diff_Pi

J_diff__1=j_diff_pi

# Reaction: id = J_diff_Cr

J_diff__2=j_diff_cr

# Reaction: id = J_diff_ADP

J_diff__3=j_diff_ad

# Reaction: id = J_diff_PCr

J_diff__4=j_diff_pc

# Reaction: id = J_diff_ATP

J_diff__5=j_diff_at

# Species:   id = ADPi, name = ADPi, affected by kineticLaw

init ADPi=39.0
dADPi/dt=(1/(IMS))*((-1.0 * Jsyn_1) + ( 1.0 * J_CK_Mi_1) + (-1.0 * J_diff__3))

# Species:   id = ATPi, name = ATPi, affected by kineticLaw

init ATPi=5626.0
dATPi/dt=(1/(IMS))*(( 1.0 * Jsyn_1) + (-1.0 * J_CK_Mi_1) + (-1.0 * J_diff__5))

# Species:   id = Cri, name = Cri, affected by kineticLaw

init Cri=9789.0
dCri/dt=(1/(IMS))*((-1.0 * J_CK_Mi_1) + (-1.0 * J_diff__2))

# Species:   id = PCri, name = PCri, affected by kineticLaw

init PCri=5711.0
dPCri/dt=(1/(IMS))*(( 1.0 * J_CK_Mi_1) + (-1.0 * J_diff__4))

# Species:   id = PCr, name = PCr, affected by kineticLaw

init PCr=5710.0
dPCr/dt=(1/(CYT))*(( 1.0 * J_CK_MM_1) + ( 1.0 * J_diff__4))

# Species:   id = ADP, name = ADP, affected by kineticLaw

init ADP=64.0
dADP/dt=(1/(CYT))*(( 1.0 * J_CK_MM_1) + ( 1.0 * Jhyd_reac) + ( 1.0 * J_diff__3))

# Species:   id = ATP, name = ATP, affected by kineticLaw

init ATP=5601.0
dATP/dt=(1/(CYT))*((-1.0 * J_CK_MM_1) + (-1.0 * Jhyd_reac) + ( 1.0 * J_diff__5))

# Species:   id = Cr, name = Cr, affected by kineticLaw

init Cr=9789.0
dCr/dt=(1/(CYT))*((-1.0 * J_CK_MM_1) + ( 1.0 * J_diff__2))

# Species:   id = P_ii, name = P_ii, affected by kineticLaw

init P_ii=910.0
dP_ii/dt=(1/(IMS))*((-1.0 * Jsyn_1) + (-1.0 * J_diff__1))

# Species:   id = P_i, name = P_i, affected by kineticLaw

init P_i=912.0
dP_i/dt=(1/(CYT))*(( 1.0 * Jhyd_reac) + ( 1.0 * J_diff__1))

# event : event1
# unable to handle events with delays currently.
# event ignored.


# event : event2
# unable to handle events with delays currently.
# event ignored.


# event : event3
# unable to handle events with delays currently.
# event ignored.


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

