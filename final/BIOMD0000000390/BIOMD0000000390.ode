
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Arnold2011_Giersch1990_CalvinCycle
#
# is http://identifiers.org/biomodels.db/MODEL1109270005
# is http://identifiers.org/biomodels.db/BIOMD0000000390
# isDescribedBy http://identifiers.org/pubmed/22001849
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = function_6, name = PGA reduction
function_(Vm,S1,S2,P1,P2,P3,k,K1,K2)=(Vm*(S1*S2-P1*P2*P3/k)/(K1+S1*S2*K1/K2+P1*P2*P3/k))


# FunctionDefinition id = function_5, name = High Substrate MM - RuBisCO
functio_1(k,E,S,K)=(k/2*(E+S+K-((E+S+K)^2-4*E*S)^(0.5)))


# FunctionDefinition id = function_7, name = MM s1 - reg (TP reduction)
functio_2(Vm,S,K)=(Vm*S/(S+K))


# FunctionDefinition id = function_8, name = RuBP regeneration
functio_3(Vm,S1,S2,K1,K2,K3,R)=(Vm*S1*S2/(K1*K2+K2*S2+S1*S2+K3*R))


# FunctionDefinition id = function_10, name = MM s2 - reg (ATP synthesis)
functio_4(Vm,s1,s2,K1,K2)=(Vm*s1*s2/((s1+K1)*(s2+K2)))


# FunctionDefinition id = function_9, name = TP translocator
functio_5(S1,S2,P1,P2,K2,K1,Vm)=(Vm*(S1*S2-P1*P2)/((S1+P1)*K2+(S2+P2)*K1+K1*K2*(S1/K1+P2/K2)*(S2/K2+P1/K1)))


# Compartment: id = chloroplast, name = chloroplast, constant
par chloropla=1.0

# Compartment: id = cytosol, name = cytosol, constant
par cytosol=1.0

# Parameter:   id =  V6, name = V6, constant
par V6=5.8801285588795

# Parameter:   id =  P_0, name = P_0, constant
par P_0=16.0

# assignmentRule: variable = totRuBP
totRuBP=1/2*(P_0-(PGA+TP+Ru5P+Pi_ren+ATP))
aux totRuBP=totRuBP

# Reaction: id = RuBisCO, name = RuBisCO
# Local Parameter:   id =  k, name = k
par k=0.504

# Local Parameter:   id =  K, name = K
par K_1=0.04


RuBisCO=chloropla*functio_1(k, E_RuBisCO, totRuBP, K_1)

# Reaction: id = PGA_red, name = PGA reduction
# Local Parameter:   id =  Vm, name = Vm
par Vm=3.49

# Local Parameter:   id =  k, name = k
par k_1_2=14.0

# Local Parameter:   id =  K1, name = K1
par K1=1.0

# Local Parameter:   id =  K2, name = K2
par K2=1.0


PGA_red=chloropla*function_(Vm, PGA, ATP, ADP, TP, Pi_ren, k_1_2, K1, K2)

# Reaction: id = TP_red, name = TP reduction
# Local Parameter:   id =  Vm, name = Vm
par Vm_1=1.06

# Local Parameter:   id =  K, name = K
par K_1_2_3=0.4


TP_red=chloropla*functio_2(Vm_1, TP, K_1_2_3)

# Reaction: id = RuBP_reg, name = RuBP regeneration
# Local Parameter:   id =  Vm, name = Vm
par Vm_1_2=4.81

# Local Parameter:   id =  K1, name = K1
par K1_1=0.05

# Local Parameter:   id =  K2, name = K2
par K2_1=0.5

# Local Parameter:   id =  K3, name = K3
par K3=0.05


RuBP_reg=chloropla*functio_3(Vm_1_2, Ru5P, ATP, K1_1, K2_1, K3, Pi_ren)

# Reaction: id = TPT, name = TP translocator
# Local Parameter:   id =  K2, name = K2
par K2_1_2=0.25

# Local Parameter:   id =  K1, name = K1
par K1_1_2=0.08

# Local Parameter:   id =  Vm, name = Vm
par Vm_1_2_3=3.3


TPT=functio_5(TP, Pic, TPc, Pi_ren, K2_1_2, K1_1_2, Vm_1_2_3)

# Reaction: id = ATP_S, name = ATP synthesis
# Local Parameter:   id =  K1, name = K1
par K1_1_2_3=0.08

# Local Parameter:   id =  K2, name = K2
par K2_1_2_3=0.5


ATP_S=chloropla*functio_4(V6, ADP, Pi_ren, K1_1_2_3, K2_1_2_3)

# Species:   id = RuBP, name = RuBP, affected by kineticLaw

init RuBP=2.0
dRuBP/dt=(1/(chloropla))*((-1.0 * RuBisCO) + ( 1.0 * RuBP_reg))

# Species:   id = PGA, name = PGA, affected by kineticLaw

init PGA=2.4
dPGA/dt=(1/(chloropla))*(( 2.0 * RuBisCO) + (-1.0 * PGA_red))

# Species:   id = TP, name = TP, affected by kineticLaw

init TP=0.5
dTP/dt=(1/(chloropla))*(( 1.0 * PGA_red) + (-5.0 * TP_red) + (-1.0 * TPT))

# Species:   id = Ru5P, name = Ru5P, affected by kineticLaw

init Ru5P=0.0500747384155456
dRu5P/dt=(1/(chloropla))*(( 3.0 * TP_red) + (-1.0 * RuBP_reg))

# Species:   id = Pi, name = Pi, affected by kineticLaw

par Pi_ren=5.0
aux Pi_ren=Pi_ren
dPi_ren/dt=(1/(chloropla))*(( 1.0 * PGA_red) + ( 2.0 * TP_red) + ( 1.0 * TPT) + (-1.0 * ATP_S))

# Species:   id = ATP, name = ATP, affected by kineticLaw

init ATP=0.68
dATP/dt=(1/(chloropla))*((-1.0 * PGA_red) + (-1.0 * RuBP_reg) + ( 1.0 * ATP_S))

# Species:   id = ADP, name = ADP, affected by kineticLaw

init ADP=0.82
dADP/dt=(1/(chloropla))*(( 1.0 * PGA_red) + ( 1.0 * RuBP_reg) + (-1.0 * ATP_S))

# Species:   id = E_RuBisCO, name = RuBisCo, constant
par E_RuBisCO=3.56


# Species:   id = totRuBP, name = totRuBP, involved in a rule 

# Species:   id = TPc, name = TPc, constant
par TPc=0.2


# Species:   id = Pic, name = Pic, constant
par Pic=1.4


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

