
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Nazari2018 - IL6 mediated stem cell driven tumor growth and targeted treatment
#
# is http://identifiers.org/biomodels.db/MODEL1909230001
# is http://identifiers.org/biomodels.db/BIOMD0000000819
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_S_self_renewal, name = Function for S self-renewal
Function_(alpha_S,P_S,S)=(alpha_S*P_S*S)


# FunctionDefinition id = Function_for_S_death, name = Function for S death
Functio_1(delta_S,S,gamma_S,phi_S)=(delta_S*S/(1+gamma_S*phi_S))


# FunctionDefinition id = Function_for_amplified_S_differentiation, name = Function for amplified S differentiation
Functio_2(A_in,alpha_S,P_S,S)=(A_in*alpha_S*(1-P_S)*S)


# FunctionDefinition id = Function_for_Progenitor_Cell_E_differentiation, name = Function for Progenitor Cell E differentiation
Functio_3(alpha_E,E)=(alpha_E*E)


# FunctionDefinition id = Function_for_Progenitor_Cell_E_death, name = Function for Progenitor Cell E death
Functio_4(delta_E,E,gamma_E,phi_E)=(delta_E*E/(1+gamma_E*phi_E))


# FunctionDefinition id = Function_for_Progenitor_Cell_E_differentiation_form_D, name = Function for Progenitor Cell E differentiation form D
Functio_5(A_out,alpha_E,E)=(A_out*alpha_E*E)


# FunctionDefinition id = Function_for_Differentiated_cell_D_death, name = Function for Differentiated cell D death
Functio_6(delta_D,D,gamma_D,phi_D)=(delta_D*D/(1+gamma_D*phi_D))


# FunctionDefinition id = Function_for_IL6_binding_to_stem_cells, name = Function for IL6 binding to stem cells
Functio_7(k_f,L,R_S)=(k_f*L*R_S)


# FunctionDefinition id = Function_for_IL6_dissociation_from_stem_cells, name = Function for IL6 dissociation from stem cells
Functio_8(K_r,C_S)=(K_r*C_S)


# FunctionDefinition id = Function_for_IL6_binding_to_progenitor_cells, name = Function for IL6 binding to progenitor cells
Functio_9(K_f,L,R_E)=(K_f*L*R_E)


# FunctionDefinition id = Function_for_IL6_dissociation_from_progenitor_cells, name = Function for IL6 dissociation from progenitor cells
Functi_10(K_r,C_E)=(K_r*C_E)


# FunctionDefinition id = Function_for_IL6_binding_to_differentiated_cells, name = Function for IL6 binding to differentiated cells
Functi_11(K_f,L,R_D)=(K_f*L*R_D)


# FunctionDefinition id = Function_for_IL6_dissociation_from_differentiated_cells, name = Function for IL6 dissociation from differentiated cells
Functi_12(C_D,K_r)=(K_r*C_D)


# FunctionDefinition id = Function_for_IL6_natural_decay, name = Function for IL6 natural decay
Functi_13(lambda_L,L)=(lambda_L*L)


# FunctionDefinition id = Function_for_IL6_Production_by_tumor_cells, name = Function for IL6 Production by tumor cells
Functi_14(rho,S,E,D)=(rho*(S+E+D))


# FunctionDefinition id = Function_for_recycling_of_Receptor_S, name = Function for recycling of Receptor_S
Functi_15(K_p,C_S)=(K_p*C_S)


# FunctionDefinition id = Function_for_recycling_of_Receptor_E, name = Function for recycling of Receptor_E
Functi_16(K_P,C_E)=(K_P*C_E)


# FunctionDefinition id = Function_for_recycling_of_Receptor_D, name = Function for recycling of Receptor_D
Functi_17(K_p,C_D)=(K_p*C_D)


# FunctionDefinition id = Function_for_Generation_of_new_R_S_via_cell_proliferation, name = Function for Generation of new R_S via cell proliferation
Functi_18(R_Ts,P_phiS)=(R_Ts*P_phiS)


# FunctionDefinition id = Function_for_Generation_of_new_R_E_via_cell_proliferation, name = Function for Generation of new R_E via cell proliferation
Functi_19(R_Te,P_etaE)=(R_Te*P_etaE)


# FunctionDefinition id = Function_for_Generation_of_new_R_D_via_cell_proliferation, name = Function for Generation of new R_D via cell proliferation
Functi_20(R_Td,P_DD)=(R_Td*P_DD)


# FunctionDefinition id = Function_for_Loss_of_RS_via_cell_death, name = Function for Loss of RS via cell death
Functi_21(R_S,R_Ts,D_phiS,C_S)=(R_S*R_Ts*D_phiS/(R_S+C_S))


# FunctionDefinition id = Function_for_Loss_of_RE_via_cell_death, name = Function for Loss of RE via cell death
Functi_22(R_E,R_Te,D_etaE,C_E)=(R_E*R_Te*D_etaE/(R_E+C_E))


# FunctionDefinition id = Function_for_Loss_of_RD_via_cell_death, name = Function for Loss of RD via cell death
Functi_23(R_D,R_Td,D_DD,C_D)=(R_D*R_Td*D_DD/(R_D+C_D))


# FunctionDefinition id = Function_for_Loss_of_C_S_via_cell_death, name = Function for Loss of C_S via cell death
Functi_24(C_S,R_Ts,D_phiS,R_S)=(C_S*R_Ts*D_phiS/(R_S+C_S))


# FunctionDefinition id = Function_for_Loss_of_C_E_via_cell_death, name = Function for Loss of C_E via cell death
Functi_25(C_E,R_Te,D_etaE,R_E)=(C_E*R_Te*D_etaE/(R_E+C_E))


# FunctionDefinition id = Function_for_Loss_of_C_D_via_cell_death, name = Function for Loss of C_D via cell death
Functi_26(C_D,R_Td,D_DD,R_D)=(C_D*R_Td*D_DD/(R_D+C_D))


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  alpha_S, name = alpha_S, constant
par alpha_S=0.6

# Parameter:   id =  phi_S, name = phi_S, defined by a Rule

# Parameter:   id =  R_Ts, name = R_Ts, constant
par R_Ts=1.66E-6

# Parameter:   id =  delta_S, name = delta_S, defined by a Rule

# Parameter:   id =  gamma_S, name = gamma_S, constant
par gamma_S=2.38

# Parameter:   id =  A_in, name = A_in, constant
par A_in=2.0

# Parameter:   id =  A_out, name = A_out, constant
par A_out=2.0

# Parameter:   id =  alpha_E, name = alpha_E, defined by a Rule

# Parameter:   id =  R_Te, name = R_Te, defined by a Rule

# Parameter:   id =  R_Td, name = R_Td, defined by a Rule

# Parameter:   id =  phi_E, name = phi_E, defined by a Rule

# Parameter:   id =  phi_D, name = phi_D, defined by a Rule

# Parameter:   id =  Pstar_Smin, name = Pstar_Smin, constant
par Pstar_Smi=0.014

# Parameter:   id =  P_Smax, name = P_Smax, constant
par P_Smax=0.9

# Parameter:   id =  delta_D, name = delta_D, constant
par delta_D=0.0612

# Parameter:   id =  delta_E, name = delta_E, constant
par delta_E=0.0612

# Parameter:   id =  n, name = n, constant
par n=2.6

# Parameter:   id =  P_Smin, name = P_Smin, defined by a Rule

# Parameter:   id =  myu, name = myu, constant
par myu=0.04

# Parameter:   id =  P_Ns, name = P_Ns, constant
par P_Ns=728455.0

# Parameter:   id =  P_S, name = P_S, defined by a Rule

# Parameter:   id =  gamma_E, name = gamma_E, constant
par gamma_E=2.38

# Parameter:   id =  gamma_D, name = gamma_D, constant
par gamma_D=2.38

# Parameter:   id =  K_f, name = K_f, constant
par K_f=2.35

# Parameter:   id =  K_r, name = K_r, constant
par K_r=2.24

# Parameter:   id =  lambda, name = lambda, constant
par lambda=0.4152

# Parameter:   id =  rho, name = rho, constant
par rho=7.0E-7

# Parameter:   id =  K_p, name = K_p, constant
par K_p=24.95

# Parameter:   id =  P_phiS, name = P_phiS, defined by a Rule

# Parameter:   id =  P_etaE, name = P_etaE, defined by a Rule

# Parameter:   id =  P_DD, name = P_DD, defined by a Rule

# Parameter:   id =  D_phiS, name = D_phiS, defined by a Rule

# Parameter:   id =  D_etaE, name = D_etaE, defined by a Rule

# Parameter:   id =  D_DD, name = D_DD, defined by a Rule

# assignmentRule: variable = tumor
tumor=Cancer_St+Different+Progenito
aux tumor=tumor

# assignmentRule: variable = phi_S
phi_S=IL_6__Cel/(R_Ts*Cancer_St)
aux phi_S=phi_S

# assignmentRule: variable = delta_S
delta_S=1.5*alpha_S*Pstar_Smi
aux delta_S=delta_S

# assignmentRule: variable = alpha_E
alpha_E=log(2)/1.04
aux alpha_E=alpha_E

# assignmentRule: variable = R_Te
R_Te=R_Ts/8
aux R_Te=R_Te

# assignmentRule: variable = R_Td
R_Td=R_Ts/8
aux R_Td=R_Td

# assignmentRule: variable = phi_E
phi_E=IL_6__C_1/(R_Te*Progenito)
aux phi_E=phi_E

# assignmentRule: variable = phi_D
phi_D=IL_6__C_2/(R_Td*Different)
aux phi_D=phi_D

# assignmentRule: variable = P_Smin
P_Smin=myu*(P_Smax-Pstar_Smi)*phi_S+Pstar_Smi
aux P_Smin=P_Smin

# assignmentRule: variable = P_S
P_S=(P_Smax-P_Smin)*P_Ns^n/(P_Ns^n+Cancer_St^n)+P_Smin
aux P_S=P_S

# assignmentRule: variable = P_phiS
P_phiS=alpha_S*P_S*Cancer_St
aux P_phiS=P_phiS

# assignmentRule: variable = P_etaE
P_etaE=A_in*alpha_S*(1-P_S)*Cancer_St-alpha_E*Progenito
aux P_etaE=P_etaE

# assignmentRule: variable = P_DD
P_DD=A_out*alpha_E*Progenito
aux P_DD=P_DD

# assignmentRule: variable = D_phiS
D_phiS=delta_S*Cancer_St/(1+gamma_S*phi_S)
aux D_phiS=D_phiS

# assignmentRule: variable = D_etaE
D_etaE=delta_E*Progenito/(1+gamma_E*phi_E)
aux D_etaE=D_etaE

# assignmentRule: variable = D_DD
D_DD=delta_D*Different/(1+gamma_D*phi_D)
aux D_DD=D_DD

# Reaction: id = Cancer_Stem_cell_S_self_renewal, name = Cancer Stem cell S self-renewal

Cancer__1=compartme*Function_(alpha_S, P_S, Cancer_St)

# Reaction: id = Cancer_Stem_Cell_S_death, name = Cancer Stem Cell S death

Cancer__2=compartme*Functio_1(delta_S, Cancer_St, gamma_S, phi_S)

# Reaction: id = Amplified_Stem_Cell_differentiation, name = Amplified Stem Cell differentiation

Amplified=compartme*Functio_2(A_in, alpha_S, P_S, Cancer_St)

# Reaction: id = Progenitor_Cell_E_differentiation, name = Progenitor Cell E differentiation

Progeni_1=compartme*Functio_3(alpha_E, Progenito)

# Reaction: id = Progenitor_Cell_E_death, name = Progenitor Cell E death

Progeni_2=compartme*Functio_4(delta_E, Progenito, gamma_E, phi_E)

# Reaction: id = Progenitor_Cell_differentiation_form_D, name = Progenitor Cell differentiation form D

Progeni_3=compartme*Functio_5(A_out, alpha_E, Progenito)

# Reaction: id = Differentiated_Cell_D_death, name = Differentiated Cell D death

Differe_1=compartme*Functio_6(delta_D, Different, gamma_D, phi_D)

# Reaction: id = IL6_binding_to_stem_cells, name = IL6 binding to stem cells

IL6_bindi=compartme*Functio_7(K_f, IL_6__L, IL_6R_on_)

# Reaction: id = IL6_dissociation_from_stem_cells, name = IL6 dissociation from stem cells

IL6_disso=compartme*Functio_8(K_r, IL_6__Cel)

# Reaction: id = IL6_binding_to_progenitor_cells, name = IL6 binding to progenitor cells

IL6_bin_1=compartme*Functio_9(K_f, IL_6__L, IL_6R_o_1)

# Reaction: id = IL6_dissociation_from_progenitor_cells, name = IL6 dissociation from progenitor cells

IL6_dis_1=compartme*Functi_10(K_r, IL_6__C_1)

# Reaction: id = IL6_binding_to_differentiated_cells, name = IL6 binding to differentiated cells

IL6_bin_2=compartme*Functi_11(K_f, IL_6__L, IL_6R_o_2)

# Reaction: id = IL6_dissociation_from_differentiated_cells, name = IL6 dissociation from differentiated cells

IL6_dis_2=compartme*Functi_12(IL_6__C_2, K_r)

# Reaction: id = IL6_natural_decay, name = IL6 natural decay

IL6_natur=compartme*Functi_13(lambda, IL_6__L)

# Reaction: id = IL6_Production_by_tumor_cells, name = IL6 Production by tumor cells

IL6_Produ=compartme*Functi_14(rho, Cancer_St, Progenito, Different)

# Reaction: id = Recycling_of_Receptors_S, name = Recycling of Receptors_S

Recycling=compartme*Functi_15(K_p, IL_6__Cel)

# Reaction: id = Recycling_of_Receptors_E, name = Recycling of Receptors_E

Recycli_1=compartme*Functi_16(K_p, IL_6__C_1)

# Reaction: id = Recycling_of_Receptors_D, name = Recycling of Receptors_D

Recycli_2=compartme*Functi_17(K_p, IL_6__C_2)

# Reaction: id = Generation_of_new_R_S_via_cell_proliferation, name = Generation of new R_S via cell proliferation

Generatio=compartme*Functi_18(R_Ts, P_phiS)

# Reaction: id = Generation_of_new_R_E_via_cell_proliferation, name = Generation of new R_E via cell proliferation

Generat_1=compartme*Functi_19(R_Te, P_etaE)

# Reaction: id = Generation_of_new_R_D_via_cell_proliferation, name = Generation of new R_D via cell proliferation

Generat_2=compartme*Functi_20(R_Td, P_DD)

# Reaction: id = Loss_of_Receptors_S__via_cell_death, name = Loss of Receptors_S  via cell death

Loss_of_R=compartme*Functi_21(IL_6R_on_, R_Ts, D_phiS, IL_6__Cel)

# Reaction: id = Loss_of_Receptors_E_via_cell_death, name = Loss of Receptors_E via cell death

Loss_of_1=compartme*Functi_22(IL_6R_o_1, R_Te, D_etaE, IL_6__C_1)

# Reaction: id = Loss_of_Receptors_D_via_cell_death, name = Loss of Receptors_D via cell death

Loss_of_2=compartme*Functi_23(IL_6R_o_2, R_Td, D_DD, IL_6__C_2)

# Reaction: id = Loss_of_C_S_via_cell_death, name = Loss of C_S via cell death

Loss_of_C=compartme*Functi_24(IL_6__Cel, R_Ts, D_phiS, IL_6R_on_)

# Reaction: id = Loss_of_C_E_via_cell_death, name = Loss of C_E via cell death

Loss_of_3=compartme*Functi_25(IL_6__C_1, R_Te, D_etaE, IL_6R_o_1)

# Reaction: id = Loss_of_C_D_via_cell_death, name = Loss of C_D via cell death

Loss_of_4=compartme*Functi_26(IL_6__C_2, R_Td, D_DD, IL_6R_o_2)

# Reaction: id = IL6_binding_to_R_S, name = IL6 binding to R_S

IL6_bin_3=compartme*Functio_7(K_f, IL_6__L, IL_6R_on_)

# Reaction: id = IL6_binding_to_R_E, name = IL6 binding to R_E

IL6_bin_4=compartme*Functio_9(K_f, IL_6__L, IL_6R_o_1)

# Reaction: id = IL6_binding_to_R_D, name = IL6 binding to R_D

IL6_bin_5=compartme*Functi_11(K_f, IL_6__L, IL_6R_o_2)

# Species:   id = Cancer_Stem_Cell_S, name = Cancer Stem Cell S, affected by kineticLaw

par Cancer_St=1000.0
aux Cancer_St=Cancer_St
dCancer_St/dt=(1/(compartme))*(( 1.0 * Cancer__1) + (-1.0 * Cancer__2))

# Species:   id = IL_6__Cell_bound_IL_6R_complex_on_S, name = IL-6, Cell bound IL-6R complex on S, affected by kineticLaw

par IL_6__Cel=0.0
aux IL_6__Cel=IL_6__Cel
dIL_6__Cel/dt=(1/(compartme))*((-1.0 * IL6_disso) + (-1.0 * Recycling) + (-1.0 * Loss_of_C) + ( 1.0 * IL6_bin_3))

# Species:   id = Progenitor_tumor_cell_E, name = Progenitor tumor cell E, affected by kineticLaw

par Progenito=0.01
aux Progenito=Progenito
dProgenito/dt=(1/(compartme))*(( 1.0 * Amplified) + (-1.0 * Progeni_1) + (-1.0 * Progeni_2))

# Species:   id = Differentiated_tumor_cell_D, name = Differentiated tumor cell D, affected by kineticLaw

par Different=0.01
aux Different=Different
dDifferent/dt=(1/(compartme))*(( 1.0 * Progeni_3) + (-1.0 * Differe_1))

# Species:   id = IL_6__Cell_bound_IL_6R_complex_on_E, name = IL-6, Cell bound IL-6R complex on E, affected by kineticLaw

par IL_6__C_1=0.0
aux IL_6__C_1=IL_6__C_1
dIL_6__C_1/dt=(1/(compartme))*((-1.0 * IL6_dis_1) + (-1.0 * Recycli_1) + (-1.0 * Loss_of_3) + ( 1.0 * IL6_bin_4))

# Species:   id = IL_6__Cell_bound_IL_6R_complex_on_D, name = IL-6, Cell bound IL-6R complex on D, affected by kineticLaw

par IL_6__C_2=0.0
aux IL_6__C_2=IL_6__C_2
dIL_6__C_2/dt=(1/(compartme))*((-1.0 * IL6_dis_2) + (-1.0 * Recycli_2) + (-1.0 * Loss_of_4) + ( 1.0 * IL6_bin_5))

# Species:   id = IL_6__L, name = IL-6 (L), affected by kineticLaw

init IL_6__L=0.0
dIL_6__L/dt=(1/(compartme))*((-1.0 * IL6_bindi) + ( 1.0 * IL6_disso) + (-1.0 * IL6_bin_1) + ( 1.0 * IL6_dis_1) + (-1.0 * IL6_bin_2) + ( 1.0 * IL6_dis_2) + (-1.0 * IL6_natur) + ( 1.0 * IL6_Produ))

# Species:   id = IL_6R_on_S, name = IL-6R on S, affected by kineticLaw

par IL_6R_on_=1.0
aux IL_6R_on_=IL_6R_on_
dIL_6R_on_/dt=(1/(compartme))*((-1.0 * IL6_bindi) + ( 1.0 * IL6_disso) + ( 1.0 * Recycling) + ( 1.0 * Generatio) + (-1.0 * Loss_of_R))

# Species:   id = IL_6R_on_E, name = IL-6R on E, affected by kineticLaw

par IL_6R_o_1=1.0
aux IL_6R_o_1=IL_6R_o_1
dIL_6R_o_1/dt=(1/(compartme))*((-1.0 * IL6_bin_1) + ( 1.0 * IL6_dis_1) + ( 1.0 * Recycli_1) + ( 1.0 * Generat_1) + (-1.0 * Loss_of_1))

# Species:   id = IL_6R_on_D, name = IL-6R on D, affected by kineticLaw

par IL_6R_o_2=1.0
aux IL_6R_o_2=IL_6R_o_2
dIL_6R_o_2/dt=(1/(compartme))*((-1.0 * IL6_bin_2) + ( 1.0 * IL6_dis_2) + ( 1.0 * Recycli_2) + ( 1.0 * Generat_2) + (-1.0 * Loss_of_2))

# Species:   id = tumor, name = tumor, involved in a rule 

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

