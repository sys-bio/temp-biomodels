
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Wang2008 - Mimicking the inhibitory effect of riluzole on membrane conductance in skeletal fibres
#
# is http://identifiers.org/biomodels.db/MODEL7817907010
# hasInstance http://identifiers.org/kegg.drug/D00775
# hasInstance http://identifiers.org/biomodels.db/MODEL7817907010
# hasInstance http://identifiers.org/modeldb/105528
# hasInstance http://identifiers.org/go/GO:0022832
# hasInstance http://identifiers.org/go/GO:0042493
# hasInstance http://identifiers.org/doid/DOID:332
# hasInstance http://identifiers.org/bto/BTO:0001103
# hasInstance http://identifiers.org/taxonomy/9606
# hasInstance http://identifiers.org/go/GO:0001508
# isDescribedBy http://identifiers.org/pubmed/18068197
# is http://identifiers.org/biomodels.db/BIOMD0000000693
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = Skeletal_Muscle_Cells, name = Skeletal Muscle Cells, constant
par Skeletal_=1.0

# Parameter:   id =  gNa_max, name = gNa_max, constant
par gNa_max=0.9

# Parameter:   id =  gcabar, name = gcabar, constant
par gcabar=0.05

# Parameter:   id =  gk_max, name = gk_max, constant
par gk_max=0.42

# Parameter:   id =  gL_max, name = gL_max, constant
par gL_max=0.0024

# Parameter:   id =  gKca, name = gKca, constant
par gKca=0.5

# Parameter:   id =  ENa, name = ENa, constant
par ENa=50.0

# Parameter:   id =  EK, name = EK, constant
par EK=-70.0

# Parameter:   id =  EL, name = EL, constant
par EL=-75.0

# Parameter:   id =  ECa, name = ECa, constant
par ECa=50.0

# Parameter:   id =  En, name = En, constant
par En=-40.0

# Parameter:   id =  Em, name = Em, constant
par Em=-42.0

# Parameter:   id =  Eh, name = Eh, constant
par Eh=-41.0

# Parameter:   id =  Ct, name = Ct, constant
par Ct=0.04

# Parameter:   id =  Cm, name = Cm, constant
par Cm=0.009

# Parameter:   id =  Rs, name = Rs, constant
par Rs=15.0

# Parameter:   id =  Am, name = Am, constant
par Am=200.0

# Parameter:   id =  alpha_n_max, name = alpha_n_max, constant
par alpha_n_m=0.0229

# Parameter:   id =  beta_n_max, name = beta_n_max, constant
par beta_n_ma=0.09616

# Parameter:   id =  v_alpha_m, name = v_alpha_m, constant
par v_alpha_m=10.0

# Parameter:   id =  v_alpha_n, name = v_alpha_n, constant
par v_alpha_n=7.0

# Parameter:   id =  v_alpha_h, name = v_alpha_h, constant
par v_alpha_h=14.7

# Parameter:   id =  alpha_m_max, name = alpha_m_max, constant
par alpha_m_m=0.208

# Parameter:   id =  beta_m_max, name = beta_m_max, constant
par beta_m_ma=2.081

# Parameter:   id =  v_beta_n, name = v_beta_n, constant
par v_beta_n=40.0

# Parameter:   id =  v_beta_m, name = v_beta_m, constant
par v_beta_m=18.0

# Parameter:   id =  v_beta_h, name = v_beta_h, constant
par v_beta_h=7.6

# Parameter:   id =  alpha_h_max, name = alpha_h_max, constant
par alpha_h_m=0.0156

# Parameter:   id =  beta_h_max, name = beta_h_max, constant
par beta_h_ma=3.382

# Parameter:   id =  kd, name = kd, constant
par kd=0.18

# Parameter:   id =  alpha, name = alpha, constant
par alpha=4.5E-6

# Parameter:   id =  kpmca, name = kpmca, constant
par kpmca=0.2

# Parameter:   id =  pleak, name = pleak, constant
par pleak=5.0E-4

# Parameter:   id =  kserca, name = kserca, constant
par kserca=0.4

# Parameter:   id =  d1, name = d1, constant
par d1=0.84

# Parameter:   id =  d2, name = d2, constant
par d2=1.0

# Parameter:   id =  k1, name = k1, constant
par k1=0.18

# Parameter:   id =  k2, name = k2, constant
par k2=0.011

# Parameter:   id =  bbar, name = bbar, constant
par bbar=0.28

# Parameter:   id =  abar, name = abar, constant
par abar=0.48

# Parameter:   id =  fer, name = fer, constant
par fer=0.01

# Parameter:   id =  vcytver, name = vcytver, constant
par vcytver=5.0

# Parameter:   id =  fcyt, name = fcyt, constant
par fcyt=0.01

# Parameter:   id =  Stimulus_Period, name = Stimulus_Period, constant
par Stimulus_=50.0

# Parameter:   id =  Stimulus_Magnitude, name = Stimulus_Magnitude, constant
par Stimulu_1=2.0

# Parameter:   id =  Stimulus_Start, name = Stimulus_Start, constant
par Stimulu_2=5.0

# Parameter:   id =  Stimulus_Duration, name = Stimulus_Duration, constant
par Stimulu_3=1.0

# Parameter:   id =  alp, name = alp, defined by a Rule

# Parameter:   id =  beta, name = beta, defined by a Rule

# Parameter:   id =  tau, name = tau, defined by a Rule

# Parameter:   id =  ooinf, name = ooinf, defined by a Rule

# Parameter:   id =  dinf, name = dinf, defined by a Rule

# Parameter:   id =  taud, name = taud, defined by a Rule

# Parameter:   id =  alphad, name = alphad, defined by a Rule

# Parameter:   id =  betad, name = betad, defined by a Rule

# Parameter:   id =  gca, name = gca, defined by a Rule

# assignmentRule: variable = IK
IK=gk_max*n^4*(Vm-EK)
aux IK=IK

# assignmentRule: variable = INa
INa=gNa_max*m^3*h*(Vm-ENa)
aux INa=INa

# assignmentRule: variable = Stimulus
Stimulus= piecew1 
aux Stimulus=Stimulus

# assignmentRule: variable = IL
IL=gL_max*(Vm-EL)
aux IL=IL

# assignmentRule: variable = IT
IT=(Vm-Vt)/Rs
aux IT=IT

# assignmentRule: variable = beta_n
beta_n=beta_n_ma*exp((En-Vm)/v_beta_n)
aux beta_n=beta_n

# assignmentRule: variable = alpha_n
alpha_n=alpha_n_m*(Vm-En)/(1-exp((En-Vm)/v_alpha_n))
aux alpha_n=alpha_n

# assignmentRule: variable = beta_h
beta_h=beta_h_ma/(1+exp((Eh-Vm)/v_beta_h))
aux beta_h=beta_h

# assignmentRule: variable = beta_m
beta_m=beta_m_ma*exp((Em-Vm)/v_beta_m)
aux beta_m=beta_m

# assignmentRule: variable = alpha_m
alpha_m=alpha_m_m*(Vm-Em)/(1-exp((Em-Vm)/v_alpha_m))
aux alpha_m=alpha_m

# assignmentRule: variable = alpha_h
alpha_h=alpha_h_m*exp((Eh-Vm)/v_alpha_m)
aux alpha_h=alpha_h

# assignmentRule: variable = w
w=c^5/(c^5+kd^5)
aux w=w

# assignmentRule: variable = IKCa
IKCa=gKca*o*w*(Vm-EK)
aux IKCa=IKCa

# assignmentRule: variable = jleak
jleak=pleak*(cer-c)
aux jleak=jleak

# assignmentRule: variable = jserca
jserca=kserca*c
aux jserca=jserca

# assignmentRule: variable = jer
jer=jleak-jserca
aux jer=jer

# assignmentRule: variable = alp
alp=abar/(1+k1*exp((-2)*d1*96.485*Vm/8.313424/310)/c)
aux alp=alp

# assignmentRule: variable = beta
beta=bbar/(1+c/(k2*exp((-2)*d2*96.485*Vm/8.313424/310)))
aux beta=beta

# assignmentRule: variable = tau
tau=1/(alp+beta)
aux tau=tau

# assignmentRule: variable = ooinf
ooinf=alp*tau
aux ooinf=ooinf

# assignmentRule: variable = dinf
dinf=1/(1+exp(((-24.6)-Vm)/11.3))
aux dinf=dinf

# assignmentRule: variable = taud
taud=80/(1/cosh((-0.031)*(Vm+37.1)))
aux taud=taud

# assignmentRule: variable = alphad
alphad=dinf/taud
aux alphad=alphad

# assignmentRule: variable = betad
betad=(1-dinf)/taud
aux betad=betad

# assignmentRule: variable = gca
gca=(-gcabar)*Vm/(exp(0.117*Vm)-1)
aux gca=gca

# assignmentRule: variable = ICa
ICa=gca*d^2
aux ICa=ICa

# assignmentRule: variable = jmem
jmem=-(alpha*ICa+kpmca*c)
aux jmem=jmem

# rateRule: variable = Vm
init Vm=-75.0
dVm/dt=(Stimulus-(INa+ICa+IK+IL+IT+IKCa))/Cm

# rateRule: variable = m
init m=0.0
dm/dt=alpha_m*(1-m)-beta_m*m

# rateRule: variable = h
init h=1.0
dh/dt=alpha_h*(1-h)-beta_h*h

# rateRule: variable = n
init n=0.1
dn/dt=alpha_n*(1-n)-beta_n*n

# rateRule: variable = Vt
init Vt=-70.0
dVt/dt=(Vm-Vt)/(Rs*Ct)

# rateRule: variable = d
init d=0.0
dd/dt=(1-d)*alphad-d*betad

# rateRule: variable = o
init o=0.1
do/dt=(ooinf-o)/tau

# rateRule: variable = c
init c=0.15
dc/dt=fcyt*(jmem+jer)

# rateRule: variable = cer
init cer=200.0
dcer/dt=(-fer)*vcytver*jer

# Species:   id = Vm, name = Vm, involved in a rule 

# Species:   id = m, name = m, involved in a rule 

# Species:   id = h, name = h, involved in a rule 

# Species:   id = n, name = n, involved in a rule 

# Species:   id = Vt, name = Vt, involved in a rule 

# Species:   id = d, name = d, involved in a rule 

# Species:   id = o, name = o, involved in a rule 

# Species:   id = c, name = c, involved in a rule 

# Species:   id = cer, name = cer, involved in a rule 

# Species:   id = INa, name = INa, involved in a rule 

# Species:   id = IT, name = IT, involved in a rule 

# Species:   id = IKCa, name = IKCa, involved in a rule 

# Species:   id = ICa, name = ICa, involved in a rule 

# Species:   id = IL, name = IL, involved in a rule 

# Species:   id = IK, name = IK, involved in a rule 

# Species:   id = Stimulus, name = Stimulus, involved in a rule 

# Species:   id = beta_n, name = beta_n, involved in a rule 

# Species:   id = beta_m, name = beta_m, involved in a rule 

# Species:   id = beta_h, name = beta_h, involved in a rule 

# Species:   id = alpha_n, name = alpha_n, involved in a rule 

# Species:   id = alpha_m, name = alpha_m, involved in a rule 

# Species:   id = alpha_h, name = alpha_h, involved in a rule 

# Species:   id = w, name = w, involved in a rule 

# Species:   id = jmem, name = jmem, involved in a rule 

# Species:   id = jleak, name = jleak, involved in a rule 

# Species:   id = jserca, name = jserca, involved in a rule 

# Species:   id = jer, name = jer, involved in a rule 


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if ((t  >=  Stimulu_2) && (((t-Stimulu_2)-flr((t-Stimulu_2)/Stimulus_)*Stimulus_)  <  Stimulu_3)) then (Stimulu_1) else (0)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

