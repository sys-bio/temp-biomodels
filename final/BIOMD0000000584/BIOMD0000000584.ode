
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Mandlik2015 - Tristable genetic circuit of Leishmania
#
# is http://identifiers.org/biomodels.db/MODEL1507170000
# is http://identifiers.org/biomodels.db/BIOMD0000000584
# isDescribedBy http://identifiers.org/pubmed/26264745
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = DefaultCompartment, name = DefaultCompartment, constant
par DefaultCo=1.0

# Parameter:   id =  tr3_Kd, name = tr3_Kd, constant
par tr3_Kd=1.0

# Parameter:   id =  tr3_h, name = tr3_h, constant
par tr3_h=2.0

# Parameter:   id =  tr4_Kd, name = tr4_Kd, constant
par tr4_Kd=1.0

# Parameter:   id =  tr4_h, name = tr4_h, constant
par tr4_h=2.0

# Parameter:   id =  pSLS4_strength, name = pSLS4_strength, constant
par pSLS4_str=2.57

# Parameter:   id =  tr5_Kd, name = tr5_Kd, constant
par tr5_Kd=1.0

# Parameter:   id =  tr5_h, name = tr5_h, constant
par tr5_h=2.0

# Parameter:   id =  tr6_Kd, name = tr6_Kd, constant
par tr6_Kd=1.0

# Parameter:   id =  tr6_h, name = tr6_h, constant
par tr6_h=2.0

# Parameter:   id =  p1_strength, name = p1_strength, constant
par p1_streng=2.5

# Parameter:   id =  p2_strength, name = p2_strength, constant
par p2_streng=2.4

# Parameter:   id =  proLACI_degradation_rate, name = proLACI_degradation_rate, constant
par proLACI_d=0.07

# Parameter:   id =  p3_strength, name = p3_strength, constant
par p3_streng=2.5

# Parameter:   id =  proSLS1_degradation_rate, name = proSLS1_degradation_rate, constant
par proSLS1_d=0.07

# Parameter:   id =  proSLS4_degradation_rate, name = proSLS4_degradation_rate, constant
par proSLS4_d=0.04

# Parameter:   id =  proLAMDAR_degradation_rate, name = proLAMDAR_degradation_rate, constant
par proLAMDAR=0.0415

# Parameter:   id =  proAUR1_degradation_rate, name = proAUR1_degradation_rate, constant
par proAUR1_d=0.1

# Parameter:   id =  ia1_Kd, name = ia1_Kd, constant
par ia1_Kd=0.001

# Parameter:   id =  ia1_repression_Kd, name = ia1_repression_Kd, constant
par ia1_repre=1.0

# Parameter:   id =  ia1_repression_h, name = ia1_repression_h, constant
par ia1_rep_1=2.0

# Parameter:   id =  pAUR1_strength, name = pAUR1_strength, constant
par pAUR1_str=2.014

# Parameter:   id =  proTETR_degradation_rate, name = proTETR_degradation_rate, constant
par proTETR_d=0.08

# Parameter:   id =  ta1_Kd, name = ta1_Kd, constant
par ta1_Kd=1.0

# Parameter:   id =  ta1_h, name = ta1_h, constant
par ta1_h=2.0

# Parameter:   id =  pp2_translation_rate, name = pp2_translation_rate, constant
par pp2_trans=1.0

# Parameter:   id =  pp3_translation_rate, name = pp3_translation_rate, constant
par pp3_trans=1.0

# Parameter:   id =  pp4_translation_rate, name = pp4_translation_rate, constant
par pp4_trans=1.0

# Parameter:   id =  pp5_translation_rate, name = pp5_translation_rate, constant
par pp5_trans=1.0

# Parameter:   id =  pp6_translation_rate, name = pp6_translation_rate, constant
par pp6_trans=1.0

# Parameter:   id =  tr1_Kd, name = tr1_Kd, constant
par tr1_Kd=1.0

# Parameter:   id =  tr1_h, name = tr1_h, constant
par tr1_h=2.0

# Parameter:   id =  pSLS1_strength, name = pSLS1_strength, constant
par pSLS1_str=2.5

# Parameter:   id =  tr2_Kd, name = tr2_Kd, constant
par tr2_Kd=1.0

# Parameter:   id =  tr2_h, name = tr2_h, constant
par tr2_h=2.0

# assignmentRule: variable = rs6
rs6=1/(1+(proTETR/tr4_Kd)^tr4_h)
aux rs6=rs6

# assignmentRule: variable = rs3
rs3=1/(1+(proLACI/tr6_Kd)^tr6_h)
aux rs3=rs3

# assignmentRule: variable = rs4
rs4=1/(1+(proLAMD_1/tr5_Kd)^tr5_h)
aux rs4=rs4

# assignmentRule: variable = rs5
rs5=1/(1+(proLACI/tr3_Kd)^tr3_h)
aux rs5=rs5

# assignmentRule: variable = LAMDAR
LAMDAR=p1_streng*rs6
aux LAMDAR=LAMDAR

# assignmentRule: variable = LACI
LACI=p2_streng*rs4
aux LACI=LACI

# assignmentRule: variable = TETR
TETR=p3_streng*rs5
aux TETR=TETR

# assignmentRule: variable = rs1
rs1=1/(1+(proSLS1/tr1_Kd)^tr1_h)
aux rs1=rs1

# assignmentRule: variable = rs2
rs2=1/(1+(proAUR1/tr2_Kd)^tr2_h)
aux rs2=rs2

# assignmentRule: variable = ope1
ope1=1/(1+(ia1_Activ/ia1_repre)^ia1_rep_1)
aux ope1=ope1

# assignmentRule: variable = as1
as1=(1+(proSLS4/ta1_Kd)^ta1_h-1)/(1+(proSLS4/ta1_Kd)^ta1_h)
aux as1=as1

# assignmentRule: variable = SLS1
SLS1=pSLS1_str*as1*ope1*rs3
aux SLS1=SLS1

# assignmentRule: variable = SLS4
SLS4=pSLS4_str*rs2
aux SLS4=SLS4

# assignmentRule: variable = AUR1
AUR1=pAUR1_str*rs1
aux AUR1=AUR1

# Reaction: id = pp1_v1, name = pp1_v1

pp1_v1=1

# Reaction: id = pp1_v2, name = pp1_v2

pp1_v2=proSLS1_d*proSLS1

# Reaction: id = pp5_v1, name = pp5_v1

pp5_v1=pp5_trans*p1_streng*LAMDAR

# Reaction: id = pp5_v2, name = pp5_v2

pp5_v2=proLAMDAR*proLAMD_1

# Reaction: id = ia1_bind_forward, name = ia1_bind_forward

ia1_bind_=IPTG*ia1_Activ

# Reaction: id = ia1_bind_reverse, name = ia1_bind_reverse

ia1_bin_1=ia1_Kd*ia1_Inact

# Reaction: id = pp2_v1, name = pp2_v1

pp2_v1=pp2_trans*pAUR1_str*AUR1

# Reaction: id = pp2_v2, name = pp2_v2

pp2_v2=proAUR1_d*proAUR1

# Reaction: id = pp6_v1, name = pp6_v1

pp6_v1=pp6_trans*p3_streng*TETR

# Reaction: id = pp6_v2, name = pp6_v2

pp6_v2=proTETR_d*proTETR

# Reaction: id = pp3_v1, name = pp3_v1

pp3_v1=pp3_trans*pSLS4_str*SLS4

# Reaction: id = pp3_v2, name = pp3_v2

pp3_v2=proSLS4_d*proSLS4

# Reaction: id = pp4_v1, name = pp4_v1

pp4_v1=pp4_trans*p2_streng*LACI

# Reaction: id = pp4_v2, name = pp4_v2

pp4_v2=proLACI_d*proLACI

# Species:   id = AUR1, name = AUR1, involved in a rule 

# Species:   id = IPTG, name = IPTG, affected by kineticLaw

init IPTG=10000.0
dIPTG/dt=(1/(DefaultCo))*((-1.0 * ia1_bind_) + ( 1.0 * ia1_bin_1))

# Species:   id = LACI, name = LACI, involved in a rule 

# Species:   id = LAMDAR, name = LAMDAR, involved in a rule 

# Species:   id = SLS1, name = SLS1, involved in a rule 

# Species:   id = SLS4, name = SLS4, involved in a rule 

# Species:   id = TETR, name = TETR, involved in a rule 

# Species:   id = as1, name = as1, involved in a rule 

# Species:   id = ia1_ActiveTF, name = ia1_ActiveTF, affected by kineticLaw

par ia1_Activ=100.0
aux ia1_Activ=ia1_Activ
dia1_Activ/dt=(1/(DefaultCo))*((-1.0 * ia1_bind_) + ( 1.0 * ia1_bin_1))

# Species:   id = ia1_InactiveTF, name = ia1_InactiveTF, affected by kineticLaw

par ia1_Inact=100.0
aux ia1_Inact=ia1_Inact
dia1_Inact/dt=(1/(DefaultCo))*(( 1.0 * ia1_bind_) + (-1.0 * ia1_bin_1))

# Species:   id = ope1, name = ope1, involved in a rule 

# Species:   id = p1, name = p1
# Warning species is not changed by either rules or reactions

par p1=10.0
aux p1=p1

# Species:   id = p2, name = p2
# Warning species is not changed by either rules or reactions

par p2=10.0
aux p2=p2

# Species:   id = p3, name = p3
# Warning species is not changed by either rules or reactions

par p3=10.0
aux p3=p3

# Species:   id = pAUR1, name = pAUR1
# Warning species is not changed by either rules or reactions

par pAUR1=10.0
aux pAUR1=pAUR1

# Species:   id = pSLS1, name = pSLS1
# Warning species is not changed by either rules or reactions

par pSLS1=10.0
aux pSLS1=pSLS1

# Species:   id = pSLS4, name = pSLS4
# Warning species is not changed by either rules or reactions

par pSLS4=10.0
aux pSLS4=pSLS4

# Species:   id = proAUR1, name = proAUR1, affected by kineticLaw

init proAUR1=0.0
dproAUR1/dt=(1/(DefaultCo))*(( 1.0 * pp2_v1) + (-1.0 * pp2_v2))

# Species:   id = proLACI, name = proLACI, affected by kineticLaw

init proLACI=0.0
dproLACI/dt=(1/(DefaultCo))*(( 1.0 * pp4_v1) + (-1.0 * pp4_v2))

# Species:   id = proLAMDAR, name = proLAMDAR, affected by kineticLaw

par proLAMD_1=0.0
aux proLAMD_1=proLAMD_1
dproLAMD_1/dt=(1/(DefaultCo))*(( 1.0 * pp5_v1) + (-1.0 * pp5_v2))

# Species:   id = proSLS1, name = proSLS1, affected by kineticLaw

init proSLS1=0.0
dproSLS1/dt=(1/(DefaultCo))*(( 1.0 * pp1_v1) + (-1.0 * pp1_v2))

# Species:   id = proSLS4, name = proSLS4, affected by kineticLaw

init proSLS4=0.0
dproSLS4/dt=(1/(DefaultCo))*(( 1.0 * pp3_v1) + (-1.0 * pp3_v2))

# Species:   id = proTETR, name = proTETR, affected by kineticLaw

init proTETR=0.0
dproTETR/dt=(1/(DefaultCo))*(( 1.0 * pp6_v1) + (-1.0 * pp6_v2))

# Species:   id = rs1, name = rs1, involved in a rule 

# Species:   id = rs2, name = rs2, involved in a rule 

# Species:   id = rs3, name = rs3, involved in a rule 

# Species:   id = rs4, name = rs4, involved in a rule 

# Species:   id = rs5, name = rs5, involved in a rule 

# Species:   id = rs6, name = rs6, involved in a rule 

# Species:   id = ter1, name = ter1
# Warning species is not changed by either rules or reactions

par ter1=10.0
aux ter1=ter1

# Species:   id = ter2, name = ter2
# Warning species is not changed by either rules or reactions

par ter2=10.0
aux ter2=ter2

# Species:   id = ter3, name = ter3
# Warning species is not changed by either rules or reactions

par ter3=10.0
aux ter3=ter3

# Species:   id = ter4, name = ter4
# Warning species is not changed by either rules or reactions

par ter4=10.0
aux ter4=ter4

# Species:   id = ter5, name = ter5
# Warning species is not changed by either rules or reactions

par ter5=10.0
aux ter5=ter5

# Species:   id = ter6, name = ter6
# Warning species is not changed by either rules or reactions

par ter6=10.0
aux ter6=ter6

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

