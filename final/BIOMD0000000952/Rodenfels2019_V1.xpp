
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Rodenfels2019 - Heat Oscillations Driven by the Embryonic Cell Cycle Reveal the Energetic Costs of Signaling
#
# isDerivedFrom urn:miriam:pubmed:24523664
# isDescribedBy http://identifiers.org/pubmed/30713074
# is http://identifiers.org/biomodels.db/MODEL2004170001
# is http://identifiers.org/biomodels.db/BIOMD0000000952
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = rateOf
# Inconsistent mathML operators in Function Definition, function ignored
# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = function_for_cdk1a_degradation_by_apc_2, name = function for cdk1a degradation by apc_2
function_(APC_C_active,Cyclin_B1_Cdk1_complex_phosphorylated,k_dest)=(k_dest*APC_C_active*Cyclin_B1_Cdk1_complex_phosphorylated)


# FunctionDefinition id = function_for_cdk1a_degradation_by_apc_1, name = function for cdk1a degradation by apc_1
functio_1(APC_C_active,Cyclin_B1_Cdk1_complex_unphosphorylated,k_dest)=(k_dest*APC_C_active*Cyclin_B1_Cdk1_complex_unphosphorylated)


# FunctionDefinition id = function_for_plx1_activation_1, name = function for plx1 activation_1
functio_2(Cyclin_B1_Cdk1_complex_phosphorylated,Plx1_active,Plx1_total,ec50_plx,k_plxon,n_plx)=(k_plxon/(1+(ec50_plx/Cyclin_B1_Cdk1_complex_phosphorylated)^n_plx)*(Plx1_total-Plx1_active))


# FunctionDefinition id = Rate_Law_for_reaction_for_S, name = Rate Law for reaction for S
Rate_Law_(Kcdk_off,SCdk1,K_cdk_on,S,Cdk1a,Kcatpp2,SPPP2A)=(Kcdk_off*SCdk1-K_cdk_on*S*Cdk1a+Kcatpp2*SPPP2A)


# FunctionDefinition id = function_for_cdk1_activation_1, name = function for cdk1 activation_1
functio_3(Cyclin_B1_Cdk1_complex_phosphorylated,Cyclin_B1_Cdk1_complex_unphosphorylated,ec50_cdc25,k_cdk1_on,n_cdc25,p,r)=(1/r^(1/2)*k_cdk1_on*(1+p/(1+(ec50_cdc25/Cyclin_B1_Cdk1_complex_phosphorylated)^n_cdc25))*Cyclin_B1_Cdk1_complex_unphosphorylated)


# FunctionDefinition id = Rate_Law_for_reaction_for_SCdk1, name = Rate Law for reaction for SCdk1
Rate_La_1(Kcdkon,S,Cdk1a,Kcatcdk,Kcdkoff,SCdk1)=(Kcdkon*S*Cdk1a-(Kcatcdk+Kcdkoff)*SCdk1)


# FunctionDefinition id = Rate_Law_for_reaction_for_SPPP2A, name = Rate Law for reaction for SPPP2A
Rate_La_2(Kcatpp2,Kpp2off,SPPP2A,Kpp2on,SP,PP2A)=((-(Kcatpp2+Kpp2off))*SPPP2A+Kpp2on*SP*PP2A)


# FunctionDefinition id = function_for_cdk_inactivation_1, name = function for cdk inactivation_1
functio_4(Cyclin_B1_Cdk1_complex_phosphorylated,ec50_wee1,k_cdk1_off,n_wee1,p,r)=(r^(1/2)*k_cdk1_off*(1+p/((Cyclin_B1_Cdk1_complex_phosphorylated/ec50_wee1)^n_wee1+1))*Cyclin_B1_Cdk1_complex_phosphorylated)


# FunctionDefinition id = function_for_apc_activation_1, name = function for apc activation_1
functio_5(APC_C_active,APC_C_total,Plx1_active,ec50_apc,k_apc_on,n_apc)=(k_apc_on/(1+(ec50_apc/Plx1_active)^n_apc)*(APC_C_total-APC_C_active))


# FunctionDefinition id = Rate_Law_for_reaction_for_heat_flow, name = Rate Law for reaction for heat flow
Rate_La_3(SPPP2A,Vembryo,delta_Hdephos,Kcat_pp2,Kcatpp2,Kpp2off,Kpp2on,SP,PP2A)=(((-(Kcatpp2+Kpp2off))*SPPP2A+Kpp2on*SP*PP2A)*Vembryo*delta_Hdephos*Kcat_pp2)


# FunctionDefinition id = Rate_Law_for_reaction_for_SP, name = Rate Law for reaction for SP
Rate_La_4(Kcatcdk,SCdk1,Kpp2on,SP,PP2A,Kpp2off,SPPP2A)=(Kcatcdk*SCdk1-Kpp2on*SP*PP2A+Kpp2off*SPPP2A)


# FunctionDefinition id = Rate_Law_for_reaction_for_PP2A, name = Rate Law for reaction for PP2A
Rate_La_5(Kpp2off,SPPP2A,Kcatpp2,Kpp2on,SP,PP2A)=(Kpp2off*SPPP2A+Kcatpp2*SPPP2A-Kpp2on*SP*PP2A)


# Compartment: id = nuclear, name = Nuclear, constant
par nuclear=1.0

# Compartment: id = Embryo, name = Embryo, constant
par Embryo=6.0E-10

# Parameter:   id =  k_synth, name = k_synth, constant
par k_synth=2.85

# Parameter:   id =  k_dest, name = k_dest, constant
par k_dest=0.76

# Parameter:   id =  ec50_cdc25, name = ec50_cdc25, constant
par ec50_cdc2=30.0

# Parameter:   id =  n_cdc25, name = n_cdc25, constant
par n_cdc25=11.0

# Parameter:   id =  ec50_wee1, name = ec50_wee1, constant
par ec50_wee1=35.0

# Parameter:   id =  n_wee1, name = n_wee1, constant
par n_wee1=3.5

# Parameter:   id =  k_cdk1_on, name = k_cdk1_on, constant
par k_cdk1_on=0.06726

# Parameter:   id =  k_cdk1_off, name = k_cdk1_off, constant
par k_cdk1_of=0.06726

# Parameter:   id =  p, name = p, constant
par p=5.0

# Parameter:   id =  ec50_plx, name = ec50_plx, constant
par ec50_plx=60.0

# Parameter:   id =  ec50_apc, name = ec50_apc, constant
par ec50_apc=0.5

# Parameter:   id =  n_apc, name = n_apc, constant
par n_apc=4.0

# Parameter:   id =  n_plx, name = n_plx, constant
par n_plx=5.0

# Parameter:   id =  k_plxon, name = k_plxon, constant
par k_plxon=2.85

# Parameter:   id =  k_plx_off, name = k_plx_off, constant
par k_plx_off=0.2375

# Parameter:   id =  k_apc_on, name = k_apc_on, constant
par k_apc_on=1.5

# Parameter:   id =  k_apc_off, name = k_apc_off, constant
par k_apc_off=0.15

# Parameter:   id =  r, name = r, constant
par r=0.03125

# Parameter:   id =  tau, name = tau, constant
par tau=4.0

# Parameter:   id =  Kcdk_on, name = Kcdk_on, constant
par Kcdk_on=10.0

# Parameter:   id =  Kcdk_off, name = Kcdk_off, constant
par Kcdk_off=1.0

# Parameter:   id =  Kcatcdk1, name = Kcatcdk1, constant
par Kcatcdk1=180.0

# Parameter:   id =  Kpp2_on, name = Kpp2_on, constant
par Kpp2_on=100.0

# Parameter:   id =  Kpp2_off, name = Kpp2_off, constant
par Kpp2_off=0.01

# Parameter:   id =  Kcatpp2, name = Kcatpp2, constant
par Kcatpp2=1800.0

# Parameter:   id =  delta_Hdesphos, name = delta_Hdesphos, constant
par delta_Hde=40000.0

# assignmentRule: variable = Cyclin_B1_Cdk1_complex_total
Cyclin__2=Cyclin__1+Cyclin_B1
aux Cyclin__2=Cyclin__2

# assignmentRule: variable = cdk1a
cdk1a=Cyclin_B1
aux cdk1a=cdk1a

# rateRule: variable = Stotal
init Stotal=60.0
dStotal/dt=rateOf(S)+rateOf(SP)+rateOf(SCdk1)+rateOf(SPPP2A)

# Reaction: id = Cyclin_B1_Cdk1_phosphorylated_synthesis, name = Cyclin B1 Cdk1 phosphorylated synthesis

Cyclin__3=nuclear*Constant_(k_synth)

# Reaction: id = Cyclin_B1_Cdk1_unphosphorylated_degradation, name = Cyclin B1 Cdk1 unphosphorylated degradation

Cyclin__4=nuclear*functio_1(APC_C_act, Cyclin__1, k_dest)

# Reaction: id = Cyclin_B1_Cdk1_phosphorylated_degradation, name = Cyclin B1 Cdk1 phosphorylated degradation

Cyclin__5=nuclear*function_(APC_C_act, Cyclin_B1, k_dest)

# Reaction: id = Cyclin_B1_Cdk1_phosphorylated_dephosphorylation, name = Cyclin B1 Cdk1 phosphorylated dephosphorylation

Cyclin__6=nuclear*functio_4(Cyclin_B1, ec50_wee1, k_cdk1_of, n_wee1, p, r)

# Reaction: id = Cyclin_B1_Cdk1_phosphorylated_phosphorylation, name = Cyclin B1 Cdk1 phosphorylated phosphorylation

Cyclin__7=nuclear*functio_3(Cyclin_B1, Cyclin__1, ec50_cdc2, k_cdk1_on, n_cdc25, p, r)

# Reaction: id = Plx1_activation_by_active_Cdk1, name = Plx1 activation by active Cdk1

Plx1_ac_1=nuclear*functio_2(Cyclin_B1, Plx1_acti, Plx1_tota, ec50_plx, k_plxon, n_plx)

# Reaction: id = Plx1_inactivation_after_Cdk1_inactivated, name = Plx1 inactivation after Cdk1 inactivated

Plx1_inac=nuclear*k_plx_off*Plx1_acti

# Reaction: id = Activation_of_APC_CCdc20_by_active_Plx1, name = Activation of APC/CCdc20 by active Plx1

Activatio=nuclear*functio_5(APC_C_act, APC_C_tot, Plx1_acti, ec50_apc, k_apc_on, n_apc)

# Reaction: id = inactivation_of_APC_CCdc20_after_Plx1_is_inactivated, name = inactivation of APC/CCdc20 after Plx1 is inactivated

inactivat=nuclear*k_apc_off*APC_C_act

# Reaction: id = reaction_for_SCdk1, name = reaction for SCdk1

reaction_=nuclear*Rate_La_1(Kcdk_on, S, cdk1a, Kcatcdk1, Kcdk_off, SCdk1)

# Reaction: id = reaction_for_S, name = reaction for S

reactio_1=nuclear*Rate_Law_(Kcdk_off, SCdk1, Kcdk_on, S, cdk1a, Kcatpp2, SPPP2A)

# Reaction: id = reaction_for_SP, name = reaction for SP

reactio_2=nuclear*Rate_La_4(Kcatcdk1, SCdk1, Kpp2_on, SP, PP2A, Kpp2_off, SPPP2A)

# Reaction: id = reaction_for_PP2A, name = reaction for PP2A

reactio_3=nuclear*Rate_La_5(Kpp2_off, SPPP2A, Kcatpp2, Kpp2_on, SP, PP2A)

# Reaction: id = reaction_for_SPPP2A, name = reaction for SPPP2A

reactio_4=nuclear*Rate_La_2(Kcatpp2, Kpp2_off, SPPP2A, Kpp2_on, SP, PP2A)

# Reaction: id = reaction_for_heat_flow, name = reaction for heat flow

reactio_5=nuclear*Rate_La_3(SPPP2A, Embryo, delta_Hde, Kcatpp2, Kcatpp2, Kpp2_off, Kpp2_on, SP, PP2A)

# Species:   id = Cyclin_B1_Cdk1_complex_phosphorylated, name = Cyclin B1 Cdk1 complex phosphorylated( Active), affected by kineticLaw

par Cyclin_B1=60.0
aux Cyclin_B1=Cyclin_B1
dCyclin_B1/dt=(1/(nuclear))*(( 1.0 * Cyclin__3) + (-1.0 * Cyclin__5) + (-1.0 * Cyclin__6) + ( 1.0 * Cyclin__7))

# Species:   id = Cyclin_B1_Cdk1_complex_unphosphorylated, name = Cyclin B1 Cdk1 complex unphosphorylated, affected by kineticLaw

par Cyclin__1=0.0
aux Cyclin__1=Cyclin__1
dCyclin__1/dt=(1/(nuclear))*((-1.0 * Cyclin__4) + ( 1.0 * Cyclin__6) + (-1.0 * Cyclin__7))

# Species:   id = Plx1_active, name = Plx1_active, affected by kineticLaw

par Plx1_acti=0.0
aux Plx1_acti=Plx1_acti
dPlx1_acti/dt=(1/(nuclear))*(( 1.0 * Plx1_ac_1) + (-1.0 * Plx1_inac))

# Species:   id = APC_C_active, name = APC/C active, affected by kineticLaw

par APC_C_act=0.0
aux APC_C_act=APC_C_act
dAPC_C_act/dt=(1/(nuclear))*(( 1.0 * Activatio) + (-1.0 * inactivat))

# Species:   id = Plx1_total, name = Plx1_total, constant
par Plx1_tota=1.0


# Species:   id = APC_C_total, name = APC/C total
# Warning species is not changed by either rules or reactions

par APC_C_tot=1.0
aux APC_C_tot=APC_C_tot

# Species:   id = Cyclin_B1_Cdk1_complex_total, name = Cyclin B1 Cdk1 complex total, involved in a rule 

# Species:   id = SCdk1, name = Substrate/Cdk1 complex, affected by kineticLaw

init SCdk1=0.0
dSCdk1/dt=(1/(nuclear))*(( 1.0 * reaction_))

# Species:   id = S, name = Substrate, affected by kineticLaw

init S=60.0
dS/dt=(1/(nuclear))*(( 1.0 * reactio_1))

# Species:   id = SP, name = Phosphorylated Substrate(SP), affected by kineticLaw

init SP=0.0
dSP/dt=(1/(nuclear))*(( 1.0 * reactio_2))

# Species:   id = PP2A, name = PP2A, affected by kineticLaw

init PP2A=60.0
dPP2A/dt=(1/(nuclear))*(( 1.0 * reactio_3))

# Species:   id = SPPP2A, name = Phosphorylated Substrate Phosphatase Complex(SP-PP2A), affected by kineticLaw

init SPPP2A=0.0
dSPPP2A/dt=(1/(nuclear))*(( 1.0 * reactio_4))

# Species:   id = Stotal, name = Stotal, involved in a rule 

# Species:   id = cdk1a, name = cdk1a, involved in a rule 

# Species:   id = Q, name = Heat(Q), affected by kineticLaw

init Q=0.0
dQ/dt=(1/(nuclear))*(( 1.0 * reactio_5))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

