
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Arnold2011_Farquhar1980_RuBisCO-CalvinCycle
#
# is http://identifiers.org/biomodels.db/MODEL1109210000
# is http://identifiers.org/biomodels.db/BIOMD0000000383
# isDescribedBy http://identifiers.org/pubmed/22001849
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = carboxylation, name = Carboxylation
carboxyla(kc,S2,K,R,KI,E,S1)=((kc*S2/(S2+K*(1+R/KI))*E+kc*S2/(S2+K*(1+R/KI))*S1-abs(kc*S2/(S2+K*(1+R/KI))*E-kc*S2/(S2+K*(1+R/KI))*S1))/2)


# FunctionDefinition id = PGA_consumption, name = PGA consumption - Farquhar
PGA_consu(S1,Rp,Nt,kc,E,R)=(S1/Rp*R/Nt*kc*E)


# FunctionDefinition id = NADPH_production, name = NADPH production
NADPH_pro(j,S1,Nt)=(j/2*S1/Nt)


# FunctionDefinition id = oxygenation, name = Oxygenation
oxygenati(phi,kc,S2,K,R,KI,E,S1)=(phi*(kc*S2/(S2+K*(1+R/KI))*E+kc*S2/(S2+K*(1+R/KI))*S1-abs(kc*S2/(S2+K*(1+R/KI))*E-kc*S2/(S2+K*(1+R/KI))*S1))/2)


# Compartment: id = chloroplast, name = chloroplast, constant
par chloropla=1.0

# Parameter:   id =  E, name = E, constant
par E=1.33846153846154

# Parameter:   id =  Rp, name = Rp, constant
par Rp=3.2

# Parameter:   id =  Nt, name = Nt, constant
par Nt=0.5

# Parameter:   id =  f, name = f, constant
par f=0.23

# Parameter:   id =  I, name = I, constant
par I=1000.0

# Parameter:   id =  jp, name = jp, defined by a Rule

# Parameter:   id =  j, name = j, defined by a Rule

# Parameter:   id =  phi, name = phi, defined by a Rule

# Parameter:   id =  kc, name = kc, constant
par kc=2.5

# Parameter:   id =  Kc, name = Kc, constant
par Kc_1=460.0

# Parameter:   id =  Ko, name = Ko, constant
par Ko=330.0

# assignmentRule: variable = jp
jp=1/2*(1-f)*I
aux jp=jp

# assignmentRule: variable = NADP
NADP=Nt-NADPH
aux NADP=NADP

# assignmentRule: variable = phi
phi=0.21*O2/Ko/CO2/Kc_1
aux phi=phi

# assignmentRule: variable = j
j=(abs(jp+467)-abs(jp-467))/2/65
aux j=j

# Reaction: id = PGA_prod_Vc, name = PGA production - v_c

PGA_prod_=chloropla*carboxyla(kc, CO2, Kc_1, O2, Ko, E, RuBP)

# Reaction: id = PGA_prod_Vo, name = PGA production - v_o

PGA_pro_1=chloropla*oxygenati(phi, kc, CO2, Kc_1, O2, Ko, E, RuBP)

# Reaction: id = PGA_cons, name = PGA consumption

PGA_cons=chloropla*PGA_consu(PGA, Rp, Nt, kc, E, NADPH)

# Reaction: id = NADPH_prod, name = NADPH production

NADPH_p_1=chloropla*NADPH_pro(j, NADP, Nt)

# Species:   id = RuBP, name = RuBP, constant
par RuBP=2.0


# Species:   id = PGA, name = PGA, affected by kineticLaw

init PGA=2.4
dPGA/dt=(1/(chloropla))*(( 2.0 * PGA_prod_) + ( 1.5 * PGA_pro_1) + (-1.0 * PGA_cons))

# Species:   id = NADPH, name = NADPH, affected by kineticLaw

init NADPH=0.21
dNADPH/dt=(1/(chloropla))*((-2.0 * PGA_prod_) + (-2.0 * PGA_pro_1) + ( 1.0 * NADPH_p_1))

# Species:   id = CO2, name = CO2, constant
par CO2=230.0


# Species:   id = O2, name = O2, constant
par O2=210.0


# Species:   id = NADP, name = NADP, involved in a rule 

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

