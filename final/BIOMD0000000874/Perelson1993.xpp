
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Perelson1993 - HIVinfection_CD4Tcells_ModelA
#
# isDescribedBy http://identifiers.org/pubmed/8096155
# is http://identifiers.org/biomodels.db/MODEL1006230079
# is http://identifiers.org/biomodels.db/BIOMD0000000874
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_production_of_CD4__T_cell, name = Function for production of CD4+ T cell
Function_(s,r,T)=(s+r*T)


# FunctionDefinition id = Function_for_death_of_CD4__T_cell, name = Function for death of CD4+ T cell
Functio_1(mu_T,k_1,V,T,r,T_1,T_2,T_max)=(mu_T*T+k_1*V*T+r*T*(T+T_1+T_2)/T_max)


# FunctionDefinition id = Function_for_production_of_latently_infected_T_cell, name = Function for production of latently infected T cell
Functio_2(k_1,V,T)=(k_1*V*T)


# FunctionDefinition id = Function_for_death_of_latently_infected_T_cell, name = Function for death of latently infected T cell
Functio_3(mu_T,T_1,k_2)=(mu_T*T_1+k_2*T_1)


# FunctionDefinition id = Function_for_production_of_actively_infected_T_cell, name = Function for production of actively infected T cell
Functio_4(k_2,T_1)=(k_2*T_1)


# FunctionDefinition id = Function_for_death_of_Actively_infected_T_cell, name = Function for death of Actively infected T cell
Functio_5(mu_b,T_2)=(mu_b*T_2)


# FunctionDefinition id = Function_for_production_of_infectious_virus, name = Function for production of infectious virus
Functio_6(N,mu_b,T_2)=(N*mu_b*T_2)


# FunctionDefinition id = Function_for_Death_of_Infectious_Virus_particle, name = Function for Death of Infectious Virus particle
Functio_7(k_1,V,T,mu_V)=(k_1*V*T+mu_V*V)


# Compartment: id = COMpartment, name = COMpartment, constant
par COMpartme=1.0

# Parameter:   id =  s, name = s, constant
par s=10.0

# Parameter:   id =  r, name = r, constant
par r=0.03

# Parameter:   id =  T_max, name = T_max, constant
par T_max=1500.0

# Parameter:   id =  mu_T, name = mu_T, constant
par mu_T=0.02

# Parameter:   id =  k_1, name = k_1, constant
par k_1=2.4E-5

# Parameter:   id =  k_2, name = k_2, constant
par k_2=0.003

# Parameter:   id =  mu_b, name = mu_b, constant
par mu_b=0.24

# Parameter:   id =  mu_V, name = mu_V, constant
par mu_V=2.4

# Parameter:   id =  N, name = N, constant
par N=1000.0

# Parameter:   id =  T_tot, name = T_tot, defined by a Rule

# assignmentRule: variable = T_tot
T_tot=T_renamed+T_1+T_2
aux T_tot=T_tot

# Reaction: id = Production_of_CD4__T_cell, name = Production of CD4+ T cell

Productio=COMpartme*Function_(s, r, T_renamed)

# Reaction: id = Death_of_CD4__T_cell, name = Death of CD4+ T cell

Death_of_=COMpartme*Functio_1(mu_T, k_1, V, T_renamed, r, T_1, T_2, T_max)

# Reaction: id = Production_of_Latently_infected_T_cell, name = Production of Latently infected T cell

Product_1=COMpartme*Functio_2(k_1, V, T_renamed)

# Reaction: id = Death_of_Latently_infected_T_cell, name = Death of Latently infected T cell

Death_o_1=COMpartme*Functio_3(mu_T, T_1, k_2)

# Reaction: id = Production_of_Actively_infected_T_cell, name = Production of Actively infected T cell

Product_2=COMpartme*Functio_4(k_2, T_1)

# Reaction: id = Death_of_Actively_infected_T_cell, name = Death of Actively infected T cell

Death_o_2=COMpartme*Functio_5(mu_b, T_2)

# Reaction: id = Production_of_infectious_virus_particle, name = Production of infectious virus particle

Product_3=COMpartme*Functio_6(N, mu_b, T_2)

# Reaction: id = Death_of_infectious_virus_particle, name = Death of infectious virus particle

Death_o_3=COMpartme*Functio_7(k_1, V, T_renamed, mu_V)

# Species:   id = T, name = T, affected by kineticLaw

par T_renamed=1000.0
aux T_renamed=T_renamed
dT_renamed/dt=(1/(COMpartme))*(( 1.0 * Productio) + (-1.0 * Death_of_))

# Species:   id = T_1, name = T_1, affected by kineticLaw

init T_1=0.0
dT_1/dt=(1/(COMpartme))*(( 1.0 * Product_1) + (-1.0 * Death_o_1))

# Species:   id = T_2, name = T_2, affected by kineticLaw

init T_2=0.0
dT_2/dt=(1/(COMpartme))*(( 1.0 * Product_2) + (-1.0 * Death_o_2))

# Species:   id = V, name = V, affected by kineticLaw

init V=0.001
dV/dt=(1/(COMpartme))*(( 1.0 * Product_3) + (-1.0 * Death_o_3))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

