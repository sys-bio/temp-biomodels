
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Hammaren-Geissen2022_PPToP_Model12
#
# isDescribedBy http://identifiers.org/pubmed:36460637
# is http://identifiers.org/biomodels.db/MODEL2212160002
# is http://identifiers.org/biomodels.db/BIOMD0000001078
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  kdegu, name = kdegu, constant
par kdegu=0.0625

# Parameter:   id =  kdegp, name = kdegp, constant
par kdegp=0.0625

# Parameter:   id =  ke, name = ke, constant
par ke=0.0625

# Parameter:   id =  kw, name = kw, constant
par kw=0.0625

# Parameter:   id =  Pu_total, name = Pu_old+new, defined by a Rule

# Parameter:   id =  Pp_total, name = Pp_old+new, defined by a Rule

# Parameter:   id =  ksyn, name = ksyn, constant
par ksyn=0.0625

# Parameter:   id =  Pu_observable, name = Ou_Pu_old_observable, defined by a Rule

# Parameter:   id =  Pp_observable, name = Op_Pp_old_observable, defined by a Rule

# Parameter:   id =  EntProt_observable, name = O_P_observable, defined by a Rule

# Parameter:   id =  Pu_old_clearance, name = Pu_old_clearanceProfile, defined by a Rule

# Parameter:   id =  Pp_old_clearance, name = Pp_old_clearanceProfile, defined by a Rule

# Parameter:   id =  P_old_clearance, name = P_old_clearanceProfile, defined by a Rule

# Parameter:   id =  ModelValue_5, name = Initial for Pp_old+new, constant
par ModelValu=0.333333333333333

# Parameter:   id =  ModelValue_4, name = Initial for Pu_old+new, constant
par ModelVa_1=0.666666666666667

# Parameter:   id =  ModelValue_1, name = Initial for kdegp, constant
par ModelVa_2=0.0625

# Parameter:   id =  ModelValue_0, name = Initial for kdegu, constant
par ModelVa_3=0.0625

# Parameter:   id =  ModelValue_2, name = Initial for ke, constant
par ModelVa_4=0.0625

# Parameter:   id =  ModelValue_6, name = Initial for ksyn, constant
par ModelVa_5=0.0625

# Parameter:   id =  ModelValue_3, name = Initial for kw, constant
par ModelVa_6=0.0625

# assignmentRule: variable = Pu_total
Pu_total=ModelVa_5*(ModelVa_2+ModelVa_4)/(ModelVa_2*ModelVa_3+ModelVa_3*ModelVa_4+ModelVa_2*ModelVa_6)
aux Pu_total=Pu_total

# assignmentRule: variable = Pu_new
Pu_new=ModelVa_1-Pu
aux Pu_new=Pu_new

# assignmentRule: variable = Pp_total
Pp_total=ModelVa_5*ModelVa_6/(ModelVa_2*ModelVa_3+ModelVa_3*ModelVa_4+ModelVa_2*ModelVa_6)
aux Pp_total=Pp_total

# assignmentRule: variable = Pp_new
Pp_new=ModelValu-Pp
aux Pp_new=Pp_new

# assignmentRule: variable = Pu_observable
Pu_observ=Pu/ModelVa_1
aux Pu_observ=Pu_observ

# assignmentRule: variable = Pp_observable
Pp_observ=Pp/ModelValu
aux Pp_observ=Pp_observ

# assignmentRule: variable = EntProt_observable
EntProt_o=(Pp+Pu)/(ModelValu+ModelVa_1)
aux EntProt_o=EntProt_o

# assignmentRule: variable = Pu_old_clearance
Pu_old_cl=log(Pu_observ)
aux Pu_old_cl=Pu_old_cl

# assignmentRule: variable = Pp_old_clearance
Pp_old_cl=log(Pp_observ)
aux Pp_old_cl=Pp_old_cl

# assignmentRule: variable = P_old_clearance
P_old_cle=log(EntProt_o)
aux P_old_cle=P_old_cle

# Reaction: id = Pu_degradation, name = Pu degradation

Pu_degrad=compartme*kdegu*Pu

# Reaction: id = PTM_writing, name = PTM writing

PTM_writi=compartme*kw*Pu

# Reaction: id = PTM_erasing, name = PTM erasing

PTM_erasi=compartme*ke*Pp

# Reaction: id = Pp_degradation, name = Pp degradation

Pp_degrad=compartme*kdegp*Pp

# Species:   id = Pu, name = Pu_old, affected by kineticLaw

init Pu=0.666666666666667
dPu/dt=(1/(compartme))*((-1.0 * Pu_degrad) + (-1.0 * PTM_writi) + ( 1.0 * PTM_erasi))

# Species:   id = Pp, name = Pp_old, affected by kineticLaw

init Pp=0.333333333333333
dPp/dt=(1/(compartme))*(( 1.0 * PTM_writi) + (-1.0 * PTM_erasi) + (-1.0 * Pp_degrad))

# Species:   id = Pu_new, name = Pu_new, involved in a rule 

# Species:   id = Pp_new, name = Pp_new, involved in a rule 

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

