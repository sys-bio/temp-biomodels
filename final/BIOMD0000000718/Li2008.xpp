
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Li2008 - Caulobacter Cell Cycle
#
# is http://identifiers.org/biomodels.db/MODEL1811070001
# is http://identifiers.org/biomodels.db/BIOMD0000000718
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = function_2, name = function 2
function_(k,J,S,M1,M2)=(k*J^2/(J^2+S^2)*M1*M2)


# FunctionDefinition id = function_1, name = function 1
functio_1(k,S,J,M1)=(k*S^2/(J^2+S^2)*M1)


# FunctionDefinition id = function_4, name = function 4
functio_2(k,J,S,M1)=(k*J^2/(J^2+S^2)*M1)


# FunctionDefinition id = function_5, name = function 5
functio_3(k,J1,M1,M2,J2,M3)=(k*J1^2/(J1^2+M1^2)*M2^2/(J2^2+M2^2)*(2-M3))


# FunctionDefinition id = function_6, name = function 6
functio_4(k,M1,M2)=(k*M1*M2)


# FunctionDefinition id = function_7, name = function 7
functio_5(k,P,J)=(k*(1-P)/(J+1-P))


# FunctionDefinition id = function_8, name = function 8
functio_6(k,P,J)=(k*P/(J+P))


# FunctionDefinition id = function_9, name = function 9
functio_7(k,M,J2,P,J1)=(k*(M/J2)^4*P/(J1+P))


# FunctionDefinition id = function_10, name = function 10
functio_8(k,M)=(k*M)


# FunctionDefinition id = function_11, name = function 11
functio_9(k,S,M)=(k*S*(1-M))


# FunctionDefinition id = function_12, name = function 12
functi_10(k,M,J,S)=(k*M^4/(J^4+M^4)*S)


# FunctionDefinition id = function_13, name = function 13
functi_11(k,m1,Theta1,M2,Theta2,M3,Theta3,M4,Theta4)=(k*(m1/Theta1)^4*(M2/Theta2)^4/(1+(m1/Theta1)^4+(M2/Theta2)^4+(M3/Theta3)^4+M4/Theta4))


# FunctionDefinition id = function_14, name = function 14
functi_12(k,M,P,C)=(k*M^4/(M^4+P^4)*C)


# Compartment: id = Caulobacter, name = Caulobacter, constant
par Caulobact=1.0

# Parameter:   id =  ks_CtrA_P1, name = ks,CtrA-P1, constant
par ks_CtrA_P=0.0083

# Parameter:   id =  ks_CtrA_P2, name = ks,CtrA-P2, constant
par ks_CtrA_1=0.073

# Parameter:   id =  kd_CtrA1, name = kd,CtrA1, constant
par kd_CtrA1=0.002

# Parameter:   id =  kd_CtrA2, name = kd,CtrA2, constant
par kd_CtrA2=0.15

# Parameter:   id =  ks_GcrA, name = ks,GcrA, constant
par ks_GcrA=0.045

# Parameter:   id =  kd_GcrA, name = kd,GcrA, constant
par kd_GcrA=0.022

# Parameter:   id =  ks_DnaA, name = ks,DnaA, constant
par ks_DnaA=0.0165

# Parameter:   id =  kd_DnaA, name = kd,DnaA, constant
par kd_DnaA=0.007

# Parameter:   id =  ks_Fts, name = ks,Fts, constant
par ks_Fts=0.063

# Parameter:   id =  kd_Fts, name = kd,Fts, constant
par kd_Fts=0.035

# Parameter:   id =  kzring_open, name = kzring,open, constant
par kzring_op=0.8

# Parameter:   id =  kzring_closed1, name = kzring,closed1, constant
par kzring_cl=1.0E-4

# Parameter:   id =  kzring_closed2, name = kzring,closed2, constant
par kzring__1=0.6

# Parameter:   id =  ks_DivK, name = ks,DivK, constant
par ks_DivK=0.0054

# Parameter:   id =  kd_DivK, name = kd,DivK, constant
par kd_DivK=0.002

# Parameter:   id =  kd_Divk_P, name = kd,Divk_P, constant
par kd_Divk_P=0.002

# Parameter:   id =  ks_I, name = ks,I, constant
par ks_I=0.08

# Parameter:   id =  kd_I, name = kd,I, constant
par kd_I=0.04

# Parameter:   id =  ks_CcrM, name = ks,CcrM, constant
par ks_CcrM=0.072

# Parameter:   id =  kd_CcrM, name = kd,CcrM, constant
par kd_CcrM=0.07

# Parameter:   id =  km_cori, name = km,cori, constant
par km_cori=0.4

# Parameter:   id =  km_ctrA, name = km,ctrA, constant
par km_ctrA=0.4

# Parameter:   id =  km_ccrM, name = km,ccrM, constant
par km_ccrM=0.4

# Parameter:   id =  km_fts, name = km,fts, constant
par km_fts=0.4

# Parameter:   id =  ka_Ini, name = ka,Ini, constant
par ka_Ini=0.01

# Parameter:   id =  kelong, name = kelong, constant
par kelong=0.006

# Parameter:   id =  ktrans_DivK, name = ktrans,DivK, constant
par ktrans_Di=0.5

# Parameter:   id =  ktrans_DivK_P, name = ktrans,DivK_P, constant
par ktrans__1=0.0295

# Parameter:   id =  Ji_CtrA_CtrA, name = Ji,CtrA-CtrA, constant
par Ji_CtrA_C=0.4

# Parameter:   id =  JZring_Fts, name = JZring-Fts, constant
par JZring_Ft=0.78

# Parameter:   id =  Jm_fts, name = Jm,fts, constant
par Jm_fts=0.95

# Parameter:   id =  thetacori, name = thetacori, constant
par thetacori=2.0E-4

# Parameter:   id =  Ja_CtrA_CtrA, name = Ja,CtrA-CtrA, constant
par Ja_CtrA_C=0.45

# Parameter:   id =  Ja_DnaA_CtrA, name = Ja,DnaA-CtrA, constant
par Ja_DnaA_C=0.3

# Parameter:   id =  Jm_cori, name = Jm,cori, constant
par Jm_cori=0.95

# Parameter:   id =  thetaCtrA, name = thetaCtrA, constant
par thetaCtrA=0.2

# Parameter:   id =  Jd_CtrA_Divk_P, name = Jd,CtrA-Divk_P, constant
par Jd_CtrA_D=0.55

# Parameter:   id =  Ja_open, name = Ja,open, constant
par Ja_open=0.01

# Parameter:   id =  Jm_ctrA, name = Jm,ctrA, constant
par Jm_ctrA=0.95

# Parameter:   id =  thetaGcrA, name = thetaGcrA, constant
par thetaGcrA=0.45

# Parameter:   id =  Ji_GcrA_CtrA, name = Ji,GcrA-CtrA, constant
par Ji_GcrA_C=0.2

# Parameter:   id =  Ja_closed, name = Ja,closed, constant
par Ja_closed=0.1

# Parameter:   id =  Jm_ccrM, name = Jm,ccrM, constant
par Jm_ccrM=0.95

# Parameter:   id =  thetaDnaA, name = thetaDnaA, constant
par thetaDnaA=0.6

# Parameter:   id =  Pelong, name = Pelong, constant
par Pelong=0.05

# Parameter:   id =  PccrM, name = PccrM, constant
par PccrM=0.2

# Parameter:   id =  PctrA, name = PctrA, constant
par PctrA=0.375

# Parameter:   id =  Pfts, name = Pfts, constant
par Pfts=0.625

# Parameter:   id =  Ji_DnaA_GcrA, name = Ji,DnaA-GcrA, constant
par Ji_DnaA_G=0.5

# Parameter:   id =  Count, name = Count
par Count=2.0

# Reaction: id = reaction, name = reaction

reaction=Caulobact*functio_1(ks_CtrA_1, CtrA, Ja_CtrA_C, hctrA)

# Reaction: id = reaction_1, name = reaction_1

reaction_=Caulobact*function_(ks_CtrA_P, Ji_CtrA_C, CtrA, hctrA, GcrA)

# Reaction: id = reaction_2, name = reaction_2

reactio_1=Caulobact*kd_CtrA1*CtrA

# Reaction: id = reaction_3, name = reaction_3

reactio_2=Caulobact*functio_1(kd_CtrA2, DivK_P, Jd_CtrA_D, CtrA)

# Reaction: id = reaction_4, name = reaction_4

reactio_3=Caulobact*functio_2(ks_GcrA, Ji_GcrA_C, CtrA, DnaA)

# Reaction: id = reaction_5, name = reaction_5

reactio_4=Caulobact*kd_GcrA*GcrA

# Reaction: id = reaction_6, name = reaction_6

reactio_5=Caulobact*functio_3(ks_DnaA, Ji_DnaA_G, GcrA, CtrA, Ja_DnaA_C, hcori)

# Reaction: id = reaction_7, name = reaction_7

reactio_6=Caulobact*kd_DnaA*DnaA

# Reaction: id = reaction_8, name = reaction_8

reactio_7=Caulobact*functio_4(ks_Fts, CtrA, hfts)

# Reaction: id = reaction_9, name = reaction_9

reactio_8=Caulobact*kd_Fts*Fts

# Reaction: id = reaction_10, name = reaction_10

reactio_9=Caulobact*functio_5(kzring_op, Zring, Ja_open)

# Reaction: id = reaction_11, name = reaction_11

reacti_10=Caulobact*functio_6(kzring_cl, Zring, Ja_closed)

# Reaction: id = reaction_12, name = reaction_12

reacti_11=Caulobact*functio_7(kzring__1, Fts, JZring_Ft, Zring, Ja_closed)

# Reaction: id = reaction_13, name = reaction_13

reacti_12=Caulobact*functio_8(ks_DivK, CtrA)

# Reaction: id = reaction_14, name = reaction_14

reacti_13=Caulobact*ktrans__1*DivK_P

# Reaction: id = reaction_15, name = reaction_15

reacti_14=Caulobact*functio_9(ktrans_Di, DivK, Zring)

# Reaction: id = reaction_16, name = reaction_16

reacti_15=Caulobact*kd_DivK*DivK

# Reaction: id = reaction_17, name = reaction_17

reacti_16=Caulobact*functio_8(kd_Divk_P, DivK)

# Reaction: id = reaction_18, name = reaction_18

reacti_17=Caulobact*functio_4(ks_I, CtrA, hccrM)

# Reaction: id = reaction_19, name = reaction_19

reacti_18=Caulobact*kd_I*I

# Reaction: id = reaction_20, name = reaction_20

reacti_19=Caulobact*functio_8(ks_CcrM, I)

# Reaction: id = reaction_21, name = reaction_21

reacti_20=Caulobact*kd_CcrM*CcrM

# Reaction: id = reaction_22, name = reaction_22

reacti_21=Caulobact*functi_10(km_cori, CcrM, Jm_cori, hcori)

# Reaction: id = reaction_23, name = reaction_23

reacti_22=Caulobact*functi_10(km_ctrA, CcrM, Jm_ctrA, hctrA)

# Reaction: id = reaction_24, name = reaction_24

reacti_23=Caulobact*functi_10(km_ccrM, CcrM, Jm_ccrM, hccrM)

# Reaction: id = reaction_25, name = reaction_25

reacti_24=Caulobact*functi_10(km_fts, CcrM, Jm_fts, hfts)

# Reaction: id = reaction_26, name = reaction_26

reacti_25=Caulobact*functi_11(ka_Ini, DnaA, thetaDnaA, GcrA, thetaGcrA, CtrA, thetaCtrA, hcori, thetacori)

# Reaction: id = reaction_27, name = reaction_27

reacti_26=Caulobact*functi_12(kelong, Elong, Pelong, Count)

# Reaction: id = reaction_28, name = reaction_28

reacti_27=Caulobact*functi_12(kelong, Elong, Pelong, Count)

# Species:   id = CtrA, name = CtrA, affected by kineticLaw

init CtrA=0.11
dCtrA/dt=(1/(Caulobact))*(( 1.0 * reaction) + ( 1.0 * reaction_) + (-1.0 * reactio_1) + (-1.0 * reactio_2))

# Species:   id = GcrA, name = GcrA, affected by kineticLaw

init GcrA=0.78
dGcrA/dt=(1/(Caulobact))*(( 1.0 * reactio_3) + (-1.0 * reactio_4))

# Species:   id = DnaA, name = DnaA, affected by kineticLaw

init DnaA=0.6
dDnaA/dt=(1/(Caulobact))*(( 1.0 * reactio_5) + (-1.0 * reactio_6))

# Species:   id = Fts, name = Fts, affected by kineticLaw

init Fts=0.29
dFts/dt=(1/(Caulobact))*(( 1.0 * reactio_7) + (-1.0 * reactio_8))

# Species:   id = Zring, name = Zring, affected by kineticLaw

init Zring=1.0
dZring/dt=(1/(Caulobact))*(( 1.0 * reactio_9) + (-1.0 * reacti_10) + (-1.0 * reacti_11))

# Species:   id = DivK, name = DivK, affected by kineticLaw

init DivK=0.66
dDivK/dt=(1/(Caulobact))*(( 1.0 * reacti_12) + ( 1.0 * reacti_13) + (-1.0 * reacti_14) + (-1.0 * reacti_15))

# Species:   id = DivK_P, name = DivK_P, affected by kineticLaw

init DivK_P=0.34
dDivK_P/dt=(1/(Caulobact))*((-1.0 * reacti_13) + ( 1.0 * reacti_14) + (-1.0 * reacti_16))

# Species:   id = I, name = I, affected by kineticLaw

init I=0.11
dI/dt=(1/(Caulobact))*(( 1.0 * reacti_17) + (-1.0 * reacti_18))

# Species:   id = CcrM, name = CcrM, affected by kineticLaw

init CcrM=0.5
dCcrM/dt=(1/(Caulobact))*(( 1.0 * reacti_19) + (-1.0 * reacti_20))

# Species:   id = hcori, name = hcori, affected by kineticLaw
# Species is changed by 1 event(s)
init hcori=1.0
dhcori/dt=(1/(Caulobact))*((-1.0 * reacti_21))

# Species:   id = hctrA, name = hctrA, affected by kineticLaw
# Species is changed by 1 event(s)
init hctrA=0.0
dhctrA/dt=(1/(Caulobact))*((-1.0 * reacti_22))

# Species:   id = hccrM, name = hccrM, affected by kineticLaw
# Species is changed by 1 event(s)
init hccrM=0.0
dhccrM/dt=(1/(Caulobact))*((-1.0 * reacti_23))

# Species:   id = hfts, name = hfts, affected by kineticLaw
# Species is changed by 1 event(s)
init hfts=0.0
dhfts/dt=(1/(Caulobact))*((-1.0 * reacti_24))

# Species:   id = Ini, name = Ini, affected by kineticLaw
# Species is changed by 1 event(s)
init Ini=0.0
dIni/dt=(1/(Caulobact))*(( 1.0 * reacti_25))

# Species:   id = Elong, name = Elong, affected by kineticLaw
# Species is changed by 2 event(s)
init Elong=0.05
dElong/dt=(1/(Caulobact))*(( 1.0 * reacti_26))

# Species:   id = DNA, name = DNA, affected by kineticLaw
# Species is changed by 2 event(s)
init DNA=1.05
dDNA/dt=(1/(Caulobact))*(( 1.0 * reacti_27))

# event : Pelong_threshold
# unable to handle events with delays currently.
# event ignored.


# event : PctrA_threshold
# unable to handle events with delays currently.
# event ignored.


# event : PccrM_treshold
# unable to handle events with delays currently.
# event ignored.


# event : Pfts_treshold
# unable to handle events with delays currently.
# event ignored.


# event : Ini_reset
# unable to handle events with delays currently.
# event ignored.


# event : Elong_reset_by_Ini
# unable to handle events with delays currently.
# event ignored.


# event : Elong_reset_by_Count
Elong_r_1=if (Elong >= (Count/2)) then (1.5) else (0.2)
global 1 {Elong_r_1 - 1.1} {Elong=0}

# event : DNA_reset_by_Ini
# unable to handle events with delays currently.
# event ignored.


# event : DNA_reset_by_Z_ring
# unable to handle events with delays currently.
# event ignored.


# event : Count_assignment_by_Ini
# unable to handle events with delays currently.
# event ignored.


# event : Count_reset_by_Z_ring
# unable to handle events with delays currently.
# event ignored.


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

