
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Kolomeisky2003_MyosinV_Processivity
#
# is http://identifiers.org/biomodels.db/MODEL6623628741
# is http://identifiers.org/biomodels.db/BIOMD0000000305
# isDescribedBy http://identifiers.org/pubmed/12609867
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = compartment_, name = compartment_, constant
par compartme=1.0E-15

# Parameter:   id =  k_1, name = k_1, constant
par k_1=0.7

# Parameter:   id =  th_1, name = th_1, constant
par th_1=-0.01

# Parameter:   id =  Force, name = Force, constant
par Force=0.0

# Parameter:   id =  d, name = d, constant
par d=36.0

# Parameter:   id =  kT, name = kT, constant
par kT=4.1164

# Parameter:   id =  k_2, name = k_2, constant
par k_2=12.0

# Parameter:   id =  th_2, name = th_2, constant
par th_2=0.045

# Parameter:   id =  k_3, name = k_3, constant
par k_3=5.0E-6

# Parameter:   id =  th_3, name = th_3, constant
par th_3=0.58

# Parameter:   id =  k_4, name = k_4, constant
par k_4=6.0E-6

# Parameter:   id =  th_4, name = th_4, constant
par th_4=0.385

# Parameter:   id =  S_tot, name = S_tot, defined by a Rule

# Parameter:   id =  V, name = V, defined by a Rule

# Parameter:   id =  V_ave, name = V_ave, defined by a Rule

# Parameter:   id =  tau, name = tau, defined by a Rule

# assignmentRule: variable = S_tot
S_tot=S0+S1
aux S_tot=S_tot

# assignmentRule: variable = V
V=d*((Fw_1st_st+Fw_2nd_st)/2-(Bw_1st_st+Bw_2nd_st)/2)/S_tot
aux V=V

# assignmentRule: variable = V_ave
V_ave=d*((fwd_step1+fwd_step2)/2-(back_step+back_st_1)/2)/(S_tot*t)
aux V_ave=V_ave

# assignmentRule: variable = tau
tau=(k_1*ATP*exp((-th_1)*Force*d/kT)+k_2*exp((-th_2)*Force*d/kT)+k_3*ATP*exp(th_3*Force*d/kT)+k_4*exp(th_4*Force*d/kT))/(k_1*ATP*exp((-th_1)*Force*d/kT)*k_2*exp((-th_2)*Force*d/kT)+k_3*ATP*exp(th_3*Force*d/kT)*k_4*exp(th_4*Force*d/kT))
aux tau=tau

# Reaction: id = Fw_1st_step

Fw_1st_st=k_1*S0*ATP*exp((-th_1)*Force*d/kT)

# Reaction: id = Fw_2nd_step

Fw_2nd_st=k_2*S1*exp((-th_2)*Force*d/kT)

# Reaction: id = Bw_1st_step

Bw_1st_st=k_3*S0*ATP*exp(th_3*Force*d/kT)

# Reaction: id = Bw_2nd_step

Bw_2nd_st=k_4*S1*exp(th_4*Force*d/kT)

# Species:   id = S0, name = S0, affected by kineticLaw

init S0=10.0
dS0/dt=(-1.0 * Fw_1st_st) + ( 1.0 * Fw_2nd_st) + (-1.0 * Bw_1st_st) + ( 1.0 * Bw_2nd_st)

# Species:   id = ATP, name = ATP
par ATP=20.0
aux ATP=ATP
#WARNING speciesID: ATP, constant= false  , boundaryCondition = true but is not involved in assignmentRule, rateRule or events !

# Species:   id = S1, name = S1, affected by kineticLaw

init S1=0.0
dS1/dt=( 1.0 * Fw_1st_st) + (-1.0 * Fw_2nd_st) + ( 1.0 * Bw_1st_st) + (-1.0 * Bw_2nd_st)

# Species:   id = Pi_, name = Pi_
par Pi_=0.0
aux Pi_=Pi_
#WARNING speciesID: Pi_, constant= false  , boundaryCondition = true but is not involved in assignmentRule, rateRule or events !

# Species:   id = ADP, name = ADP
par ADP=0.0
aux ADP=ADP
#WARNING speciesID: ADP, constant= false  , boundaryCondition = true but is not involved in assignmentRule, rateRule or events !

# Species:   id = fwd_step1, name = fwd_step1, affected by kineticLaw

init fwd_step1=0.0
dfwd_step1/dt=( 1.0 * Fw_1st_st)

# Species:   id = fwd_step2, name = fwd_step2, affected by kineticLaw

init fwd_step2=0.0
dfwd_step2/dt=( 1.0 * Fw_2nd_st)

# Species:   id = back_step1, name = back_step1, affected by kineticLaw

par back_step=0.0
aux back_step=back_step
dback_step/dt=( 1.0 * Bw_1st_st)

# Species:   id = back_step2, name = back_step2, affected by kineticLaw

par back_st_1=0.0
aux back_st_1=back_st_1
dback_st_1/dt=( 1.0 * Bw_2nd_st)

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

