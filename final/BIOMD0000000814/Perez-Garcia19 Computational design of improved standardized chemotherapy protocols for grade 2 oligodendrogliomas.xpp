
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Perez-Garcia19 - Computational design of improved standardized chemotherapy protocols for grade 2 oligodendrogliomas
#
# is http://identifiers.org/biomodels.db/MODEL1909170002
# is http://identifiers.org/biomodels.db/BIOMD0000000814
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_Tumor_Cell_P_delayed_death, name = Function for Tumor Cell P delayed death
Function_(alpha_2,P,C)=(alpha_2*P*C)


# FunctionDefinition id = Function_for_Tumor_Cell_P_early_death, name = Function for Tumor Cell P early death
Functio_1(alpha_1,P,C)=(alpha_1*P*C)


# FunctionDefinition id = Function_for_Damaged_Tumor_Cell_D_death, name = Function for Damaged Tumor Cell D death
Functio_2(rho,D,P,K,kappa)=(rho*D*(1-(P+D)/K)/kappa)


# FunctionDefinition id = Function_for_Elimination_of_Chemotherapy, name = Function for Elimination of Chemotherapy
Functio_3(lambda,C)=(lambda*C)


# FunctionDefinition id = Function_for_Tumor_Cell_P_logistic_growth, name = Function for Tumor Cell P logistic growth
Functio_4(P,D,K,rho)=(rho*P*(1-(P+D)/K))


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  alpha_1, name = alpha_1, constant
par alpha_1=0.1027971308

# Parameter:   id =  alpha_2, name = alpha_2, constant
par alpha_2=0.1396877593

# Parameter:   id =  lambda, name = lambda, constant
par lambda=8.3184

# Parameter:   id =  K, name = K, constant
par K=261.799

# Parameter:   id =  kappa, name = kappa, constant
par kappa=1.0

# Parameter:   id =  d, name = d, constant
par d=150.0

# Parameter:   id =  b, name = b, constant
par b=1.9

# Parameter:   id =  beta, name = beta, constant
par beta=0.0021

# Parameter:   id =  rho, name = rho, constant
par rho=0.002931927433

# Parameter:   id =  dose1, name = dose1
par dose1=0.0

# Parameter:   id =  dose2, name = dose2
par dose2=0.0

# Parameter:   id =  dose3, name = dose3
par dose3=0.0

# Parameter:   id =  dose_4, name = dose 4
par dose_4=0.0

# Parameter:   id =  dose_5, name = dose 5
par dose_5=0.0

# Reaction: id = Tumor_Cell_P_logistic_growth, name = Tumor Cell P logistic growth

Tumor_C_1=compartme*Functio_4(Tumor_Cel, Damaged_T, K, rho)

# Reaction: id = Tumor_Cell_P_early_death, name = Tumor Cell P early death

Tumor_C_2=compartme*Functio_1(alpha_1, Tumor_Cel, Drug_Conc)

# Reaction: id = Tumor_Cell_P_delayed_death, name = Tumor Cell P delayed death

Tumor_C_3=compartme*Function_(alpha_2, Tumor_Cel, Drug_Conc)

# Reaction: id = Damaged_Tumor_Cell_D_death, name = Damaged Tumor Cell D death

Damaged_1=compartme*Functio_2(rho, Damaged_T, Tumor_Cel, K, kappa)

# Reaction: id = Elimination_of_Chemotherapy, name = Elimination of Chemotherapy

Eliminati=compartme*Functio_3(lambda, Drug_Conc)

# Species:   id = Drug_Concentration_C, name = Drug Concentration C, affected by kineticLaw
# Species is changed by 5 event(s)
par Drug_Conc=0.0
aux Drug_Conc=Drug_Conc
dDrug_Conc/dt=(1/(compartme))*((-1.0 * Eliminati))

# Species:   id = Tumor_Cell_Population_P, name = Tumor Cell Population P, affected by kineticLaw

par Tumor_Cel=144.952075141053
aux Tumor_Cel=Tumor_Cel
dTumor_Cel/dt=(1/(compartme))*(( 1.0 * Tumor_C_1) + (-1.0 * Tumor_C_2) + (-1.0 * Tumor_C_3))

# Species:   id = Damaged_Tumor_Cells_D, name = Damaged Tumor Cells D, affected by kineticLaw

par Damaged_T=0.0
aux Damaged_T=Damaged_T
dDamaged_T/dt=(1/(compartme))*(( 1.0 * Tumor_C_2) + (-1.0 * Damaged_1))

# event : injection_1
injection=if (((piecewise(t-28*ceil(t/28),  xor (t < 0, 28 < 0), t-28*flr(t/28)) == 27) && (t > 54)) && (t < 608)) then (1.5) else (0.2)
global 1 {injection - 1.1} {dose1=dose1+1;Drug_Concentration_C=Drug_Conc+beta*b*d}

# event : injection_2
injecti_1=if (((piecewise(t-28*ceil(t/28),  xor (t < 0, 28 < 0), t-28*flr(t/28)) == 0) && (t > 54)) && (t < 608)) then (1.5) else (0.2)
global 1 {injecti_1 - 1.1} {Drug_Concentration_C=Drug_Conc+beta*d*b;dose2=dose2+1}

# event : injection_3
injecti_2=if ((((((((((((((((((((t == 57) || (t == 85)) || (t == 113)) || (t == 141)) || (t == 169)) || (t == 197)) || (t == 225)) || (t == 253)) || (t == 281)) || (t == 309)) || (t == 337)) || (t == 365)) || (t == 393)) || (t == 421)) || (t == 449)) || (t == 477)) || (t == 505)) || (t == 533)) || (t == 561)) || (t == 589)) then (1.5) else (0.2)
global 1 {injecti_2 - 1.1} {Drug_Concentration_C=Drug_Conc+beta*b*d;dose3=dose3+1}

# event : injection_4
injecti_3=if ((((((((((((((((((((t == 58) || (t == 86)) || (t == 114)) || (t == 142)) || (t == 170)) || (t == 198)) || (t == 226)) || (t == 254)) || (t == 282)) || (t == 310)) || (t == 338)) || (t == 366)) || (t == 394)) || (t == 422)) || (t == 450)) || (t == 478)) || (t == 506)) || (t == 534)) || (t == 562)) || (t == 590)) then (1.5) else (0.2)
global 1 {injecti_3 - 1.1} {Drug_Concentration_C=Drug_Conc+beta*b*d;dose_4=dose_4+1}

# event : injection_5
injecti_4=if ((((((((((((((((((((t == 59) || (t == 87)) || (t == 115)) || (t == 143)) || (t == 171)) || (t == 199)) || (t == 227)) || (t == 255)) || (t == 283)) || (t == 311)) || (t == 339)) || (t == 367)) || (t == 395)) || (t == 423)) || (t == 451)) || (t == 479)) || (t == 507)) || (t == 535)) || (t == 563)) || (t == 591)) then (1.5) else (0.2)
global 1 {injecti_4 - 1.1} {Drug_Concentration_C=Drug_Conc+beta*b*d;dose_5=dose_5+1}

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

