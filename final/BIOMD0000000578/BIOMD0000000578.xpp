
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Invergo2014 - Phototransduction cascade in mouse rod cells
#
# is http://identifiers.org/biomodels.db/MODEL1501210000
# is http://identifiers.org/biomodels.db/BIOMD0000000578
# isDescribedBy http://identifiers.org/pubmed/24675755
# isDerivedFrom http://identifiers.org/pubmed/21843151
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = cytosol, name = cytosol, constant
par cytosol=0.03916

# Parameter:   id =  Rtot, name = Rtot, constant
par Rtot=1.0E8

# Parameter:   id =  PDEtot, name = PDEtot, constant
par PDEtot=2000000.0

# Parameter:   id =  Gtot, name = Gtot, constant
par Gtot=1.0E7

# Parameter:   id =  RGStot, name = RGStot, constant
par RGStot=100000.0

# Parameter:   id =  ArrTot, name = ArrTot, constant
par ArrTot=7074600.0

# Parameter:   id =  flashBG, name = flashBG, constant
par flashBG=0.0

# Parameter:   id =  flash0Dur, name = flash0Dur, constant
par flash0Dur=0.001

# Parameter:   id =  flash0Mag, name = flash0Mag, constant
par flash0Mag=0.0

# Parameter:   id =  flashDel, name = flashDel, constant
par flashDel=0.0

# Parameter:   id =  flashDur, name = flashDur, constant
par flashDur=0.001

# Parameter:   id =  flashMag, name = flashMag, constant
par flashMag=0.0

# Parameter:   id =  otherstimulus, name = otherstimulus, constant
par otherstim=0.0

# Parameter:   id =  kRK1_0, name = kRK1_0, constant
par kRK1_0=0.1724

# Parameter:   id =  omega, name = omega, constant
par omega=2.5

# Parameter:   id =  kRK2, name = kRK2, constant
par kRK2=250.0

# Parameter:   id =  kRK3_ATP, name = kRK3_ATP, constant
par kRK3_ATP=4000.0

# Parameter:   id =  kRK4, name = kRK4, constant
par kRK4=250.0

# Parameter:   id =  kArr, name = kArr, constant
par kArr=9.9147E-6

# Parameter:   id =  kA2, name = kA2, constant
par kA2=0.026

# Parameter:   id =  m_Arr, name = m_Arr, constant
par m_Arr=9.5475E-6

# Parameter:   id =  kA3, name = kA3, constant
par kA3=1.1651

# Parameter:   id =  kA4, name = kA4, constant
par kA4=2.9965E-7

# Parameter:   id =  kA5, name = kA5, constant
par kA5=0.424

# Parameter:   id =  kOps, name = kOps, constant
par kOps=6.1172E-13

# Parameter:   id =  kRrecyc, name = kRrecyc, constant
par kRrecyc=7.0E-4

# Parameter:   id =  omega_G, name = omega_G, constant
par omega_G=0.6

# Parameter:   id =  kG1_0, name = kG1_0, constant
par kG1_0=0.001

# Parameter:   id =  kG2, name = kG2, constant
par kG2=2200.0

# Parameter:   id =  kG3, name = kG3, constant
par kG3=8500.0

# Parameter:   id =  kG4_GDP, name = kG4_GDP, constant
par kG4_GDP=400.0

# Parameter:   id =  kG5_GTP, name = kG5_GTP, constant
par kG5_GTP=3500.0

# Parameter:   id =  kG6, name = kG6, constant
par kG6=8500.0

# Parameter:   id =  kG7, name = kG7, constant
par kG7=200.0

# Parameter:   id =  kGrecyc, name = kGrecyc, constant
par kGrecyc=2.0

# Parameter:   id =  kGshutoff, name = kGshutoff, constant
par kGshutoff=0.05

# Parameter:   id =  kP1, name = kP1, constant
par kP1=0.05497

# Parameter:   id =  kP1_rev, name = kP1_rev, constant
par kP1_rev=0.0

# Parameter:   id =  kP2, name = kP2, constant
par kP2=940.7

# Parameter:   id =  kP3, name = kP3, constant
par kP3=1.4983E-9

# Parameter:   id =  kP4, name = kP4, constant
par kP4=21.088

# Parameter:   id =  kPDEshutoff, name = kPDEshutoff, constant
par kPDEshuto=0.1

# Parameter:   id =  kRGS1, name = kRGS1, constant
par kRGS1=4.8182E-5

# Parameter:   id =  kRGS2, name = kRGS2, constant
par kRGS2=98.0

# Parameter:   id =  kRec1, name = kRec1, constant
par kRec1=0.011

# Parameter:   id =  kRec2, name = kRec2, constant
par kRec2=0.05

# Parameter:   id =  kRec3, name = kRec3, constant
par kRec3=4.1081E-4

# Parameter:   id =  kRec4, name = kRec4, constant
par kRec4=0.610084

# Parameter:   id =  Vcyto, name = Vcyto, constant
par Vcyto=0.03916

# Parameter:   id =  Kc1, name = Kc1, constant
par Kc1=0.171

# Parameter:   id =  Kc2, name = Kc2, constant
par Kc2=0.059

# Parameter:   id =  m1, name = m1, constant
par m1=3.0

# Parameter:   id =  m2, name = m2, constant
par m2=1.5

# Parameter:   id =  alfamax, name = alfamax, constant
par alfamax=60.0

# Parameter:   id =  betadark, name = betadark, constant
par betadark=3.19

# Parameter:   id =  betasub, name = betasub, constant
par betasub=0.0021826

# Parameter:   id =  fCa, name = fCa, constant
par fCa=0.12

# Parameter:   id =  Jdark, name = Jdark, constant
par Jdark=14.87

# Parameter:   id =  F, name = F, constant
par F=96485.34

# Parameter:   id =  cGMPdark, name = cGMPdark, constant
par cGMPdark=6.4944

# Parameter:   id =  ncg, name = ncg, constant
par ncg=3.8

# Parameter:   id =  gammaCa, name = gammaCa, constant
par gammaCa=981.3558

# Parameter:   id =  Ca2dark, name = Ca2dark, constant
par Ca2dark=0.25

# Parameter:   id =  Ca2_0, name = Ca2_0, constant
par Ca2_0=0.023

# Parameter:   id =  k1, name = k1, constant
par k1=9.37059

# Parameter:   id =  k2, name = k2, constant
par k2=46.412

# Parameter:   id =  eT, name = eT, constant
par eT=400.0

# Parameter:   id =  ktherm, name = ktherm, constant
par ktherm=0.0238

# Parameter:   id =  background, name = background, defined by a Rule

# Parameter:   id =  premag, name = premag, defined by a Rule

# Parameter:   id =  mag, name = mag, defined by a Rule

# Parameter:   id =  predur, name = predur, defined by a Rule

# Parameter:   id =  dur, name = dur, defined by a Rule

# Parameter:   id =  del, name = del, defined by a Rule

# Parameter:   id =  preflash, name = preflash, defined by a Rule

# Parameter:   id =  testflash, name = testflash, defined by a Rule

# Parameter:   id =  stimulus, name = stimulus, defined by a Rule

# Parameter:   id =  numConcFactor, name = numConcFactor, defined by a Rule

# Parameter:   id =  kRK1_1, name = kRK1_1, defined by a Rule

# Parameter:   id =  kRK1_2, name = kRK1_2, defined by a Rule

# Parameter:   id =  kRK1_3, name = kRK1_3, defined by a Rule

# Parameter:   id =  kRK1_4, name = kRK1_4, defined by a Rule

# Parameter:   id =  kRK1_5, name = kRK1_5, defined by a Rule

# Parameter:   id =  kRK1_6, name = kRK1_6, defined by a Rule

# Parameter:   id =  kA1_1, name = kA1_1, defined by a Rule

# Parameter:   id =  kA1_2, name = kA1_2, defined by a Rule

# Parameter:   id =  kA1_3, name = kA1_3, defined by a Rule

# Parameter:   id =  kA1_4, name = kA1_4, defined by a Rule

# Parameter:   id =  kA1_5, name = kA1_5, defined by a Rule

# Parameter:   id =  kA1_6, name = kA1_6, defined by a Rule

# Parameter:   id =  kGpre1, name = kGpre1, defined by a Rule

# Parameter:   id =  kGpre2, name = kGpre2, defined by a Rule

# Parameter:   id =  kG1ops, name = kG1ops, defined by a Rule

# Parameter:   id =  kG2ops, name = kG2ops, defined by a Rule

# Parameter:   id =  kG1_1, name = kG1_1, defined by a Rule

# Parameter:   id =  kG1_2, name = kG1_2, defined by a Rule

# Parameter:   id =  kG1_3, name = kG1_3, defined by a Rule

# Parameter:   id =  kG1_4, name = kG1_4, defined by a Rule

# Parameter:   id =  kG1_5, name = kG1_5, defined by a Rule

# Parameter:   id =  kG1_6, name = kG1_6, defined by a Rule

# Parameter:   id =  E, name = E, defined by a Rule

# Parameter:   id =  Ca2_frac, name = Ca2_frac, defined by a Rule

# Parameter:   id =  J, name = J, defined by a Rule

# Parameter:   id =  deltaJ, name = deltaJ, defined by a Rule

# assignmentRule: variable = background
backgroun=flashBG
aux backgroun=backgroun

# assignmentRule: variable = premag
premag=flash0Mag/flash0Dur
aux premag=premag

# assignmentRule: variable = mag
mag=flashMag/flashDur
aux mag=mag

# assignmentRule: variable = predur
predur=flash0Dur
aux predur=predur

# assignmentRule: variable = dur
dur=flashDur
aux dur=dur

# assignmentRule: variable = del
del=flashDel
aux del=del

# assignmentRule: variable = preflash
preflash= piecew1 
aux preflash=preflash

# assignmentRule: variable = testflash
testflash= piecew2 
aux testflash=testflash

# assignmentRule: variable = stimulus
stimulus=backgroun+preflash+testflash+otherstim
aux stimulus=stimulus

# assignmentRule: variable = numConcFactor
# the operator E5 is not supported by xpp
# the formula is : 1/(6.022E5*Vcyto)
#Rule ignored : there are some unsupported functions !!

# assignmentRule: variable = kRK1_1
kRK1_1=kRK1_0*exp(-omega)
aux kRK1_1=kRK1_1

# assignmentRule: variable = kRK1_2
kRK1_2=kRK1_0*exp((-omega)*2)
aux kRK1_2=kRK1_2

# assignmentRule: variable = kRK1_3
kRK1_3=kRK1_0*exp((-omega)*3)
aux kRK1_3=kRK1_3

# assignmentRule: variable = kRK1_4
kRK1_4=kRK1_0*exp((-omega)*4)
aux kRK1_4=kRK1_4

# assignmentRule: variable = kRK1_5
kRK1_5=kRK1_0*exp((-omega)*5)
aux kRK1_5=kRK1_5

# assignmentRule: variable = kRK1_6
kRK1_6=0
aux kRK1_6=kRK1_6

# assignmentRule: variable = kA1_1
kA1_1=kArr
aux kA1_1=kA1_1

# assignmentRule: variable = kA1_2
kA1_2=kArr+1*m_Arr
aux kA1_2=kA1_2

# assignmentRule: variable = kA1_3
kA1_3=kArr+2*m_Arr
aux kA1_3=kA1_3

# assignmentRule: variable = kA1_4
kA1_4=kArr+3*m_Arr
aux kA1_4=kA1_4

# assignmentRule: variable = kA1_5
kA1_5=kArr+3*m_Arr
aux kA1_5=kA1_5

# assignmentRule: variable = kA1_6
kA1_6=kArr+3*m_Arr
aux kA1_6=kA1_6

# assignmentRule: variable = kGpre1
kGpre1=kG1_0*1.6
aux kGpre1=kGpre1

# assignmentRule: variable = kGpre2
kGpre2=kG2*315
aux kGpre2=kGpre2

# assignmentRule: variable = kG1ops
kG1ops=kG1_0*1.9
aux kG1ops=kG1ops

# assignmentRule: variable = kG2ops
kG2ops=kG2*3
aux kG2ops=kG2ops

# assignmentRule: variable = kG1_1
kG1_1=kG1_0*exp(-omega_G)
aux kG1_1=kG1_1

# assignmentRule: variable = kG1_2
kG1_2=kG1_0*exp((-omega_G)*2)
aux kG1_2=kG1_2

# assignmentRule: variable = kG1_3
kG1_3=kG1_0*exp((-omega_G)*3)
aux kG1_3=kG1_3

# assignmentRule: variable = kG1_4
kG1_4=kG1_0*exp((-omega_G)*4)
aux kG1_4=kG1_4

# assignmentRule: variable = kG1_5
kG1_5=kG1_0*exp((-omega_G)*5)
aux kG1_5=kG1_5

# assignmentRule: variable = kG1_6
kG1_6=kG1_0*exp((-omega_G)*6)
aux kG1_6=kG1_6

# assignmentRule: variable = E
E=PDE_a_Ga_+2*Ga_GTP_a_+Ga_GTP_PD
aux E=E

# assignmentRule: variable = Ca2_frac
Ca2_frac=(Ca2_free-Ca2_0)/(Ca2dark-Ca2_0)
aux Ca2_frac=Ca2_frac

# assignmentRule: variable = J
J=2/(2+fCa)*(cGMP/cGMPdark)^ncg*Jdark+fCa/(fCa+2)*Ca2_frac*Jdark
aux J=J

# assignmentRule: variable = deltaJ
deltaJ=Jdark-J
aux deltaJ=deltaJ

# rateRule: variable = Ca2_free
init Ca2_free=0.25
dCa2_free/dt=-v_r33-v_r34+v_r35-2*v_r30*numConcFa

# Reaction: id = v_r1, name = v_r1

v_r1=stimulus*R/Rtot

# Reaction: id = v_rstprec, name = v_rstprec

v_rstprec=stimulus*R_Gt/Rtot

# Reaction: id = v_r2_0, name = v_r2_0

v_r2_0=kRK1_0*RK*R0-kRK2*R0_RKpre

# Reaction: id = v_r2_1, name = v_r2_1

v_r2_1=kRK1_1*RK*R1-kRK2*R1_RKpre

# Reaction: id = v_r2_2, name = v_r2_2

v_r2_2=kRK1_2*RK*R2-kRK2*R2_RKpre

# Reaction: id = v_r2_3, name = v_r2_3

v_r2_3=kRK1_3*RK*R3-kRK2*R3_RKpre

# Reaction: id = v_r2_4, name = v_r2_4

v_r2_4=kRK1_4*RK*R4-kRK2*R4_RKpre

# Reaction: id = v_r2_5, name = v_r2_5

v_r2_5=kRK1_5*RK*R5-kRK2*R5_RKpre

# Reaction: id = v_r2_6, name = v_r2_6

v_r2_6=kRK1_6*RK*R6-kRK2*R6_RKpre

# Reaction: id = v_r3_0, name = v_r3_0

v_r3_0=kRK3_ATP*R0_RKpre

# Reaction: id = v_r3_1, name = v_r3_1

v_r3_1=kRK3_ATP*R1_RKpre

# Reaction: id = v_r3_2, name = v_r3_2

v_r3_2=kRK3_ATP*R2_RKpre

# Reaction: id = v_r3_3, name = v_r3_3

v_r3_3=kRK3_ATP*R3_RKpre

# Reaction: id = v_r3_4, name = v_r3_4

v_r3_4=kRK3_ATP*R4_RKpre

# Reaction: id = v_r3_5, name = v_r3_5

v_r3_5=kRK3_ATP*R5_RKpre

# Reaction: id = v_r4_1, name = v_r4_1

v_r4_1=kRK4*R1_RKpost

# Reaction: id = v_r4_2, name = v_r4_2

v_r4_2=kRK4*R2_RKpost

# Reaction: id = v_r4_3, name = v_r4_3

v_r4_3=kRK4*R3_RKpost

# Reaction: id = v_r4_4, name = v_r4_4

v_r4_4=kRK4*R4_RKpost

# Reaction: id = v_r4_5, name = v_r4_5

v_r4_5=kRK4*R5_RKpost

# Reaction: id = v_r4_6, name = v_r4_6

v_r4_6=kRK4*R6_RKpost

# Reaction: id = v_r5_1, name = v_r5_1

v_r5_1=kA1_1*Arr*R1-kA2*R1_Arr

# Reaction: id = v_r5_2, name = v_r5_2

v_r5_2=kA1_2*Arr*R2-kA2*R2_Arr

# Reaction: id = v_r5_3, name = v_r5_3

v_r5_3=kA1_3*Arr*R3-kA2*R3_Arr

# Reaction: id = v_r5_4, name = v_r5_4

v_r5_4=kA1_4*Arr*R4-kA2*R4_Arr

# Reaction: id = v_r5_5, name = v_r5_5

v_r5_5=kA1_5*Arr*R5-kA2*R5_Arr

# Reaction: id = v_r5_6, name = v_r5_6

v_r5_6=kA1_6*Arr*R6-kA2*R6_Arr

# Reaction: id = v_r6_1, name = v_r6_1

v_r6_1=kA3*R1_Arr

# Reaction: id = v_r6_2, name = v_r6_2

v_r6_2=kA3*R2_Arr

# Reaction: id = v_r6_3, name = v_r6_3

v_r6_3=kA3*R3_Arr

# Reaction: id = v_r6_4, name = v_r6_4

v_r6_4=kA3*R4_Arr

# Reaction: id = v_r6_5, name = v_r6_5

v_r6_5=kA3*R5_Arr

# Reaction: id = v_r6_6, name = v_r6_6

v_r6_6=kA3*R6_Arr

# Reaction: id = v_r7_0, name = v_r7_0

v_r7_0=ktherm*R0

# Reaction: id = v_r7_1, name = v_r7_1

v_r7_1=ktherm*R1

# Reaction: id = v_r7_2, name = v_r7_2

v_r7_2=ktherm*R2

# Reaction: id = v_r7_3, name = v_r7_3

v_r7_3=ktherm*R3

# Reaction: id = v_r7_4, name = v_r7_4

v_r7_4=ktherm*R4

# Reaction: id = v_r7_5, name = v_r7_5

v_r7_5=ktherm*R5

# Reaction: id = v_r7_6, name = v_r7_6

v_r7_6=ktherm*R6

# Reaction: id = v_r8, name = v_r8

v_r8=kG1ops*Ops*Gt-kG2ops*Ops_Gt

# Reaction: id = v_r9, name = v_r9

v_r9=kOps*Ops_Gt-kG4_GDP*Ops_G

# Reaction: id = v_r10, name = v_r10

v_r10=kG5_GTP*Ops_G

# Reaction: id = v_r11, name = v_r11

v_r11=kG6*Ops_G_GTP

# Reaction: id = v_r12, name = v_r12

v_r12=kRrecyc*Ops

# Reaction: id = v_GtRpre, name = v_GtRpre

v_GtRpre=kGpre1*Gt*R-kGpre2*R_Gt

# Reaction: id = v_r13_0, name = v_r13_0

v_r13_0=kG1_0*Gt*R0-kG2*R0_Gt

# Reaction: id = v_r13_1, name = v_r13_1

v_r13_1=kG1_1*Gt*R1-kG2*R1_Gt

# Reaction: id = v_r13_2, name = v_r13_2

v_r13_2=kG1_2*Gt*R2-kG2*R2_Gt

# Reaction: id = v_r13_3, name = v_r13_3

v_r13_3=kG1_3*Gt*R3-kG2*R3_Gt

# Reaction: id = v_r13_4, name = v_r13_4

v_r13_4=kG1_4*Gt*R4-kG2*R4_Gt

# Reaction: id = v_r13_5, name = v_r13_5

v_r13_5=kG1_5*Gt*R5-kG2*R5_Gt

# Reaction: id = v_r13_6, name = v_r13_6

v_r13_6=kG1_6*Gt*R6-kG2*R6_Gt

# Reaction: id = v_r14_0, name = v_r14_0

v_r14_0=kG3*R0_Gt-kG4_GDP*R0_G

# Reaction: id = v_r14_1, name = v_r14_1

v_r14_1=kG3*R1_Gt-kG4_GDP*R1_G

# Reaction: id = v_r14_2, name = v_r14_2

v_r14_2=kG3*R2_Gt-kG4_GDP*R2_G

# Reaction: id = v_r14_3, name = v_r14_3

v_r14_3=kG3*R3_Gt-kG4_GDP*R3_G

# Reaction: id = v_r14_4, name = v_r14_4

v_r14_4=kG3*R4_Gt-kG4_GDP*R4_G

# Reaction: id = v_r14_5, name = v_r14_5

v_r14_5=kG3*R5_Gt-kG4_GDP*R5_G

# Reaction: id = v_r14_6, name = v_r14_6

v_r14_6=kG3*R6_Gt-kG4_GDP*R6_G

# Reaction: id = v_r15_0, name = v_r15_0

v_r15_0=kG5_GTP*R0_G

# Reaction: id = v_r15_1, name = v_r15_1

v_r15_1=kG5_GTP*R1_G

# Reaction: id = v_r15_2, name = v_r15_2

v_r15_2=kG5_GTP*R2_G

# Reaction: id = v_r15_3, name = v_r15_3

v_r15_3=kG5_GTP*R3_G

# Reaction: id = v_r15_4, name = v_r15_4

v_r15_4=kG5_GTP*R4_G

# Reaction: id = v_r15_5, name = v_r15_5

v_r15_5=kG5_GTP*R5_G

# Reaction: id = v_r15_6, name = v_r15_6

v_r15_6=kG5_GTP*R6_G

# Reaction: id = v_r16_0, name = v_r16_0

v_r16_0=kG6*R0_G_GTP

# Reaction: id = v_r16_1, name = v_r16_1

v_r16_1=kG6*R1_G_GTP

# Reaction: id = v_r16_2, name = v_r16_2

v_r16_2=kG6*R2_G_GTP

# Reaction: id = v_r16_3, name = v_r16_3

v_r16_3=kG6*R3_G_GTP

# Reaction: id = v_r16_4, name = v_r16_4

v_r16_4=kG6*R4_G_GTP

# Reaction: id = v_r16_5, name = v_r16_5

v_r16_5=kG6*R5_G_GTP

# Reaction: id = v_r16_6, name = v_r16_6

v_r16_6=kG6*R6_G_GTP

# Reaction: id = v_r17, name = v_r17

v_r17=kG7*G_GTP

# Reaction: id = v_r18, name = v_r18

v_r18=kP1*PDE*Ga_GTP-kP1_rev*PDE_Ga_GT

# Reaction: id = v_r19, name = v_r19

v_r19=kP2*PDE_Ga_GT

# Reaction: id = v_r20, name = v_r20

v_r20=kP3*PDE_a_Ga_*Ga_GTP

# Reaction: id = v_r21, name = v_r21

v_r21=kP4*Ga_GTP_PD

# Reaction: id = v_r22, name = v_r22

v_r22=kRGS1*RGS*Ga_GTP_a_

# Reaction: id = v_r23, name = v_r23

v_r23=kRGS2*RGS_Ga_GT

# Reaction: id = v_r24, name = v_r24

v_r24=kRGS1*RGS*PDE_a_Ga_

# Reaction: id = v_r25, name = v_r25

v_r25=kRGS2*RGS_PDE_a

# Reaction: id = v_r26, name = v_r26

v_r26=kPDEshuto*PDE_a_Ga_

# Reaction: id = v_r27, name = v_r27

v_r27=kPDEshuto*Ga_GTP_a_

# Reaction: id = v_r28, name = v_r28

v_r28=kGshutoff*Ga_GTP

# Reaction: id = v_r29, name = v_r29

v_r29=kGrecyc*Gbg*Ga_GDP

# Reaction: id = v_r30, name = v_r30

v_r30=kRec1*RecT*Ca2_free-kRec2*RecR_Ca

# Reaction: id = v_r31, name = v_r31

v_r31=kRec3*RecR_Ca*RK-kRec4*RecR_Ca_R

# Reaction: id = v_r_diarr, name = v_r_diarr

v_r_diarr=kA4*Arr*Arr-kA5*Arr_di

# Reaction: id = v_r_tetraarr, name = v_r_tetraarr

v_r_tetra=kA4*Arr_di*Arr_di-kA5*Arr_tetra

# Reaction: id = v_r33, name = v_r33

v_r33=k1*(eT-Ca2_buff)*Ca2_free-k2*Ca2_buff

# Reaction: id = v_r34, name = v_r34

v_r34=gammaCa*(Ca2_free-Ca2_0)
# Inconsistent mathML operators in Reaction v_r35
# Reaction: id = v_r36, name = v_r36

v_r36=alfamax/(1+(Ca2_free/Kc1)^m1)+alfamax/(1+(Ca2_free/Kc2)^m2)

# Reaction: id = v_r37, name = v_r37

v_r37=(betadark+betasub*E)*cGMP

# Species:   id = Arr, name = Arr, affected by kineticLaw

init Arr=1260760.0
dArr/dt=(-1.0 * v_r5_1) + (-1.0 * v_r5_2) + (-1.0 * v_r5_3) + (-1.0 * v_r5_4) + (-1.0 * v_r5_5) + (-1.0 * v_r5_6) + ( 1.0 * v_r6_1) + ( 1.0 * v_r6_2) + ( 1.0 * v_r6_3) + ( 1.0 * v_r6_4) + ( 1.0 * v_r6_5) + ( 1.0 * v_r6_6) + (-2.0 * v_r_diarr)

# Species:   id = Arr_di, name = Arr_di, affected by kineticLaw

init Arr_di=1123300.0
dArr_di/dt=( 1.0 * v_r_diarr) + (-2.0 * v_r_tetra)

# Species:   id = Arr_tetra, name = Arr_tetra, affected by kineticLaw

init Arr_tetra=891810.0
dArr_tetra/dt=( 1.0 * v_r_tetra)

# Species:   id = Ca2_buff, name = Ca2_buff, affected by kineticLaw

init Ca2_buff=19.2199
dCa2_buff/dt=(1/(cytosol))*(( 1.0 * v_r33))

# Species:   id = Ca2_free, name = Ca2_free, involved in a rule 

# Species:   id = G_GTP, name = G_GTP, affected by kineticLaw

init G_GTP=0.0
dG_GTP/dt=( 1.0 * v_r11) + ( 1.0 * v_r16_0) + ( 1.0 * v_r16_1) + ( 1.0 * v_r16_2) + ( 1.0 * v_r16_3) + ( 1.0 * v_r16_4) + ( 1.0 * v_r16_5) + ( 1.0 * v_r16_6) + (-1.0 * v_r17)

# Species:   id = Ga_GDP, name = Ga_GDP, affected by kineticLaw

init Ga_GDP=0.0
dGa_GDP/dt=( 1.0 * v_r23) + ( 1.0 * v_r25) + ( 1.0 * v_r26) + ( 1.0 * v_r27) + ( 1.0 * v_r28) + (-1.0 * v_r29)

# Species:   id = Ga_GTP, name = Ga_GTP, affected by kineticLaw

init Ga_GTP=0.0
dGa_GTP/dt=( 1.0 * v_r17) + (-1.0 * v_r18) + (-1.0 * v_r20) + (-1.0 * v_r28)

# Species:   id = Ga_GTP_PDE_a_Ga_GTP, name = Ga_GTP_PDE_a_Ga_GTP, affected by kineticLaw

par Ga_GTP_PD=0.0
aux Ga_GTP_PD=Ga_GTP_PD
dGa_GTP_PD/dt=( 1.0 * v_r20) + (-1.0 * v_r21)

# Species:   id = Ga_GTP_a_PDE_a_Ga_GTP, name = Ga_GTP_a_PDE_a_Ga_GTP, affected by kineticLaw

par Ga_GTP_a_=0.0
aux Ga_GTP_a_=Ga_GTP_a_
dGa_GTP_a_/dt=( 1.0 * v_r21) + (-1.0 * v_r22) + (-1.0 * v_r27)

# Species:   id = Gbg, name = Gbg, affected by kineticLaw

init Gbg=0.0
dGbg/dt=( 1.0 * v_r17) + (-1.0 * v_r29)

# Species:   id = Gt, name = Gt, affected by kineticLaw

init Gt=8152500.0
dGt/dt=(-1.0 * v_r8) + (-1.0 * v_GtRpre) + (-1.0 * v_r13_0) + (-1.0 * v_r13_1) + (-1.0 * v_r13_2) + (-1.0 * v_r13_3) + (-1.0 * v_r13_4) + (-1.0 * v_r13_5) + (-1.0 * v_r13_6) + ( 1.0 * v_r29)

# Species:   id = Ops, name = Ops, affected by kineticLaw

init Ops=0.0
dOps/dt=( 1.0 * v_r6_1) + ( 1.0 * v_r6_2) + ( 1.0 * v_r6_3) + ( 1.0 * v_r6_4) + ( 1.0 * v_r6_5) + ( 1.0 * v_r6_6) + ( 1.0 * v_r7_0) + ( 1.0 * v_r7_1) + ( 1.0 * v_r7_2) + ( 1.0 * v_r7_3) + ( 1.0 * v_r7_4) + ( 1.0 * v_r7_5) + ( 1.0 * v_r7_6) + (-1.0 * v_r8) + ( 1.0 * v_r11) + (-1.0 * v_r12)

# Species:   id = Ops_G, name = Ops_G, affected by kineticLaw

init Ops_G=0.0
dOps_G/dt=( 1.0 * v_r9) + (-1.0 * v_r10)

# Species:   id = Ops_G_GTP, name = Ops_G_GTP, affected by kineticLaw

init Ops_G_GTP=0.0
dOps_G_GTP/dt=( 1.0 * v_r10) + (-1.0 * v_r11)

# Species:   id = Ops_Gt, name = Ops_Gt, affected by kineticLaw

init Ops_Gt=0.0
dOps_Gt/dt=( 1.0 * v_r8) + (-1.0 * v_r9)

# Species:   id = PDE, name = PDE, affected by kineticLaw

init PDE=2000000.0
dPDE/dt=(-1.0 * v_r18) + ( 1.0 * v_r25) + ( 1.0 * v_r26)

# Species:   id = PDE_Ga_GTP, name = PDE_Ga_GTP, affected by kineticLaw

par PDE_Ga_GT=0.0
aux PDE_Ga_GT=PDE_Ga_GT
dPDE_Ga_GT/dt=( 1.0 * v_r18) + (-1.0 * v_r19)

# Species:   id = PDE_a_Ga_GTP, name = PDE_a_Ga_GTP, affected by kineticLaw

par PDE_a_Ga_=0.0
aux PDE_a_Ga_=PDE_a_Ga_
dPDE_a_Ga_/dt=( 1.0 * v_r19) + (-1.0 * v_r20) + ( 1.0 * v_r23) + (-1.0 * v_r24) + (-1.0 * v_r26) + ( 1.0 * v_r27)

# Species:   id = R, name = R, affected by kineticLaw

init R=9.81525E7
dR/dt=(-1.0 * v_r1) + ( 1.0 * v_r12) + (-1.0 * v_GtRpre)

# Species:   id = R0, name = R0, affected by kineticLaw

init R0=0.0
dR0/dt=( 1.0 * v_r1) + (-1.0 * v_r2_0) + (-1.0 * v_r7_0) + (-1.0 * v_r13_0) + ( 1.0 * v_r16_0)

# Species:   id = R0_G, name = R0_G, affected by kineticLaw

init R0_G=0.0
dR0_G/dt=( 1.0 * v_r14_0) + (-1.0 * v_r15_0)

# Species:   id = R0_G_GTP, name = R0_G_GTP, affected by kineticLaw

init R0_G_GTP=0.0
dR0_G_GTP/dt=( 1.0 * v_r15_0) + (-1.0 * v_r16_0)

# Species:   id = R0_Gt, name = R0_Gt, affected by kineticLaw

init R0_Gt=0.0
dR0_Gt/dt=( 1.0 * v_rstprec) + ( 1.0 * v_r13_0) + (-1.0 * v_r14_0)

# Species:   id = R0_RKpre, name = R0_RKpre, affected by kineticLaw

init R0_RKpre=0.0
dR0_RKpre/dt=( 1.0 * v_r2_0) + (-1.0 * v_r3_0)

# Species:   id = R1, name = R1, affected by kineticLaw

init R1=0.0
dR1/dt=(-1.0 * v_r2_1) + ( 1.0 * v_r4_1) + (-1.0 * v_r5_1) + (-1.0 * v_r7_1) + (-1.0 * v_r13_1) + ( 1.0 * v_r16_1)

# Species:   id = R1_Arr, name = R1_Arr, affected by kineticLaw

init R1_Arr=0.0
dR1_Arr/dt=( 1.0 * v_r5_1) + (-1.0 * v_r6_1)

# Species:   id = R1_G, name = R1_G, affected by kineticLaw

init R1_G=0.0
dR1_G/dt=( 1.0 * v_r14_1) + (-1.0 * v_r15_1)

# Species:   id = R1_G_GTP, name = R1_G_GTP, affected by kineticLaw

init R1_G_GTP=0.0
dR1_G_GTP/dt=( 1.0 * v_r15_1) + (-1.0 * v_r16_1)

# Species:   id = R1_Gt, name = R1_Gt, affected by kineticLaw

init R1_Gt=0.0
dR1_Gt/dt=( 1.0 * v_r13_1) + (-1.0 * v_r14_1)

# Species:   id = R1_RKpost, name = R1_RKpost, affected by kineticLaw

init R1_RKpost=0.0
dR1_RKpost/dt=( 1.0 * v_r3_0) + (-1.0 * v_r4_1)

# Species:   id = R1_RKpre, name = R1_RKpre, affected by kineticLaw

init R1_RKpre=0.0
dR1_RKpre/dt=( 1.0 * v_r2_1) + (-1.0 * v_r3_1)

# Species:   id = R2, name = R2, affected by kineticLaw

init R2=0.0
dR2/dt=(-1.0 * v_r2_2) + ( 1.0 * v_r4_2) + (-1.0 * v_r5_2) + (-1.0 * v_r7_2) + (-1.0 * v_r13_2) + ( 1.0 * v_r16_2)

# Species:   id = R2_Arr, name = R2_Arr, affected by kineticLaw

init R2_Arr=0.0
dR2_Arr/dt=( 1.0 * v_r5_2) + (-1.0 * v_r6_2)

# Species:   id = R2_G, name = R2_G, affected by kineticLaw

init R2_G=0.0
dR2_G/dt=( 1.0 * v_r14_2) + (-1.0 * v_r15_2)

# Species:   id = R2_G_GTP, name = R2_G_GTP, affected by kineticLaw

init R2_G_GTP=0.0
dR2_G_GTP/dt=( 1.0 * v_r15_2) + (-1.0 * v_r16_2)

# Species:   id = R2_Gt, name = R2_Gt, affected by kineticLaw

init R2_Gt=0.0
dR2_Gt/dt=( 1.0 * v_r13_2) + (-1.0 * v_r14_2)

# Species:   id = R2_RKpost, name = R2_RKpost, affected by kineticLaw

init R2_RKpost=0.0
dR2_RKpost/dt=( 1.0 * v_r3_1) + (-1.0 * v_r4_2)

# Species:   id = R2_RKpre, name = R2_RKpre, affected by kineticLaw

init R2_RKpre=0.0
dR2_RKpre/dt=( 1.0 * v_r2_2) + (-1.0 * v_r3_2)

# Species:   id = R3, name = R3, affected by kineticLaw

init R3=0.0
dR3/dt=(-1.0 * v_r2_3) + ( 1.0 * v_r4_3) + (-1.0 * v_r5_3) + (-1.0 * v_r7_3) + (-1.0 * v_r13_3) + ( 1.0 * v_r16_3)

# Species:   id = R3_Arr, name = R3_Arr, affected by kineticLaw

init R3_Arr=0.0
dR3_Arr/dt=( 1.0 * v_r5_3) + (-1.0 * v_r6_3)

# Species:   id = R3_G, name = R3_G, affected by kineticLaw

init R3_G=0.0
dR3_G/dt=( 1.0 * v_r14_3) + (-1.0 * v_r15_3)

# Species:   id = R3_G_GTP, name = R3_G_GTP, affected by kineticLaw

init R3_G_GTP=0.0
dR3_G_GTP/dt=( 1.0 * v_r15_3) + (-1.0 * v_r16_3)

# Species:   id = R3_Gt, name = R3_Gt, affected by kineticLaw

init R3_Gt=0.0
dR3_Gt/dt=( 1.0 * v_r13_3) + (-1.0 * v_r14_3)

# Species:   id = R3_RKpost, name = R3_RKpost, affected by kineticLaw

init R3_RKpost=0.0
dR3_RKpost/dt=( 1.0 * v_r3_2) + (-1.0 * v_r4_3)

# Species:   id = R3_RKpre, name = R3_RKpre, affected by kineticLaw

init R3_RKpre=0.0
dR3_RKpre/dt=( 1.0 * v_r2_3) + (-1.0 * v_r3_3)

# Species:   id = R4, name = R4, affected by kineticLaw

init R4=0.0
dR4/dt=(-1.0 * v_r2_4) + ( 1.0 * v_r4_4) + (-1.0 * v_r5_4) + (-1.0 * v_r7_4) + (-1.0 * v_r13_4) + ( 1.0 * v_r16_4)

# Species:   id = R4_Arr, name = R4_Arr, affected by kineticLaw

init R4_Arr=0.0
dR4_Arr/dt=( 1.0 * v_r5_4) + (-1.0 * v_r6_4)

# Species:   id = R4_G, name = R4_G, affected by kineticLaw

init R4_G=0.0
dR4_G/dt=( 1.0 * v_r14_4) + (-1.0 * v_r15_4)

# Species:   id = R4_G_GTP, name = R4_G_GTP, affected by kineticLaw

init R4_G_GTP=0.0
dR4_G_GTP/dt=( 1.0 * v_r15_4) + (-1.0 * v_r16_4)

# Species:   id = R4_Gt, name = R4_Gt, affected by kineticLaw

init R4_Gt=0.0
dR4_Gt/dt=( 1.0 * v_r13_4) + (-1.0 * v_r14_4)

# Species:   id = R4_RKpost, name = R4_RKpost, affected by kineticLaw

init R4_RKpost=0.0
dR4_RKpost/dt=( 1.0 * v_r3_3) + (-1.0 * v_r4_4)

# Species:   id = R4_RKpre, name = R4_RKpre, affected by kineticLaw

init R4_RKpre=0.0
dR4_RKpre/dt=( 1.0 * v_r2_4) + (-1.0 * v_r3_4)

# Species:   id = R5, name = R5, affected by kineticLaw

init R5=0.0
dR5/dt=(-1.0 * v_r2_5) + ( 1.0 * v_r4_5) + (-1.0 * v_r5_5) + (-1.0 * v_r7_5) + (-1.0 * v_r13_5) + ( 1.0 * v_r16_5)

# Species:   id = R5_Arr, name = R5_Arr, affected by kineticLaw

init R5_Arr=0.0
dR5_Arr/dt=( 1.0 * v_r5_5) + (-1.0 * v_r6_5)

# Species:   id = R5_G, name = R5_G, affected by kineticLaw

init R5_G=0.0
dR5_G/dt=( 1.0 * v_r14_5) + (-1.0 * v_r15_5)

# Species:   id = R5_G_GTP, name = R5_G_GTP, affected by kineticLaw

init R5_G_GTP=0.0
dR5_G_GTP/dt=( 1.0 * v_r15_5) + (-1.0 * v_r16_5)

# Species:   id = R5_Gt, name = R5_Gt, affected by kineticLaw

init R5_Gt=0.0
dR5_Gt/dt=( 1.0 * v_r13_5) + (-1.0 * v_r14_5)

# Species:   id = R5_RKpost, name = R5_RKpost, affected by kineticLaw

init R5_RKpost=0.0
dR5_RKpost/dt=( 1.0 * v_r3_4) + (-1.0 * v_r4_5)

# Species:   id = R5_RKpre, name = R5_RKpre, affected by kineticLaw

init R5_RKpre=0.0
dR5_RKpre/dt=( 1.0 * v_r2_5) + (-1.0 * v_r3_5)

# Species:   id = R6, name = R6, affected by kineticLaw

init R6=0.0
dR6/dt=(-1.0 * v_r2_6) + ( 1.0 * v_r4_6) + (-1.0 * v_r5_6) + (-1.0 * v_r7_6) + (-1.0 * v_r13_6) + ( 1.0 * v_r16_6)

# Species:   id = R6_Arr, name = R6_Arr, affected by kineticLaw

init R6_Arr=0.0
dR6_Arr/dt=( 1.0 * v_r5_6) + (-1.0 * v_r6_6)

# Species:   id = R6_G, name = R6_G, affected by kineticLaw

init R6_G=0.0
dR6_G/dt=( 1.0 * v_r14_6) + (-1.0 * v_r15_6)

# Species:   id = R6_G_GTP, name = R6_G_GTP, affected by kineticLaw

init R6_G_GTP=0.0
dR6_G_GTP/dt=( 1.0 * v_r15_6) + (-1.0 * v_r16_6)

# Species:   id = R6_Gt, name = R6_Gt, affected by kineticLaw

init R6_Gt=0.0
dR6_Gt/dt=( 1.0 * v_r13_6) + (-1.0 * v_r14_6)

# Species:   id = R6_RKpost, name = R6_RKpost, affected by kineticLaw

init R6_RKpost=0.0
dR6_RKpost/dt=( 1.0 * v_r3_5) + (-1.0 * v_r4_6)

# Species:   id = R6_RKpre, name = R6_RKpre, affected by kineticLaw

init R6_RKpre=0.0
dR6_RKpre/dt=( 1.0 * v_r2_6)

# Species:   id = RGS, name = RGS, affected by kineticLaw

init RGS=100000.0
dRGS/dt=(-1.0 * v_r22) + ( 1.0 * v_r23) + (-1.0 * v_r24) + ( 1.0 * v_r25)

# Species:   id = RGS_Ga_GTP_a_PDE_a_Ga_GTP, name = RGS_Ga_GTP_a_PDE_a_Ga_GTP, affected by kineticLaw

par RGS_Ga_GT=0.0
aux RGS_Ga_GT=RGS_Ga_GT
dRGS_Ga_GT/dt=( 1.0 * v_r22) + (-1.0 * v_r23)

# Species:   id = RGS_PDE_a_Ga_GTP, name = RGS_PDE_a_Ga_GTP, affected by kineticLaw

par RGS_PDE_a=0.0
aux RGS_PDE_a=RGS_PDE_a
dRGS_PDE_a/dt=( 1.0 * v_r24) + (-1.0 * v_r25)

# Species:   id = RK, name = RK, affected by kineticLaw

init RK=580.0
dRK/dt=(-1.0 * v_r2_0) + (-1.0 * v_r2_1) + (-1.0 * v_r2_2) + (-1.0 * v_r2_3) + (-1.0 * v_r2_4) + (-1.0 * v_r2_5) + (-1.0 * v_r2_6) + ( 1.0 * v_r4_1) + ( 1.0 * v_r4_2) + ( 1.0 * v_r4_3) + ( 1.0 * v_r4_4) + ( 1.0 * v_r4_5) + ( 1.0 * v_r4_6) + (-1.0 * v_r31)

# Species:   id = R_Gt, name = R_Gt, affected by kineticLaw

init R_Gt=1847500.0
dR_Gt/dt=(-1.0 * v_rstprec) + ( 1.0 * v_GtRpre)

# Species:   id = RecR_Ca, name = RecR_Ca, affected by kineticLaw

init RecR_Ca=510930.0
dRecR_Ca/dt=( 1.0 * v_r30) + (-1.0 * v_r31)

# Species:   id = RecR_Ca_RK, name = RecR_Ca_RK, affected by kineticLaw

par RecR_Ca_R=199420.0
aux RecR_Ca_R=RecR_Ca_R
dRecR_Ca_R/dt=( 1.0 * v_r31)

# Species:   id = RecT, name = RecT, affected by kineticLaw

init RecT=9289650.0
dRecT/dt=(-1.0 * v_r30)

# Species:   id = cGMP, name = cGMP, affected by kineticLaw

init cGMP=6.4944
dcGMP/dt=(1/(cytosol))*(( 1.0 * v_r36) + (-1.0 * v_r37))


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if (t  <=  predur) then (premag) else (0)

piecew2=if ((t  >=  del) && (t  <=  (del+dur))) then (mag) else (0)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

