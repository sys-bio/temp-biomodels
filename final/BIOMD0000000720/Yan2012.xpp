
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Yan2012 - Rb-E2F pathway dynamics with miR449
#
# isDerivedFrom http://identifiers.org/go/GO:0007049
# isDerivedFrom http://identifiers.org/reactome/R-HSA-69206
# isDerivedFrom http://identifiers.org/mamo/MAMO_0000046
# isDerivedFrom http://identifiers.org/taxonomy/40674
# isDerivedFrom http://identifiers.org/biomodels.db/BIOMD0000000318
# is http://identifiers.org/biomodels.db/MODEL1811080001
# is http://identifiers.org/biomodels.db/BIOMD0000000720
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = self_promoting_michaelis_menten, name = self promoting michaelis menten
self_prom(k,M,J1,P,J2)=(k*M/(J1+M)*P/(J2+P))


# FunctionDefinition id = function, name = function
function(k,M,J)=(k*M/(J+M))


# FunctionDefinition id = function_1, name = function_1
function_(k,M1,M2,J)=(k*M1*M2/(J+M2))


# Compartment: id = compartment, name = cell, constant
par compartme=1.0

# Parameter:   id =  ksE1, name = ksE1, constant
par ksE1=0.4

# Parameter:   id =  JM, name = JM, constant
par JM=0.15

# Parameter:   id =  JE, name = JE, constant
par JE=0.15

# Parameter:   id =  ksE2, name = ksE2, constant
par ksE2=0.003

# Parameter:   id =  kP1, name = kP1, constant
par kP1=18.0

# Parameter:   id =  JCD, name = JCD, constant
par JCD=0.92

# Parameter:   id =  kP2, name = kP2, constant
par kP2=18.0

# Parameter:   id =  JCE, name = JCE, constant
par JCE=0.92

# Parameter:   id =  kdE, name = kdE, constant
par kdE=0.25

# Parameter:   id =  kRE, name = kRE, constant
par kRE=180.0

# Parameter:   id =  ksmiR, name = ksmiR, constant
par ksmiR=1.4

# Parameter:   id =  kdmiR, name = kdmiR, constant
par kdmiR=0.02

# Parameter:   id =  ksM, name = ksM, constant
par ksM=1.0

# Parameter:   id =  JS, name = JS, constant
par JS=0.5

# Parameter:   id =  kdM1, name = kdM1, constant
par kdM1=0.7

# Parameter:   id =  kdM2, name = kdM2, constant
par kdM2=0.6

# Parameter:   id =  ksCD1, name = ksCD1, constant
par ksCD1=0.45

# Parameter:   id =  ksCD2, name = ksCD2, constant
par ksCD2=0.03

# Parameter:   id =  kdCD1, name = kdCD1, constant
par kdCD1=1.5

# Parameter:   id =  kdCD2, name = kdCD2, constant
par kdCD2=1.0

# Parameter:   id =  ksCE, name = ksCE, constant
par ksCE=0.35

# Parameter:   id =  kdCE1, name = kdCE1, constant
par kdCE1=1.5

# Parameter:   id =  kdCE2, name = kdCE2, constant
par kdCE2=0.7

# Parameter:   id =  ksR, name = ksR, constant
par ksR=0.18

# Parameter:   id =  kP, name = kP, constant
par kP=3.6

# Parameter:   id =  JP, name = JP, constant
par JP=0.01

# Parameter:   id =  kdR, name = kdR, constant
par kdR=0.06

# Parameter:   id =  kdP, name = kdP, constant
par kdP=0.06

# Parameter:   id =  kdRE, name = kdRE, constant
par kdRE=0.03

# Reaction: id = reaction, name = reaction

reaction=compartme*self_prom(ksE1, Myc, JM, E2F, JE)

# Reaction: id = reaction_1, name = reaction_1

reaction_=compartme*function(ksE2, Myc, JM)

# Reaction: id = reaction_2, name = reaction_2

reactio_1=compartme*function_(kP1, CycD, RE, JCD)

# Reaction: id = reaction_3, name = reaction_3

reactio_2=compartme*function_(kP2, CycE, RE, JCE)

# Reaction: id = reaction_4, name = reaction_4

reactio_3=compartme*kdE*E2F

# Reaction: id = reaction_5, name = reaction_5

reactio_4=compartme*kRE*E2F*RB

# Reaction: id = reaction_6, name = reaction_6

reactio_5=compartme*function(ksmiR, E2F, JE)

# Reaction: id = reaction_7, name = reaction_7

reactio_6=compartme*kdmiR*miR449

# Reaction: id = reaction_8, name = reaction_8

reactio_7=compartme*function_(kdM2, miR449, Myc, JM)

# Reaction: id = reaction_9, name = reaction_9

reactio_8=compartme*function_(kdCD2, miR449, CycD, JCD)

# Reaction: id = reaction_10, name = reaction_10

reactio_9=compartme*function_(kdCE2, miR449, CycE, JCE)

# Reaction: id = reaction_11, name = reaction_11

reacti_10=compartme*function(ksM, S, JS)

# Reaction: id = reaction_12, name = reaction_12

reacti_11=compartme*kdM1*Myc

# Reaction: id = reaction_13, name = reaction_13

reacti_12=compartme*function(ksCD1, S, JS)

# Reaction: id = reaction_14, name = reaction_14

reacti_13=compartme*function(ksCD2, Myc, JM)

# Reaction: id = reaction_15, name = reaction_15

reacti_14=compartme*kdCD1*CycD

# Reaction: id = reaction_16, name = reaction_16

reacti_15=compartme*function(ksCE, E2F, JE)

# Reaction: id = reaction_17, name = reaction_17

reacti_16=compartme*kdCE1*CycE

# Reaction: id = reaction_18, name = reaction_18

reacti_17=compartme*Constant_(ksR)

# Reaction: id = reaction_19, name = reaction_19

reacti_18=compartme*function(kP, PRB, JP)

# Reaction: id = reaction_20, name = reaction_20

reacti_19=compartme*kdR*RB

# Reaction: id = reaction_21, name = reaction_21

reacti_20=compartme*function_(kP1, CycD, RB, JCD)

# Reaction: id = reaction_22, name = reaction_22

reacti_21=compartme*function_(kP2, CycE, RB, JCE)

# Reaction: id = reaction_23, name = reaction_23

reacti_22=compartme*kdP*PRB

# Reaction: id = reaction_24, name = reaction_24

reacti_23=compartme*kdRE*RE

# Species:   id = E2F, name = E2F, affected by kineticLaw

init E2F=1.2
dE2F/dt=(1/(compartme))*(( 1.0 * reaction) + ( 1.0 * reaction_) + ( 1.0 * reactio_1) + ( 1.0 * reactio_2) + (-1.0 * reactio_3) + (-1.0 * reactio_4))

# Species:   id = Myc, name = Myc, affected by kineticLaw

init Myc=0.0
dMyc/dt=(1/(compartme))*((-1.0 * reactio_7) + ( 1.0 * reacti_10) + (-1.0 * reacti_11))

# Species:   id = CycD, name = CycD, affected by kineticLaw

init CycD=0.0
dCycD/dt=(1/(compartme))*((-1.0 * reactio_8) + ( 1.0 * reacti_12) + ( 1.0 * reacti_13) + (-1.0 * reacti_14))

# Species:   id = RE, name = RE, affected by kineticLaw

init RE=0.0
dRE/dt=(1/(compartme))*((-1.0 * reactio_1) + (-1.0 * reactio_2) + ( 1.0 * reactio_4) + (-1.0 * reacti_23))

# Species:   id = CycE, name = CycE, affected by kineticLaw

init CycE=0.0
dCycE/dt=(1/(compartme))*((-1.0 * reactio_9) + ( 1.0 * reacti_15) + (-1.0 * reacti_16))

# Species:   id = RB, name = RB, affected by kineticLaw

init RB=0.55
dRB/dt=(1/(compartme))*((-1.0 * reactio_4) + ( 1.0 * reacti_17) + ( 1.0 * reacti_18) + (-1.0 * reacti_19) + (-1.0 * reacti_20) + (-1.0 * reacti_21))

# Species:   id = miR449, name = miR449, affected by kineticLaw

init miR449=0.0
dmiR449/dt=(1/(compartme))*(( 1.0 * reactio_5) + (-1.0 * reactio_6) + (-1.0 * reactio_7) + (-1.0 * reactio_8) + (-1.0 * reactio_9))

# Species:   id = S, name = S, constant
par S=3.0


# Species:   id = PRB, name = PRB, affected by kineticLaw

init PRB=0.0
dPRB/dt=(1/(compartme))*(( 1.0 * reactio_1) + ( 1.0 * reactio_2) + (-1.0 * reacti_18) + ( 1.0 * reacti_20) + ( 1.0 * reacti_21) + (-1.0 * reacti_22))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

