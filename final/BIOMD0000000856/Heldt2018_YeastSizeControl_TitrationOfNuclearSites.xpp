
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Heldt2018 - Budding yeast size control by titration of nuclear sites
#
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Expression_of_size_dependent_gene, name = Expression of size-dependent gene
Expressio(kSy,GDTM,GCN,GDt)=(kSy*GDTM*GCN/GDt)


# FunctionDefinition id = rSyCln, name = rSyCln
rSyCln(kSyCln,GDTM,GCN,GDt,SBF,SBFt,SBFu)=(kSyCln*GDTM*GCN/GDt*SBF/SBFt*SBFu/SBFt)


# FunctionDefinition id = rPhWhi, name = rPhWhi
rPhWhi(kPhWhiCln,CLN,Substrate)=(kPhWhiCln*CLN*Substrate)


# FunctionDefinition id = rAcCdc, name = rAcCdc
rAcCdc(kAcCdcClb,CLB,Substrate,jCdc)=(kAcCdcClb*CLB*Substrate/(jCdc+Substrate))


# FunctionDefinition id = rInCdc, name = rInCdc
rInCdc(kInCdc,Substrate,jCdc)=(kInCdc*Substrate/(jCdc+Substrate))


# FunctionDefinition id = rPhSbf, name = rPhSbf
rPhSbf(kPhSbfClb,CLB,SBFu)=(kPhSbfClb*CLB*SBFu)


# FunctionDefinition id = rSyClb, name = rSyClb
rSyClb(kSyClb,kSyClbClb,CLB,jSyClb,GDTM,GCN,GDt)=((kSyClb+kSyClbClb*CLB/(jSyClb+CLB))*GDTM*GCN/GDt)


# FunctionDefinition id = rDeClb, name = rDeClb
rDeClb(kDeClb,kDeClbCdh,CDHa,Substrate)=((kDeClb+kDeClbCdh*CDHa)*Substrate)


# FunctionDefinition id = rInCdh, name = rInCdh
rInCdh(kInCdhCln,CLN,kInCdhClb,CLB,Substrate,jCdh)=((kInCdhCln*CLN+kInCdhClb*CLB)*Substrate/(jCdh+Substrate))


# FunctionDefinition id = rSyWhi, name = rSyWhi
rSyWhi(GRd,kSyWhi,GITM,GWt,GIt)=(GRd*kSyWhi*GITM*GWt/GIt)


# FunctionDefinition id = rPhWhip, name = rPhWhip
rPhWhip(kPhWhipCln3,CLN3,kPhWhipCln,CLN,Substrate)=((kPhWhipCln3*CLN3+kPhWhipCln*CLN)*Substrate)


# FunctionDefinition id = rAcCdh, name = rAcCdh
rAcCdh(kAcCdh,kAcCdhCdc,CDCa,Substrate,jCdh)=((kAcCdh+kAcCdhCdc*CDCa)*Substrate/(jCdh+Substrate))

# Compartment: id = tV, name = tV, defined by a Rule
# Compartment: id = mV, name = mV, defined by a Rule
# Compartment: id = dV, name = dV, defined by a Rule

# Parameter:   id =  GDt, name = GDt
par GDt=500.0

# Parameter:   id =  GCN, name = GCN
par GCN=1.0

# Parameter:   id =  GWt, name = GWt
par GWt=1.0

# Parameter:   id =  GCt, name = GCt
par GCt=1.0

# Parameter:   id =  StartThr, name = StartThr, constant
par StartThr=0.3

# Parameter:   id =  MitosisThr, name = MitosisThr, constant
par MitosisTh=0.2

# Parameter:   id =  GRm, name = GRm
par GRm=1.0

# Parameter:   id =  GRd, name = GRd
par GRd=0.0

# Parameter:   id =  kSyVo, name = kSyVo, constant
par kSyVo=0.042

# Parameter:   id =  kSyTm, name = kSyTm, constant
par kSyTm=2.1

# Parameter:   id =  kAsGiTm, name = kAsGiTm, constant
par kAsGiTm=10.0

# Parameter:   id =  kAsGdTm, name = kAsGdTm, constant
par kAsGdTm=1.0

# Parameter:   id =  kDsGiTm, name = kDsGiTm, constant
par kDsGiTm=0.1

# Parameter:   id =  kDsGdTm, name = kDsGdTm, constant
par kDsGdTm=1.0

# Parameter:   id =  kSyCln3, name = kSyCln3, constant
par kSyCln3=1.5

# Parameter:   id =  kDeCln3, name = kDeCln3, constant
par kDeCln3=1.0

# Parameter:   id =  kSyCln, name = kSyCln, constant
par kSyCln=8.0

# Parameter:   id =  kDeCln, name = kDeCln, constant
par kDeCln=1.0

# Parameter:   id =  kSyClb, name = kSyClb, constant
par kSyClb=0.01

# Parameter:   id =  kSyClbClb, name = kSyClbClb, constant
par kSyClbClb=0.3

# Parameter:   id =  jSyClb, name = jSyClb, constant
par jSyClb=0.3

# Parameter:   id =  kDeClb, name = kDeClb, constant
par kDeClb=0.01

# Parameter:   id =  kDeClbCdh, name = kDeClbCdh, constant
par kDeClbCdh=2.0

# Parameter:   id =  kSyWhi, name = kSyWhi, constant
par kSyWhi=0.02

# Parameter:   id =  kPhWhiCln3, name = kPhWhiCln3, constant
par kPhWhiCln=1.0

# Parameter:   id =  kPhWhiCln, name = kPhWhiCln, constant
par kPhWhiC_1=100.0

# Parameter:   id =  kDpWhi, name = kDpWhi, constant
par kDpWhi=1.0

# Parameter:   id =  kAsWhiSbf, name = kAsWhiSbf, constant
par kAsWhiSbf=1.0

# Parameter:   id =  kPhSbfClb, name = kPhSbfClb, constant
par kPhSbfClb=5.0

# Parameter:   id =  kDpSbf, name = kDpSbf, constant
par kDpSbf=0.2

# Parameter:   id =  kAcCdh, name = kAcCdh, constant
par kAcCdh=0.01

# Parameter:   id =  kAcCdhCdc, name = kAcCdhCdc, constant
par kAcCdhCdc=2.0

# Parameter:   id =  kInCdhCln, name = kInCdhCln, constant
par kInCdhCln=0.125

# Parameter:   id =  kInCdhClb, name = kInCdhClb, constant
par kInCdhClb=2.0

# Parameter:   id =  jCdh, name = jCdh, constant
par jCdh=0.001

# Parameter:   id =  kAcCdcClb, name = kAcCdcClb, constant
par kAcCdcClb=0.5

# Parameter:   id =  kInCdc, name = kInCdc, constant
par kInCdc=0.25

# Parameter:   id =  jCdc, name = jCdc, constant
par jCdc=0.001

# Parameter:   id =  GIt, name = GIt
par GIt=1.0

# Parameter:   id =  kSySbf, name = kSySbf, defined by a Rule

# Parameter:   id =  kSyCdh, name = kSyCdh, defined by a Rule

# Parameter:   id =  kSyCdc, name = kSyCdc, defined by a Rule

# Parameter:   id =  rV, name = rV, defined by a Rule

# Parameter:   id =  NSt, name = NSt
par NSt=1.0

# Parameter:   id =  kPhWhipCln3, name = kPhWhipCln3, constant
par kPhWhipCl=1.0

# Parameter:   id =  kPhWhipCln, name = kPhWhipCln, constant
par kPhWhip_1=3.0

# Parameter:   id =  kAsCln3Whi, name = kAsCln3Whi, constant
par kAsCln3Wh=100.0

# Parameter:   id =  kDsCln3Whi, name = kDsCln3Whi, constant
par kDsCln3Wh=0.1

# assignmentRule: variable = WHIt
WHIt=(WHI/tV+WHIp/tV+CLN3WHISB/tV+WHISBF/tV+WHIpSBF/tV+WHIn/tV)*tV
aux WHIt=WHIt

# assignmentRule: variable = tV
tV=mV+dV
aux tV=tV

# assignmentRule: variable = GI
GI=GIt-GITM
aux GI=GI

# assignmentRule: variable = SBF
SBF=(NSt/tV-WHISBF/tV-CLN3WHISB/tV-WHIpSBF/tV+1E-12)*tV
aux SBF=SBF

# assignmentRule: variable = SBFt
SBFt=(SBF/tV+WHISBF/tV+CLN3WHISB/tV+WHIpSBF/tV)*tV
aux SBFt=SBFt

# assignmentRule: variable = GD
GD=GDt-GDTM
aux GD=GD

# assignmentRule: variable = active_SBF
active_SB=SBF/tV*SBFu/tV/SBFt/tV*tV
aux active_SB=active_SB

# assignmentRule: variable = CLN3t
CLN3t=(CLN3/tV+CLN3WHISB/tV)*tV
aux CLN3t=CLN3t

# assignmentRule: variable = TMt
TMt=(TM/tV+GDTM/tV+GITM/tV)*tV
aux TMt=TMt

# assignmentRule: variable = kSyCdh
kSyCdh=1*kSyVo
aux kSyCdh=kSyCdh

# assignmentRule: variable = rV
rV=dV/tV
aux rV=rV

# assignmentRule: variable = kSyCdc
kSyCdc=1*kSyVo
aux kSyCdc=kSyCdc

# assignmentRule: variable = kSySbf
kSySbf=1*kSyVo
aux kSySbf=kSySbf

# rateRule: variable = mV
init mV=1.2
dmV/dt=GRm*kSyVo*GDTM*GCN/GDt

# rateRule: variable = dV
init dV=0.0
ddV/dt=GRd*kSyVo*GDTM*GCN/GDt

# Reaction: id = Synthesis_of_transcription_machninery, name = Synthesis of transcription machninery

Synthesis=tV*Expressio(kSyTm, GDTM/tV, GCN, GDt)

# Reaction: id = Association_dissociation_of_TM_and_size_independent_genes, name = Association/dissociation of TM and size-independent genes

Associati=tV*(kAsGiTm*TM/tV*GI/tV-kDsGiTm*GITM/tV)

# Reaction: id = Association_dissociation_of_TM_and_size_dependent_genes, name = Association/dissociation of TM and size-dependent genes

Associa_1=tV*(kAsGdTm*TM/tV*GD/tV-kDsGdTm*GDTM/tV)

# Reaction: id = Synthesis_of_Cln3, name = Synthesis of Cln3

Synthes_1=tV*Expressio(kSyCln3, GDTM/tV, GCt, GDt)

# Reaction: id = Degradation_of_Cln3, name = Degradation of Cln3

Degradati=kDeCln3*CLN3

# Reaction: id = Phosphorylation_of_SBF, name = Phosphorylation of SBF

Phosphory=tV*rPhSbf(kPhSbfClb, CLB/tV, SBFu/tV)

# Reaction: id = Dephosphorylation_of_SBF, name = Dephosphorylation of SBF

Dephospho=kDpSbf*SBFp

# Reaction: id = Synthesis_of_Cln1_2, name = Synthesis of Cln1/2

Synthes_2=tV*rSyCln(kSyCln, GDTM/tV, GCN, GDt, SBF/tV, SBFt/tV, SBFu/tV)

# Reaction: id = Degradation_of_Cln1_2, name = Degradation of Cln1/2

Degrada_1=kDeCln*CLN

# Reaction: id = Synthesis_of_Cdh1, name = Synthesis of Cdh1

Synthes_3=tV*Expressio(kSyCdh, GDTM/tV, GCN, GDt)

# Reaction: id = Synthesis_of_Cdc20, name = Synthesis of Cdc20

Synthes_4=tV*Expressio(kSyCdc, GDTM/tV, GCN, GDt)

# Reaction: id = Activation_of_APC_Cdc20, name = Activation of APC^Cdc20

Activatio=tV*rAcCdc(kAcCdcClb, CLB/tV, CDCi/tV, jCdc)

# Reaction: id = Inactivation_of_APC_C_Cdc20, name = Inactivation of APC/C^Cdc20

Inactivat=tV*rInCdc(kInCdc, CDCa/tV, jCdc)

# Reaction: id = Activation_of_APC_C_Cdh1, name = Activation of APC/C^Cdh1

Activat_1=tV*rAcCdh(kAcCdh, kAcCdhCdc, CDCa/tV, CDHi/tV, jCdh)

# Reaction: id = Inactivation_of_APC_C_Cdh1, name = Inactivation of APC/C^Cdh1

Inactiv_1=tV*rInCdh(kInCdhCln, CLN/tV, kInCdhClb, CLB/tV, CDHa/tV, jCdh)

# Reaction: id = Synthesis_of_Clb1_2, name = Synthesis of Clb1/2

Synthes_5=tV*rSyClb(kSyClb, kSyClbClb, CLB/tV, jSyClb, GDTM/tV, GCN, GDt)

# Reaction: id = Degradation_of_Clb1_2, name = Degradation of Clb1/2

Degrada_2=tV*rDeClb(kDeClb, kDeClbCdh, CDHa/tV, CLB/tV)

# Reaction: id = Synthesis_of_Whi5, name = Synthesis of Whi5

Synthes_6=tV*rSyWhi(GRd, kSyWhi, GITM/tV, GWt, GIt)

# Reaction: id = Association_dissociation_of_Cln3_and_Whi5_SBF, name = Association/dissociation of Cln3 and Whi5:SBF

Associa_2=tV*(kAsCln3Wh*CLN3/tV*WHISBF/tV-kDsCln3Wh*CLN3WHISB/tV)

# Reaction: id = Association_of_Whi5_and_SBF, name = Association of Whi5 and SBF

Associa_3=kAsWhiSbf*WHI*SBF/tV

# Reaction: id = Phosphorylation_of_free_Whi5, name = Phosphorylation of free Whi5

Phospho_1=tV*rPhWhi(kPhWhiC_1, CLN/tV, WHI/tV)

# Reaction: id = Dephosphorylation_of_free_Whi5, name = Dephosphorylation of free Whi5

Dephosp_1=kDpWhi*WHIp

# Reaction: id = Phosphorylation_of_Whi5_in_Cln3_Whi5_SBF_complexes, name = Phosphorylation of Whi5 in Cln3:Whi5:SBF complexes

Phospho_2=kPhWhiCln*CLN3WHISB

# Reaction: id = Degradation_of_Cln3_in_Cln3_Whi5_SBF_complexes, name = Degradation of Cln3 in Cln3:Whi5:SBF complexes

Degrada_3=kDeCln3*CLN3WHISB

# Reaction: id = Dephosphorylation_of_hypo_phosphorylated_Whi5_in_Whi5_SBF_complexes, name = Dephosphorylation of hypo-phosphorylated Whi5 in Whi5:SBF complexes

Dephosp_2=kDpWhi*WHIpSBF

# Reaction: id = Hyper_phosphorylation_of_Whi5_in_hypo_phosphorylated_Whi5_SBF_complexes, name = Hyper-phosphorylation of Whi5 in hypo-phosphorylated Whi5:SBF complexes

Hyper_pho=tV*rPhWhip(kPhWhipCl, CLN3/tV, kPhWhip_1, CLN/tV, WHIpSBF/tV)

# Species:   id = TM, name = TM, affected by kineticLaw
# Species is changed by 1 event(s)
init TM=0.0
dTM/dt=( 1.0 * Synthesis) + (-1.0 * Associati) + (-1.0 * Associa_1)

# Species:   id = GI, name = GI, involved in a rule 

# Species:   id = GD, name = GD, involved in a rule 

# Species:   id = GITM, name = GITM, affected by kineticLaw
# Species is changed by 1 event(s)
init GITM=1.0
dGITM/dt=( 1.0 * Associati)

# Species:   id = GDTM, name = GDTM, affected by kineticLaw
# Species is changed by 1 event(s)
init GDTM=60.0
dGDTM/dt=( 1.0 * Associa_1)

# Species:   id = CLN3, name = CLN3, affected by kineticLaw
# Species is changed by 1 event(s)
init CLN3=0.0
dCLN3/dt=( 1.0 * Synthes_1) + (-1.0 * Degradati) + (-1.0 * Associa_2) + ( 1.0 * Phospho_2)

# Species:   id = WHI, name = WHI, affected by kineticLaw
# Species is changed by 1 event(s)
init WHI=4.0
dWHI/dt=(-1.0 * Associa_3) + (-1.0 * Phospho_1) + ( 1.0 * Dephosp_1)

# Species:   id = WHIp, name = WHIp, affected by kineticLaw
# Species is changed by 1 event(s)
init WHIp=0.1
dWHIp/dt=( 1.0 * Phospho_1) + (-1.0 * Dephosp_1) + ( 1.0 * Hyper_pho)

# Species:   id = SBF, name = SBF, involved in a rule 

# Species:   id = WHISBF, name = WHISBF, affected by kineticLaw
# Species is changed by 1 event(s)
init WHISBF=0.66
dWHISBF/dt=(-1.0 * Associa_2) + ( 1.0 * Associa_3) + ( 1.0 * Degrada_3) + ( 1.0 * Dephosp_2)

# Species:   id = WHIn, name = WHIn, affected by kineticLaw
# Species is changed by 1 event(s)
init WHIn=0.0
dWHIn/dt=( 1.0 * Synthes_6)

# Species:   id = WHIt, name = WHIt, involved in a rule 

# Species:   id = SBFt, name = SBFt, involved in a rule 

# Species:   id = SBFu, name = SBFu, affected by kineticLaw
# Species is changed by 2 event(s)
init SBFu=1.0000000000012
dSBFu/dt=(-1.0 * Phosphory) + ( 1.0 * Dephospho)

# Species:   id = SBFp, name = SBFp, affected by kineticLaw
# Species is changed by 2 event(s)
init SBFp=0.0
dSBFp/dt=( 1.0 * Phosphory) + (-1.0 * Dephospho)

# Species:   id = CLN, name = CLN, affected by kineticLaw
# Species is changed by 1 event(s)
init CLN=0.0
dCLN/dt=( 1.0 * Synthes_2) + (-1.0 * Degrada_1)

# Species:   id = CLB, name = CLB, affected by kineticLaw
# Species is changed by 1 event(s)
init CLB=0.0
dCLB/dt=( 1.0 * Synthes_5) + (-1.0 * Degrada_2)

# Species:   id = CDHa, name = CDHa, affected by kineticLaw
# Species is changed by 1 event(s)
init CDHa=1.2
dCDHa/dt=( 1.0 * Activat_1) + (-1.0 * Inactiv_1)

# Species:   id = CDHi, name = CDHi, affected by kineticLaw
# Species is changed by 1 event(s)
init CDHi=0.0
dCDHi/dt=( 1.0 * Synthes_3) + (-1.0 * Activat_1) + ( 1.0 * Inactiv_1)

# Species:   id = CDCa, name = CDCa, affected by kineticLaw
# Species is changed by 1 event(s)
init CDCa=0.0
dCDCa/dt=( 1.0 * Activatio) + (-1.0 * Inactivat)

# Species:   id = CDCi, name = CDCi, affected by kineticLaw
# Species is changed by 1 event(s)
init CDCi=1.2
dCDCi/dt=( 1.0 * Synthes_4) + (-1.0 * Activatio) + ( 1.0 * Inactivat)

# Species:   id = TMt, name = TMt, involved in a rule 

# Species:   id = active_SBF, name = active SBF, involved in a rule 

# Species:   id = CLN3WHISBF, name = CLN3WHISBF, affected by kineticLaw
# Species is changed by 1 event(s)
par CLN3WHISB=0.17
aux CLN3WHISB=CLN3WHISB
dCLN3WHISB/dt=( 1.0 * Associa_2) + (-1.0 * Phospho_2) + (-1.0 * Degrada_3)

# Species:   id = WHIpSBF, name = WHIpSBF, affected by kineticLaw
# Species is changed by 1 event(s)
init WHIpSBF=0.17
dWHIpSBF/dt=( 1.0 * Phospho_2) + (-1.0 * Dephosp_2) + (-1.0 * Hyper_pho)

# Species:   id = CLN3t, name = CLN3t, involved in a rule 

# event : Start
Start=if ((CLN/tV) >= StartThr) then (1.5) else (0.2)
global 1 {Start - 1.1} {GRm=0;GRd=1;GCN=GCN*2;GCt=GCt*2;GWt=GWt*2;GIt=GIt*2;GDt=GDt*2;NSt=NSt*2;SBFp=SBFp/tV*2*tV;SBFu=SBFu/tV*2*tV}

# event : Division
Division=if ((CLN/tV+CLB/tV) <= MitosisTh) then (1.5) else (0.2)
global 1 {Division - 1.1} {GRm=1;GRd=0;GCN=GCN/2;GCt=GCt/2;GWt=GWt/2;mV=dV;CLN=CLN/tV*rV*tV;CLB=CLB/tV*rV*tV;CLN3=CLN3/tV*rV*tV;dV=0;GDTM=GDTM/tV*rV*tV;GDt=GDt/2;GITM=GITM/tV*rV*tV;GIt=GIt/2;TM=TM/tV*rV*tV;WHI=(WHI/tV*rV+WHIn/tV)*tV;WHIp=WHIp/tV*rV*tV;WHISBF=WHISBF/tV*rV*tV;WHIn=0*tV;SBFp=SBFp/tV/2*tV;SBFu=SBFu/tV/2*tV;CDCa=CDCa/tV*rV*tV;CDCi=CDCi/tV*rV*tV;CDHa=CDHa/tV*rV*tV;CDHi=CDHi/tV*rV*tV;NSt=NSt/2;CLN3WHISBF=CLN3WHISB/tV*rV*tV;WHIpSBF=WHIpSBF/tV*rV*tV}

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

