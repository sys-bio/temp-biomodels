
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = LeBeau1999 - IP3-dependent intracellular calcium oscillations due to agonist stimulation from Cholecytokinin
#
# isDescribedBy http://identifiers.org/pubmed/10352035
# is http://identifiers.org/biomodels.db/MODEL9200487367
# is http://identifiers.org/biomodels.db/BIOMD0000000965
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_Open_to_Inactivated1, name = Function for Open_to_Inactivated1
Function_(O,compartment,k2)=(k2*O/compartment)


# FunctionDefinition id = Function_for_Inactivated1_to_Inactivated2, name = Function for Inactivated1_to_Inactivated2
Functio_1(I1,compartment,k4)=(k4*I1/compartment)


# FunctionDefinition id = Function_for_Jrel, name = Function for Jrel
Functio_2(O,compartment,kflux)=(kflux*O^4/compartment)


# FunctionDefinition id = Function_for_Inactivated1_to_Shut, name = Function for Inactivated1_to_Shut
Functio_3(I1,compartment,k3)=(k3*I1/compartment)


# FunctionDefinition id = Function_for_Jpump, name = Function for Jpump
Functio_4(Kp,Vp,c,compartment)=(Vp*c^2/(Kp^2+c^2)/compartment)


# FunctionDefinition id = Function_for_Jinflux, name = Function for Jinflux
Functio_5(Jleak,compartment)=(Jleak/compartment)


# FunctionDefinition id = Function_for_Inactivated2_to_Shut, name = Function for Inactivated2_to_Shut
Functio_6(I2,compartment,k5)=(k5*I2/compartment)


# FunctionDefinition id = Function_for_Shut_to_Open, name = Function for Shut_to_Open
Functio_7(O,S,compartment,k1,kminus1,p)=((k1*p*S-kminus1*O)/compartment)


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  k1, name = k1, defined by a Rule

# Parameter:   id =  alpha1, name = alpha1, constant
par alpha1=40.0

# Parameter:   id =  beta1, name = beta1, constant
par beta1=0.8

# Parameter:   id =  k4, name = k4, defined by a Rule

# Parameter:   id =  alpha4, name = alpha4, constant
par alpha4=0.06

# Parameter:   id =  p, name = p, defined by a Rule

# Parameter:   id =  beta4, name = beta4, constant
par beta4=0.01

# Parameter:   id =  T, name = time, defined by a Rule

# Parameter:   id =  time_constant, name = time_constant, constant
par time_cons=100.0

# Parameter:   id =  kflux, name = kflux, constant
par kflux=22.0

# Parameter:   id =  Vp, name = Vp, constant
par Vp=0.2

# Parameter:   id =  k3, name = k3, constant
par k3=0.5

# Parameter:   id =  k2, name = k2, constant
par k2=0.5

# Parameter:   id =  k_1, name = k-1, constant
par k_1=0.88

# Parameter:   id =  Jinflux_0, name = Jinflux, constant
par Jinflux_0=0.025

# Parameter:   id =  Kp, name = Kp, constant
par Kp=0.54

# Parameter:   id =  k5, name = k5, constant
par k5=0.02

# assignmentRule: variable = S
S=1-(O+I1+I2)
aux S=S

# assignmentRule: variable = k1
k1=alpha1*c^3/(beta1^3+c^3)
aux k1=k1

# assignmentRule: variable = p
p=0.6*(1-exp((-T_renamed)/time_cons))
aux p=p

# assignmentRule: variable = k4
k4=alpha4*p/(beta4+p)
aux k4=k4

# rateRule: variable = T
init T_renamed=0.0
dT_renamed/dt=1

# Reaction: id = Shut_to_Open, name = Shut_to_Open

Shut_to_O=compartme*Functio_7(O, S, compartme, k1, k_1, p)

# Reaction: id = Open_to_Inactivated1, name = Open_to_Inactivated1

Open_to_I=compartme*Function_(O, compartme, k2)

# Reaction: id = Inactivated1_to_Shut, name = Inactivated1_to_Shut

Inactivat=compartme*Functio_3(I1, compartme, k3)

# Reaction: id = Inactivated1_to_Inactivated2, name = Inactivated1_to_Inactivated2

Inactiv_1=compartme*Functio_1(I1, compartme, k4)

# Reaction: id = Inactivated2_to_Shut, name = Inactivated2_to_Shut

Inactiv_2=compartme*Functio_6(I2, compartme, k5)

# Reaction: id = Jrel, name = Jrel

Jrel=compartme*Functio_2(O, compartme, kflux)

# Reaction: id = Jpump, name = Jpump

Jpump=compartme*Functio_4(Kp, Vp, c, compartme)

# Reaction: id = Jinflux, name = Jinflux

Jinflux=compartme*Functio_5(Jinflux_0, compartme)

# Species:   id = S, name = S, involved in a rule 

# Species:   id = O, name = O, affected by kineticLaw

init O=0.0
dO/dt=(1/(compartme))*(( 1.0 * Shut_to_O) + (-1.0 * Open_to_I))

# Species:   id = I1, name = I1, affected by kineticLaw

init I1=0.0
dI1/dt=(1/(compartme))*(( 1.0 * Open_to_I) + (-1.0 * Inactivat) + (-1.0 * Inactiv_1))

# Species:   id = I2, name = I2, affected by kineticLaw

init I2=1.0
dI2/dt=(1/(compartme))*(( 1.0 * Inactiv_1) + (-1.0 * Inactiv_2))

# Species:   id = c, name = Ca2+, affected by kineticLaw

init c=0.0
dc/dt=(1/(compartme))*(( 1.0 * Jrel) + (-1.0 * Jpump) + ( 1.0 * Jinflux))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

