
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Kronik2008 - Improving alloreactive CTL immunotherapy for malignant gliomas using a simulation model of their interactive dynamics
#
# isDescribedBy http://identifiers.org/pubmed/17823798
# is http://identifiers.org/biomodels.db/MODEL1909090001
# is http://identifiers.org/biomodels.db/BIOMD0000000808
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = Function_for_F_gamma_CTL_Production, name = Function_for_F_gamma_CTL_Production
Function_(a_gamma_C,C)=(a_gamma_C*C)


# FunctionDefinition id = Function_for_F_beta_Tumor_Production, name = Function_for_F_beta_Tumor_Production
Functio_1(a_B_T,T)=(a_B_T*T)


# FunctionDefinition id = Function_for_CTL_Recruitment, name = Function_for_CTL_Recruitment
Functio_2(a_C_M2,M2,T,e_C_M2,a_C_beta,e_C_beta,F_beta)=(a_C_M2*M2*T/(M2*T+e_C_M2)*(a_C_beta+e_C_beta*(1-a_C_beta)/(F_beta+e_C_beta)))


# FunctionDefinition id = Function_for_Tumor_Elimination_CTL, name = Function_for_Tumor_Elimination_CTL
Functio_3(a_T,M1,e_T,C,T,h_T,a_T_beta,e_T_beta,F_beta)=(a_T*M1/(M1+e_T)*C*T/(h_T+T)*(a_T_beta+e_T_beta*(1-a_T_beta)/(F_beta+e_T_beta)))


# FunctionDefinition id = Function_for_Tumor_Growth, name = Function_for_Tumor_Growth
Functio_4(r,T,K)=(r*T*(1-T/K))


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  r, name = r, constant
par r=3.5E-4

# Parameter:   id =  K, name = K, constant
par K=1.0E11

# Parameter:   id =  a_T, name = a_T, constant
par a_T=0.12

# Parameter:   id =  e_T, name = e_T, constant
par e_T=50.0

# Parameter:   id =  a_T_beta, name = a_T_beta, constant
par a_T_beta=0.69

# Parameter:   id =  e_T_beta, name = e_T_beta, constant
par e_T_beta=10000.0

# Parameter:   id =  h_T, name = h_T, constant
par h_T=5.0E8

# Parameter:   id =  a_C_M2, name = a_C_M2, constant
par a_C_M2=4.8E-11

# Parameter:   id =  e_C_M2, name = e_C_M2, constant
par e_C_M2=1.0E14

# Parameter:   id =  a_C_beta, name = a_C_beta, constant
par a_C_beta=0.8

# Parameter:   id =  e_C_beta, name = e_C_beta, constant
par e_C_beta=10000.0

# Parameter:   id =  mu_C, name = mu_C, constant
par mu_C=0.007

# Parameter:   id =  g_beta, name = g_beta, constant
par g_beta=63945.0

# Parameter:   id =  a_beta_T, name = a_beta_T, constant
par a_beta_T=5.75E-6

# Parameter:   id =  mu_beta, name = mu_beta, constant
par mu_beta=7.0

# Parameter:   id =  a_gamma_C, name = a_gamma_C, constant
par a_gamma_C=1.02E-4

# Parameter:   id =  mu_gamma, name = mu_gamma, constant
par mu_gamma=0.102

# Parameter:   id =  g_M1, name = g_M1, constant
par g_M1=1.44

# Parameter:   id =  a_M1_gamma, name = a_M1_gamma, constant
par a_M1_gamm=2.88

# Parameter:   id =  e_M1_gamma, name = e_M1_gamma, constant
par e_M1_gamm=338000.0

# Parameter:   id =  mu_M1, name = mu_M1, constant
par mu_M1=0.0144

# Parameter:   id =  a_M2_gamma, name = a_M2_gamma, constant
par a_M2_gamm=8660.0

# Parameter:   id =  e_M2_gamma, name = e_M2_gamma, constant
par e_M2_gamm=1420.0

# Parameter:   id =  a_M2_beta, name = a_M2_beta, constant
par a_M2_beta=0.012

# Parameter:   id =  e_M2_beta, name = e_M2_beta, constant
par e_M2_beta=100000.0

# Parameter:   id =  mu_M2, name = mu_M2, constant
par mu_M2=0.0144

# Parameter:   id =  S, name = S, defined by a Rule

# Parameter:   id =  T_e9, name = T_e9, defined by a Rule

# Parameter:   id =  S_dose, name = S_dose, constant
par S_dose=3.0E8

# Parameter:   id =  C_e7, name = C_e7, defined by a Rule

# Parameter:   id =  S_interval, name = S_interval, constant
par S_interva=10.0

# Parameter:   id =  S_2, name = S_2, defined by a Rule

# Parameter:   id =  S_3, name = S_3, defined by a Rule

# Parameter:   id =  S_1, name = S_1, defined by a Rule

# Parameter:   id =  S_4, name = S_4, defined by a Rule

# Parameter:   id =  S_5, name = S_5, defined by a Rule

# Parameter:   id =  ModelValue_28, name = Initial for S_dose, constant
par ModelValu=3.0E8

# Parameter:   id =  ModelValue_30, name = Initial for S_interval, constant
par ModelVa_1=10.0

# assignmentRule: variable = T_e9
T_e9=T_renamed/100000000
aux T_e9=T_e9

# assignmentRule: variable = S_3
S_3= piecew3 
aux S_3=S_3

# assignmentRule: variable = S_4
S_4= piecew6 
aux S_4=S_4

# assignmentRule: variable = C_e7
C_e7=C/10000000
aux C_e7=C_e7

# assignmentRule: variable = S_5
S_5= piecew9 
aux S_5=S_5

# assignmentRule: variable = S_2
S_2= piecew12 
aux S_2=S_2

# assignmentRule: variable = S_1
S_1= piecew15 
aux S_1=S_1

# assignmentRule: variable = S
S=S_1+S_2+S_3+S_4+S_5
aux S=S

# Reaction: id = Tumor_Growth, name = Tumor_Growth

Tumor_Gro=compartme*Functio_4(r, T_renamed, K)

# Reaction: id = Tumor_Elimination_CTL, name = Tumor_Elimination_CTL

Tumor_Eli=compartme*Functio_3(a_T, M1, e_T, C, T_renamed, h_T, a_T_beta, e_T_beta, F_beta)

# Reaction: id = CTL_Recruitment, name = CTL_Recruitment

CTL_Recru=compartme*Functio_2(a_C_M2, M2, T_renamed, e_C_M2, a_C_beta, e_C_beta, F_beta)

# Reaction: id = CTL_Death, name = CTL_Death

CTL_Death=compartme*mu_C*C

# Reaction: id = CTL_Infusion, name = CTL_Infusion

CTL_Infus=compartme*Constant_(S)

# Reaction: id = F_beta_Basal_Production, name = F_beta_Basal_Production

F_beta_Ba=compartme*Constant_(g_beta)

# Reaction: id = F_beta_Tumor_Production, name = F_beta_Tumor_Production

F_beta_Tu=compartme*Functio_1(a_T_beta, T_renamed)

# Reaction: id = F_beta_Degradation, name = F_beta_Degradation

F_beta_De=compartme*mu_beta*F_beta

# Reaction: id = F_gamma_CTL_Production, name = F_gamma_CTL_Production

F_gamma_C=compartme*Function_(a_gamma_C, C)

# Reaction: id = F_gamma_Degradation, name = F_gamma_Degradation

F_gamma_D=compartme*mu_gamma*F_gamma

# Reaction: id = M1_Receptor_Expression_Basal, name = M1_Receptor_Expression_Basal

M1_Recept=compartme*Constant_(g_M1)

# Reaction: id = M1_Expression_Stimulated, name = M1_Expression_Stimulated
# Local Parameter:   id =  v, name = v
par v=0.1


M1_Expres=compartme*Constant_(v)

# Reaction: id = M1_Degradation, name = M1_Degradation

M1_Degrad=compartme*mu_M1*M1

# Reaction: id = M2_Production, name = M2_Production
# Local Parameter:   id =  v, name = v
par v_1=0.1


M2_Produc=compartme*Constant_(v_1)

# Reaction: id = M2_Degradation, name = M2_Degradation

M2_Degrad=compartme*mu_M2*M2

# Species:   id = T, name = T, affected by kineticLaw

par T_renamed=1.0E10
aux T_renamed=T_renamed
dT_renamed/dt=(1/(compartme))*(( 1.0 * Tumor_Gro) + (-1.0 * Tumor_Eli))

# Species:   id = C, name = C, affected by kineticLaw

init C=2000000.0
dC/dt=(1/(compartme))*(( 1.0 * CTL_Recru) + (-1.0 * CTL_Death) + ( 1.0 * CTL_Infus))

# Species:   id = F_beta, name = F_beta, affected by kineticLaw

init F_beta=0.0
dF_beta/dt=(1/(compartme))*(( 1.0 * F_beta_Ba) + ( 1.0 * F_beta_Tu) + (-1.0 * F_beta_De))

# Species:   id = F_gamma, name = F_gamma, affected by kineticLaw

init F_gamma=0.0
dF_gamma/dt=(1/(compartme))*(( 1.0 * F_gamma_C) + (-1.0 * F_gamma_D))

# Species:   id = M1, name = M1, affected by kineticLaw

init M1=0.0
dM1/dt=(1/(compartme))*(( 1.0 * M1_Recept) + ( 1.0 * M1_Expres) + (-1.0 * M1_Degrad))

# Species:   id = M2, name = M2, affected by kineticLaw

init M2=0.0
dM2/dt=(1/(compartme))*(( 1.0 * M2_Produc) + (-1.0 * M2_Degrad))


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if ((t  <  0) xor (120  <  0)) then (t-120*ceil(t/120)) else (t-120*flr(t/120))

piecew2=if ((t  <  0) xor (120  <  0)) then (t-120*ceil(t/120)) else (t-120*flr(t/120))

piecew3=if (((( piecew1   >=  0) && ( piecew2   <=  ModelVa_1)) && (t  >  2880)) && (t  <  3240)) then (ModelValu/ModelVa_1) else (0)

piecew4=if ((t  <  0) xor (120  <  0)) then (t-120*ceil(t/120)) else (t-120*flr(t/120))

piecew5=if ((t  <  0) xor (120  <  0)) then (t-120*ceil(t/120)) else (t-120*flr(t/120))

piecew6=if (((( piecew4   >=  0) && ( piecew5   <=  ModelVa_1)) && (t  >  4320)) && (t  <  4680)) then (ModelValu/ModelVa_1) else (0)

piecew7=if ((t  <  0) xor (120  <  0)) then (t-120*ceil(t/120)) else (t-120*flr(t/120))

piecew8=if ((t  <  0) xor (120  <  0)) then (t-120*ceil(t/120)) else (t-120*flr(t/120))

piecew9=if (((( piecew7   >=  0) && ( piecew8   <=  ModelVa_1)) && (t  >  5760)) && (t  <  6120)) then (ModelValu/ModelVa_1) else (0)

piecew10=if ((t  <  0) xor (120  <  0)) then (t-120*ceil(t/120)) else (t-120*flr(t/120))

piecew11=if ((t  <  0) xor (120  <  0)) then (t-120*ceil(t/120)) else (t-120*flr(t/120))

piecew12=if (((( piecew10   >=  0) && ( piecew11   <=  ModelVa_1)) && (t  >  1440)) && (t  <  1800)) then (ModelValu/ModelVa_1) else (0)

piecew13=if ((t  <  0) xor (120  <  0)) then (t-120*ceil(t/120)) else (t-120*flr(t/120))

piecew14=if ((t  <  0) xor (120  <  0)) then (t-120*ceil(t/120)) else (t-120*flr(t/120))

piecew15=if ((( piecew13   >=  0) && ( piecew14   <=  ModelVa_1)) && (t  <  360)) then (S_dose/ModelVa_1) else (0)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

