
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Clancy2002_CardiacSodiumChannel_WT
#
# is http://identifiers.org/biomodels.db/MODEL4716238623
# is http://identifiers.org/biomodels.db/BIOMD0000000126
# isDescribedBy http://identifiers.org/pubmed/11889015
# isDerivedFrom http://identifiers.org/biomodels.db/BIOMD0000000121
# isDerivedFrom http://identifiers.org/pubmed/10533588
# isDerivedFrom http://identifiers.org/pubmed/10318671
# isDerivedFrom http://identifiers.org/pubmed/7788872
# isDerivedFrom http://identifiers.org/pubmed/7514509
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = cell, name = cell, constant
par cell=1.0

# Parameter:   id =  nao, name = [Na]out, constant
par nao=140.0

# Parameter:   id =  nai, name = [Na]in, constant
par nai=15.0

# Parameter:   id =  scale, name = scale, constant
par scale=1000.0

# Parameter:   id =  v, name = v
par v=-80.0

# Parameter:   id =  Ena, name = Ena, defined by a Rule

# Parameter:   id =  a11, name = a11, defined by a Rule

# Parameter:   id =  a12, name = a12, defined by a Rule

# Parameter:   id =  a13, name = a13, defined by a Rule

# Parameter:   id =  b11, name = b11, defined by a Rule

# Parameter:   id =  b12, name = b12, defined by a Rule

# Parameter:   id =  b13, name = b13, defined by a Rule

# Parameter:   id =  a2, name = a2, defined by a Rule

# Parameter:   id =  b2, name = b2, defined by a Rule

# Parameter:   id =  a3, name = a3, defined by a Rule

# Parameter:   id =  b3, name = b3, defined by a Rule

# Parameter:   id =  a4, name = a4, defined by a Rule

# Parameter:   id =  b4, name = b4, defined by a Rule

# Parameter:   id =  a5, name = a5, defined by a Rule

# Parameter:   id =  b5, name = b5, defined by a Rule

# Parameter:   id =  Gna, name = Gna, constant
par Gna=23.5

# Parameter:   id =  Rk, name = Rk, constant
par Rk=8314.0

# Parameter:   id =  Fara, name = Fara, constant
par Fara=96485.0

# Parameter:   id =  Temp, name = Temp, constant
par Temp=310.0

# Parameter:   id =  Ina, name = I_Na, defined by a Rule

# assignmentRule: variable = a11
a11=3.802/(0.1027*exp((-v)/17)+0.2*exp((-v)/150))
aux a11=a11

# assignmentRule: variable = a12
a12=3.802/(0.1027*exp((-v)/15)+0.23*exp((-v)/150))
aux a12=a12

# assignmentRule: variable = a13
a13=3.802/(0.1027*exp((-v)/12)+0.25*exp((-v)/150))
aux a13=a13

# assignmentRule: variable = a2
a2=9.178*exp(v/29.68)
aux a2=a2

# assignmentRule: variable = a3
a3=3.7933*1E-7*exp((-v)/7.7)
aux a3=a3

# assignmentRule: variable = b3
b3=0.0084+2E-5*v
aux b3=b3

# assignmentRule: variable = a4
a4=a2/100
aux a4=a4

# assignmentRule: variable = b4
b4=a3
aux b4=b4

# assignmentRule: variable = a5
a5=a2/(9.5*10000)
aux a5=a5

# assignmentRule: variable = b5
b5=a3/50
aux b5=b5

# assignmentRule: variable = Ena
Ena=Rk*Temp/Fara*log(nao/nai)
aux Ena=Ena

# assignmentRule: variable = Ina
Ina=Gna*O/(IC3+IC2+IF+IM1+IM2+C3+C2+C1+O)*(v-Ena)/scale
aux Ina=Ina

# assignmentRule: variable = b11
b11=0.1917*exp((-v)/20.3)
aux b11=b11

# assignmentRule: variable = b12
b12=0.2*exp((-(v-5))/20.3)
aux b12=b12

# assignmentRule: variable = b13
b13=0.22*exp((-(v-10))/20.3)
aux b13=b13

# assignmentRule: variable = b2
b2=a13*a2*a3/(b13*b3)
aux b2=b2

# Reaction: id = reaction_0000001, name = IC3=IC2

reaction_=cell*(IC3*a11-IC2*b11)

# Reaction: id = reaction_0000002, name = IC2=IF

reactio_1=cell*(IC2*a12-IF*b12)

# Reaction: id = reaction_0000003, name = IF=IM1

reactio_2=cell*(IF*a4-IM1*b4)

# Reaction: id = reaction_0000004, name = IM1=IM2

reactio_3=cell*(IM1*a5-IM2*b5)

# Reaction: id = reaction_0000005, name = C3=IC3

reactio_4=cell*(C3*b3-IC3*a3)

# Reaction: id = reaction_0000006, name = C2=C3

reactio_5=cell*(C2*b11-C3*a11)

# Reaction: id = reaction_0000007, name = C2=IC2

reactio_6=cell*(C2*b3-IC2*a3)

# Reaction: id = reaction_0000008, name = C1=C2

reactio_7=cell*(C1*b12-C2*a12)

# Reaction: id = reaction_0000009, name = C1=IF

reactio_8=cell*(C1*b3-IF*a3)

# Reaction: id = reaction_0000010, name = IF=O

reactio_9=cell*(IF*b2-a2*O)

# Reaction: id = reaction_0000011, name = O=C1

reacti_10=cell*((-C1)*a13+O*b13)

# Species:   id = C1, name = C1, affected by kineticLaw

init C1=0.0
dC1/dt=(1/(cell))*((-1.0 * reactio_7) + (-1.0 * reactio_8) + ( 1.0 * reacti_10))

# Species:   id = C2, name = C2, affected by kineticLaw

init C2=0.0
dC2/dt=(1/(cell))*((-1.0 * reactio_5) + (-1.0 * reactio_6) + ( 1.0 * reactio_7))

# Species:   id = C3, name = C3, affected by kineticLaw

init C3=1.0
dC3/dt=(1/(cell))*((-1.0 * reactio_4) + ( 1.0 * reactio_5))

# Species:   id = IC3, name = IC3, affected by kineticLaw

init IC3=0.0
dIC3/dt=(1/(cell))*((-1.0 * reaction_) + ( 1.0 * reactio_4))

# Species:   id = IC2, name = IC2, affected by kineticLaw

init IC2=0.0
dIC2/dt=(1/(cell))*(( 1.0 * reaction_) + (-1.0 * reactio_1) + ( 1.0 * reactio_6))

# Species:   id = IM1, name = IM1, affected by kineticLaw

init IM1=0.0
dIM1/dt=(1/(cell))*(( 1.0 * reactio_2) + (-1.0 * reactio_3))

# Species:   id = IM2, name = IM2, affected by kineticLaw

init IM2=0.0
dIM2/dt=(1/(cell))*(( 1.0 * reactio_3))

# Species:   id = O, name = open states, affected by kineticLaw

init O=0.0
dO/dt=(1/(cell))*(( 1.0 * reactio_9) + (-1.0 * reacti_10))

# Species:   id = IF, name = IF, affected by kineticLaw

init IF=0.0
dIF/dt=(1/(cell))*(( 1.0 * reactio_1) + (-1.0 * reactio_2) + ( 1.0 * reactio_8) + (-1.0 * reactio_9))

# event : event_0000001
event_000=if ((t >= 5) && (t <= 20)) then (1.5) else (0.2)
global 1 {event_000 - 1.1} {v=-30}

# event : event_0000002
event_0_1=if (t > 20) then (1.5) else (0.2)
global 1 {event_0_1 - 1.1} {v=-80}

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

