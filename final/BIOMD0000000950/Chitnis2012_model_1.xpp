
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Chitnis2012 - Model Rift Valley Fever transmission between cattle and mosquitoes (Model 1)
#
# isDescribedBy http://identifiers.org/pubmed/23098257
# is http://identifiers.org/biomodels.db/MODEL1805230002
# is http://identifiers.org/biomodels.db/BIOMD0000000950
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = Cattle, name = Cattle, constant
par Cattle=1.0

# Compartment: id = Vector, name = Vector, constant
par Vector=1.0

# Parameter:   id =  u_h, name = u_h, defined by a Rule

# Parameter:   id =  u_v, name = u_v, defined by a Rule

# Parameter:   id =  psi_v, name = psi_v, defined by a Rule

# Parameter:   id =  theta_h, name = theta_h, defined by a Rule

# Parameter:   id =  sigma_v, name = sigma_v, defined by a Rule

# Parameter:   id =  sigma_h, name = sigma_h, defined by a Rule

# Parameter:   id =  beta_hv, name = beta_hv, defined by a Rule

# Parameter:   id =  beta_vh, name = beta_vh, defined by a Rule

# Parameter:   id =  beta_tilde_vh, name = beta_tilde_vh, defined by a Rule

# Parameter:   id =  v_v, name = v_v, defined by a Rule

# Parameter:   id =  gamma_h, name = gamma_h, defined by a Rule

# Parameter:   id =  gamma_tilde_h, name = gamma_tilde_h, defined by a Rule

# Parameter:   id =  delta_h, name = delta_h, defined by a Rule

# Parameter:   id =  gamma_e, name = gamma_e, defined by a Rule

# Parameter:   id =  M0, name = M0, defined by a Rule

# Parameter:   id =  C0, name = C0, defined by a Rule

# Parameter:   id =  N_v, name = N_v, defined by a Rule

# Parameter:   id =  lambda_h, name = lambda_h, defined by a Rule

# Parameter:   id =  lambda_v, name = lambda_v, defined by a Rule

# Parameter:   id =  N_h, name = N_h, defined by a Rule

# Parameter:   id =  Total_Infected_Cattle, name = Total_Infected_Cattle, defined by a Rule

# Parameter:   id =  Season_Dummy_Variable, name = Season_Dummy_Variable, constant
par Season_Du=0.0

# assignmentRule: variable = u_h
u_h= piecew1 
aux u_h=u_h

# assignmentRule: variable = u_v
u_v= piecew2 
aux u_v=u_v

# assignmentRule: variable = psi_v
psi_v= piecew3 
aux psi_v=psi_v

# assignmentRule: variable = theta_h
theta_h= piecew4 
aux theta_h=theta_h

# assignmentRule: variable = sigma_v
sigma_v= piecew5 
aux sigma_v=sigma_v

# assignmentRule: variable = sigma_h
sigma_h= piecew6 
aux sigma_h=sigma_h

# assignmentRule: variable = beta_hv
beta_hv= piecew7 
aux beta_hv=beta_hv

# assignmentRule: variable = beta_vh
beta_vh= piecew8 
aux beta_vh=beta_vh

# assignmentRule: variable = v_v
v_v= piecew9 
aux v_v=v_v

# assignmentRule: variable = gamma_h
gamma_h= piecew10 
aux gamma_h=gamma_h

# assignmentRule: variable = gamma_tilde_h
gamma_til= piecew11 
aux gamma_til=gamma_til

# assignmentRule: variable = delta_h
delta_h= piecew12 
aux delta_h=delta_h

# assignmentRule: variable = gamma_e
gamma_e= piecew13 
aux gamma_e=gamma_e

# assignmentRule: variable = M0
M0= piecew14 
aux M0=M0

# assignmentRule: variable = C0
C0= piecew15 
aux C0=C0

# assignmentRule: variable = N_v
N_v=S_v+E_v+I_v
aux N_v=N_v

# assignmentRule: variable = N_h
N_h=S_h+I_h+A_h+R_h
aux N_h=N_h

# assignmentRule: variable = lambda_h
lambda_h=sigma_v*N_v*sigma_h/(sigma_v*N_v+sigma_h*N_h)*beta_hv*I_v/N_v
aux lambda_h=lambda_h

# assignmentRule: variable = Total_Infected_Cattle
Total_Inf=A_h+I_h
aux Total_Inf=Total_Inf

# assignmentRule: variable = beta_tilde_vh
beta_tild= piecew16 
aux beta_tild=beta_tild

# assignmentRule: variable = lambda_v
lambda_v=sigma_v*sigma_h*N_h/(sigma_v*N_v+sigma_h*N_h)*(beta_vh*I_h/N_h+beta_tild*A_h/N_h)
aux lambda_v=lambda_v

# rateRule: variable = S_h
init S_h=1000.0
dS_h/dt=u_h*C0-lambda_h*S_h-u_h*S_h

# rateRule: variable = A_h
init A_h=0.0
dA_h/dt=theta_h*lambda_h*S_h-(u_h+gamma_til)*A_h

# rateRule: variable = I_h
init I_h=0.0
dI_h/dt=(1-theta_h)*lambda_h*S_h-(u_h+gamma_h+delta_h)*I_h

# rateRule: variable = R_h
init R_h=0.0
dR_h/dt=gamma_h*I_h+gamma_til*A_h-u_h*R_h

# rateRule: variable = S_v
init S_v=19999.0
dS_v/dt=(N_v-psi_v*I_v)/N_v*u_v*M0-lambda_v*S_v-u_v*S_v

# rateRule: variable = E_v
init E_v=0.0
dE_v/dt=lambda_v*S_v-(u_v+v_v)*E_v

# rateRule: variable = I_v
init I_v=1.0
dI_v/dt=psi_v*I_v/N_v*u_v*M0+v_v*E_v-u_v*I_v

# Species:   id = S_h, name = S_h, involved in a rule 

# Species:   id = A_h, name = A_h, involved in a rule 

# Species:   id = I_h, name = I_h, involved in a rule 

# Species:   id = R_h, name = R_h, involved in a rule 

# Species:   id = S_v, name = S_v, involved in a rule 

# Species:   id = E_v, name = E_v, involved in a rule 

# Species:   id = I_v, name = I_v, involved in a rule 


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if (Season_Du  ==  0) then (1/2190) else (1/2190)

piecew2=if (Season_Du  ==  0) then (1/20) else (1/14)

piecew3=if (Season_Du  ==  0) then (0.1) else (0.1)

piecew4=if (Season_Du  ==  0) then (0.4) else (0.4)

piecew5=if (Season_Du  ==  0) then (0.33) else (0.25)

piecew6=if (Season_Du  ==  0) then (19) else (19)

piecew7=if (Season_Du  ==  0) then (0.21) else (0.21)

piecew8=if (Season_Du  ==  0) then (0.7) else (0.7)

piecew9=if (Season_Du  ==  0) then (1/14) else (1/14)

piecew10=if (Season_Du  ==  0) then (1/4) else (1/4)

piecew11=if (Season_Du  ==  0) then (1/4) else (1/4)

piecew12=if (Season_Du  ==  0) then (0.1) else (0.1)

piecew13=if (Season_Du  ==  0) then (0.2) else (0.1)

piecew14=if (Season_Du  ==  0) then (20000) else (4000)

piecew15=if (Season_Du  ==  0) then (1000) else (1000)

piecew16=if (Season_Du  ==  0) then (0.3) else (0.3)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

