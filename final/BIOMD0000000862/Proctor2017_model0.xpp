
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Proctor2017- Role of microRNAs in osteoarthritis (Positive Feedback By Micro RNA)
#
# hasInstance http://identifiers.org/biomodels.db/MODEL1610100000
# hasInstance http://identifiers.org/taxonomy/9606
# hasInstance http://identifiers.org/ncit/C25966
# isDescribedBy http://identifiers.org/ncit/C25966
# isDescribedBy http://identifiers.org/pubmed/29095952
# is http://identifiers.org/biomodels.db/MODEL1610100000
# is http://identifiers.org/biomodels.db/BIOMD0000000862
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_miR_degradation, name = Function for miR_degradation
Function_(cell,kdegMiR,miR)=(kdegMiR*miR*cell/cell)


# FunctionDefinition id = Function_for_miR_gene_TF2_release, name = Function for miR_gene_TF2_release
Functio_1(cell,krelTF2miRgene,miR_gene_TF2)=(krelTF2miRgene*miR_gene_TF2*cell/cell)


# FunctionDefinition id = Function_for_miR_gene_TF2_binding, name = Function for miR_gene_TF2_binding
Functio_2(TF2,cell,kbinTF2miRgene,miR_gene)=(kbinTF2miRgene*miR_gene*cell*TF2*cell/cell)


# FunctionDefinition id = Function_for_miR_gene_TF1_release, name = Function for miR_gene_TF1_release
Functio_3(cell,krelTF1miRgene,miR_gene_TF1)=(krelTF1miRgene*miR_gene_TF1*cell/cell)


# FunctionDefinition id = Function_for_miR_gene_TF1_binding, name = Function for miR_gene_TF1_binding
Functio_4(TF1,cell,kbinTF1miRgene,miR_gene)=(kbinTF1miRgene*miR_gene*cell*TF1*cell/cell)


# FunctionDefinition id = Function_for_TF1_transcription, name = Function for TF1_transcription
Functio_5(Signal,cell,ksynTF1mRNA)=(ksynTF1mRNA*Signal*cell/cell)


# FunctionDefinition id = Function_for_TF1_mRNA_degradation, name = Function for TF1_mRNA_degradation
Functio_6(TF1_mRNA,cell,kdegTF1mRNA)=(kdegTF1mRNA*TF1_mRNA*cell/cell)


# FunctionDefinition id = Function_for_TF1_mRNA_degradation_via_miR, name = Function for TF1_mRNA_degradation_via_miR
Functio_7(TF1_mRNA,cell,kdegTF1mRNAbyMiR,miR)=(kdegTF1mRNAbyMiR*TF1_mRNA*cell*miR*cell/cell)


# FunctionDefinition id = Function_for_TF1_translation, name = Function for TF1_translation
Functio_8(TF1_mRNA,cell,ksynTF1)=(ksynTF1*TF1_mRNA*cell/cell)


# FunctionDefinition id = Function_for_TF1_degradation, name = Function for TF1_degradation
Functio_9(TF1,cell,kdegTF1)=(kdegTF1*TF1*cell/cell)


# FunctionDefinition id = Function_for_miR_synthesis_2, name = Function for miR_synthesis_2
Functi_10(cell,ksynMiR,miR_gene_TF2)=(ksynMiR*miR_gene_TF2*cell/cell)


# Compartment: id = cell, name = cell, constant
par cell=1.0

# Parameter:   id =  kbinTF1miRgene, name = kbinTF1miRgene, constant
par kbinTF1mi=0.002

# Parameter:   id =  kbinTF2miRgene, name = kbinTF2miRgene, constant
par kbinTF2mi=1.0E-4

# Parameter:   id =  kdegMiR, name = kdegMiR, constant
par kdegMiR=4.0E-4

# Parameter:   id =  kdegTF1, name = kdegTF1, constant
par kdegTF1=1.0E-5

# Parameter:   id =  kdegTF1mRNA, name = kdegTF1mRNA, constant
par kdegTF1mR=1.0E-4

# Parameter:   id =  kdegTF1mRNAbyMiR, name = kdegTF1mRNAbyMiR, constant
par kdegTF1_1=1.0E-6

# Parameter:   id =  krelTF1miRgene, name = krelTF1miRgene, constant
par krelTF1mi=0.001

# Parameter:   id =  krelTF2miRgene, name = krelTF2miRgene, constant
par krelTF2mi=0.001

# Parameter:   id =  ksynMiR, name = ksynMiR, constant
par ksynMiR=0.2

# Parameter:   id =  ksynTF1, name = ksynTF1, constant
par ksynTF1=3.0E-4

# Parameter:   id =  ksynTF1mRNA, name = ksynTF1mRNA, constant
par ksynTF1mR=0.01

# Reaction: id = miR_gene_TF1_binding, name = miR_gene_TF1_binding

miR_gen_2=cell*Functio_4(TF1, cell, kbinTF1mi, miR_gene)

# Reaction: id = miR_gene_TF1_release, name = miR_gene_TF1_release

miR_gen_3=cell*Functio_3(cell, krelTF1mi, miR_gene_)

# Reaction: id = miR_gene_TF2_binding, name = miR_gene_TF2_binding

miR_gen_4=cell*Functio_2(TF2, cell, kbinTF2mi, miR_gene)

# Reaction: id = miR_gene_TF2_release, name = miR_gene_TF2_release

miR_gen_5=cell*Functio_1(cell, krelTF2mi, miR_gen_1)

# Reaction: id = miR_synthesis, name = miR_synthesis

miR_synth=cell*Functi_10(cell, ksynMiR, miR_gen_1)

# Reaction: id = miR_degradation, name = miR_degradation

miR_degra=cell*Function_(cell, kdegMiR, miR)

# Reaction: id = TF1_transcription, name = TF1_transcription

TF1_trans=cell*Functio_5(Signal, cell, ksynTF1mR)

# Reaction: id = TF1_mRNA_degradation, name = TF1_mRNA_degradation

TF1_mRNA_=cell*Functio_6(TF1_mRNA, cell, kdegTF1mR)

# Reaction: id = TF1_mRNA_degradation_via_miR, name = TF1_mRNA_degradation_via_miR

TF1_mRN_1=cell*Functio_7(TF1_mRNA, cell, kdegTF1_1, miR)

# Reaction: id = TF1_translation, name = TF1_translation

TF1_tra_1=cell*Functio_8(TF1_mRNA, cell, ksynTF1)

# Reaction: id = TF1_degradation, name = TF1_degradation

TF1_degra=cell*Functio_9(TF1, cell, kdegTF1)

# Species:   id = miR, name = miR, affected by kineticLaw

init miR=1000.0
dmiR/dt=(1/(cell))*(( 1.0 * miR_synth) + (-1.0 * miR_degra) + (-1.0 * TF1_mRN_1) + ( 1.0 * TF1_mRN_1))

# Species:   id = miR_gene, name = miR_gene, affected by kineticLaw

init miR_gene=2.0
dmiR_gene/dt=(1/(cell))*((-1.0 * miR_gen_2) + ( 1.0 * miR_gen_3) + (-1.0 * miR_gen_4) + ( 1.0 * miR_gen_5))

# Species:   id = miR_gene_TF1, name = miR_gene_TF1, affected by kineticLaw

par miR_gene_=0.0
aux miR_gene_=miR_gene_
dmiR_gene_/dt=(1/(cell))*(( 1.0 * miR_gen_2) + (-1.0 * miR_gen_3))

# Species:   id = miR_gene_TF2, name = miR_gene_TF2, affected by kineticLaw

par miR_gen_1=0.0
aux miR_gen_1=miR_gen_1
dmiR_gen_1/dt=(1/(cell))*(( 1.0 * miR_gen_4) + (-1.0 * miR_gen_5) + (-1.0 * miR_synth) + ( 1.0 * miR_synth))

# Species:   id = Signal, name = Signal, affected by kineticLaw
# Species is changed by 2 event(s)
init Signal=0.0
dSignal/dt=(1/(cell))*((-1.0 * TF1_trans) + ( 1.0 * TF1_trans))

# Species:   id = TF1, name = TF1, affected by kineticLaw

init TF1=0.0
dTF1/dt=(1/(cell))*((-1.0 * miR_gen_2) + ( 1.0 * miR_gen_3) + ( 1.0 * TF1_tra_1) + (-1.0 * TF1_degra))

# Species:   id = TF1_mRNA, name = TF1_mRNA, affected by kineticLaw

init TF1_mRNA=0.0
dTF1_mRNA/dt=(1/(cell))*(( 1.0 * TF1_trans) + (-1.0 * TF1_mRNA_) + (-1.0 * TF1_mRN_1) + (-1.0 * TF1_tra_1) + ( 1.0 * TF1_tra_1))

# Species:   id = TF2, name = TF2, affected by kineticLaw

init TF2=1000.0
dTF2/dt=(1/(cell))*((-1.0 * miR_gen_4) + ( 1.0 * miR_gen_5))

# Species:   id = Sink, name = Sink, constant
par Sink=0.0


# event : ActivateSignal
# unable to handle events with delays currently.
# event ignored.


# event : DeactivateSignal
# unable to handle events with delays currently.
# event ignored.


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

