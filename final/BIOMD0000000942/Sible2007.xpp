
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Sible2007 - Mitotic cell cycle mecanism in Xenopus Laevis
#
# is http://identifiers.org/biomodels.db/MODEL1809060005
# is http://identifiers.org/biomodels.db/BIOMD0000000942
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = Function_modifier_substrate, name = Function modifier substrate
Function_(k,modifier,substrate)=(k*modifier*substrate)


# FunctionDefinition id = Function_Michaelis_Menten_Rate_Law, name = Function Michaelis Menten Rate Law
Functio_1(k,E,S1,S2,Km)=(k*E*(S1-S2)/(Km+S1-S2))


# FunctionDefinition id = Function_Michaelis_Menten_Rate_Law_v2, name = Function Michaelis Menten Rate Law v2
Functio_2(k,E,S,Km)=(k*E*S/(Km+S))


# Compartment: id = nuclear, name = nuclear, constant
par nuclear=1.0

# Parameter:   id =  k1, name = k1, constant
par k1=1.0

# Parameter:   id =  v2, name = v2_, constant
par v2=0.005

# Parameter:   id =  v2_, name = v2__, constant
par v2_=0.25

# Parameter:   id =  k3, name = k3, constant
par k3=0.005

# Parameter:   id =  v25, name = v25_, constant
par v25=0.017

# Parameter:   id =  v25_, name = v25__, constant
par v25_=0.17

# Parameter:   id =  vwee, name = vwee_, constant
par vwee=0.01

# Parameter:   id =  vwee_, name = vwee__, constant
par vwee_=1.0

# Parameter:   id =  ka, name = ka, constant
par ka=0.02

# Parameter:   id =  KKa, name = KKa, constant
par KKa=0.1

# Parameter:   id =  kb, name = kb, constant
par kb=0.1

# Parameter:   id =  KKb, name = KKb, constant
par KKb=1.0

# Parameter:   id =  kc, name = kc, constant
par kc=0.13

# Parameter:   id =  KKc, name = KKc, constant
par KKc=0.01

# Parameter:   id =  kd, name = kd, constant
par kd=0.13

# Parameter:   id =  KKd, name = KKd, constant
par KKd=1.0

# Parameter:   id =  ke, name = ke, constant
par ke=0.02

# Parameter:   id =  KKe, name = KKe, constant
par KKe=0.1

# Parameter:   id =  kf, name = kf, constant
par kf=0.1

# Parameter:   id =  KKf, name = KKf, constant
par KKf=1.0

# Parameter:   id =  kg, name = kg, constant
par kg=0.02

# Parameter:   id =  KKg, name = KKg, constant
par KKg=0.01

# Parameter:   id =  kh, name = kh, constant
par kh=0.15

# Parameter:   id =  KKh, name = KKh, constant
par KKh=0.01

# Parameter:   id =  k25, name = k25, defined by a Rule

# Parameter:   id =  kwee, name = kwee, defined by a Rule

# Parameter:   id =  k2, name = k2, defined by a Rule

# assignmentRule: variable = Wee1
Wee1=Wee1_tota-Wee1_phos
aux Wee1=Wee1

# assignmentRule: variable = Cdk1
Cdk1=Cdk1_tota
aux Cdk1=Cdk1

# assignmentRule: variable = IE
IE=IE_total-IE_phosph
aux IE=IE

# assignmentRule: variable = Cdc25
Cdc25=Cdc25_tot-Cdc25_pho
aux Cdc25=Cdc25

# assignmentRule: variable = Cyclin_total
Cyclin_to=Cyclin_Cd+Cyclin__1+Cyclin
aux Cyclin_to=Cyclin_to

# assignmentRule: variable = kwee
kwee=vwee*Wee1_phos+vwee_*(Wee1_tota-Wee1_phos)
aux kwee=kwee

# assignmentRule: variable = k25
k25=v25*(Cdc25_tot-Cdc25_pho)+v25_*Cdc25_pho
aux k25=k25

# assignmentRule: variable = k2
k2=v2*(APC_total-APC_activ)+v2_*APC_activ
aux k2=k2

# Reaction: id = R1_Dephosphorylation, name = R1 Dephosphorylation

R1_Dephos=nuclear*Functio_2(kb, ppase, Cdc25_pho, KKb)

# Reaction: id = R2_Phosphorylation, name = R2 Phosphorylation

R2_Phosph=nuclear*Functio_1(ka, Cyclin_Cd, Cdc25_tot, Cdc25_pho, KKa)

# Reaction: id = R3_Dephosphorylation, name = R3 Dephosphorylation

R3_Dephos=nuclear*k25*Cyclin__1

# Reaction: id = R4_Phosphorylation, name = R4 Phosphorylation

R4_Phosph=nuclear*kwee*Cyclin_Cd

# Reaction: id = R5_Dephosphorylation, name = R5 Dephosphorylation

R5_Dephos=nuclear*Functio_2(kf, ppase, Wee1_phos, KKf)

# Reaction: id = R6_Phosphorylation, name = R6 Phosphorylation

R6_Phosph=nuclear*Functio_1(ke, Cyclin_Cd, Wee1_tota, Wee1_phos, KKe)

# Reaction: id = R7_Protein_Complex__Formation_by_binding, name = R7 Protein Complex  Formation by binding

R7_Protei=nuclear*Function_(k3, Cdk1, Cyclin)

# Reaction: id = R8_Synthesis, name = R8 Synthesis

R8_Synthe=nuclear*Constant_(k1)

# Reaction: id = R9_Dephosphorylation, name = R9 Dephosphorylation

R9_Dephos=nuclear*Functio_2(kh, ppase, IE_phosph, KKh)

# Reaction: id = R10_Phosphorylation, name = R10 Phosphorylation

R10_Phosp=nuclear*Functio_1(kg, Cyclin_Cd, IE_total, IE_phosph, KKg)

# Reaction: id = R11_Inactivation, name = R11 Inactivation

R11_Inact=nuclear*Functio_2(kd, ppase, APC_activ, KKd)

# Reaction: id = R12_Activation, name = R12 Activation

R12_Activ=nuclear*Functio_1(kc, IE_phosph, APC_total, APC_activ, KKc)

# Reaction: id = R13_Degradation, name = R13 Degradation

R13_Degra=nuclear*k2*Cyclin_Cd

# Reaction: id = R14_Degradation, name = R14 Degradation

R14_Degra=nuclear*k2*Cyclin

# Reaction: id = R15_Degradation, name = R15 Degradation

R15_Degra=nuclear*k2*Cyclin__1

# Species:   id = Cdc25, name = Cdc25, involved in a rule 

# Species:   id = Cdc25_phosphorylated, name = Cdc25_phosphorylated, affected by kineticLaw

par Cdc25_pho=0.0
aux Cdc25_pho=Cdc25_pho
dCdc25_pho/dt=(1/(nuclear))*((-1.0 * R1_Dephos) + ( 1.0 * R2_Phosph))

# Species:   id = Cyclin_Cdk1_MPF, name = Cyclin_Cdk1_MPF, affected by kineticLaw

par Cyclin_Cd=0.0
aux Cyclin_Cd=Cyclin_Cd
dCyclin_Cd/dt=(1/(nuclear))*(( 1.0 * R3_Dephos) + (-1.0 * R4_Phosph) + ( 1.0 * R7_Protei) + (-1.0 * R13_Degra))

# Species:   id = Cyclin_Cdk1_preMPF, name = Cyclin_Cdk1_preMPF, affected by kineticLaw

par Cyclin__1=0.0
aux Cyclin__1=Cyclin__1
dCyclin__1/dt=(1/(nuclear))*((-1.0 * R3_Dephos) + ( 1.0 * R4_Phosph) + (-1.0 * R15_Degra))

# Species:   id = Wee1, name = Wee1, involved in a rule 

# Species:   id = Wee1_phosphorylated, name = Wee1_phosphorylated, affected by kineticLaw

par Wee1_phos=0.0
aux Wee1_phos=Wee1_phos
dWee1_phos/dt=(1/(nuclear))*((-1.0 * R5_Dephos) + ( 1.0 * R6_Phosph))

# Species:   id = Cyclin, name = Cyclin, affected by kineticLaw

init Cyclin=0.0
dCyclin/dt=(1/(nuclear))*((-1.0 * R7_Protei) + ( 1.0 * R8_Synthe) + (-1.0 * R14_Degra))

# Species:   id = Cdk1, name = Cdk1, involved in a rule 

# Species:   id = IE, name = IE, involved in a rule 

# Species:   id = IE_phosphorylated, name = IE_phosphorylated, affected by kineticLaw

par IE_phosph=1.0
aux IE_phosph=IE_phosph
dIE_phosph/dt=(1/(nuclear))*((-1.0 * R9_Dephos) + ( 1.0 * R10_Phosp))

# Species:   id = APC_active, name = APC_active, affected by kineticLaw

par APC_activ=1.0
aux APC_activ=APC_activ
dAPC_activ/dt=(1/(nuclear))*((-1.0 * R11_Inact) + ( 1.0 * R12_Activ))

# Species:   id = Cdk1_total, name = Cdk1_total, constant
par Cdk1_tota=100.0


# Species:   id = Cdc25_total, name = Cdc25_total, constant
par Cdc25_tot=1.0


# Species:   id = Wee1_total, name = Wee1_total, constant
par Wee1_tota=1.0


# Species:   id = IE_total, name = IE_total, constant
par IE_total=1.0


# Species:   id = APC_total, name = APC_total, constant
par APC_total=1.0


# Species:   id = ppase, name = ppase, constant
par ppase=1.0


# Species:   id = Cyclin_total, name = Cyclin_total, involved in a rule 

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

