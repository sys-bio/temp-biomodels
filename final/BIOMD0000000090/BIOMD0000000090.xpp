
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Wolf2001_Respiratory_Oscillations
#
# is http://identifiers.org/biomodels.db/MODEL9728951048
# is http://identifiers.org/biomodels.db/BIOMD0000000090
# isDescribedBy http://identifiers.org/pubmed/11423122
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = c0, name = external, constant
par c0=1.0

# Compartment: id = c1, name = cytosol, constant
par c1=1.0

# Compartment: id = c2, name = mitochondria, constant
par c2=1.0

# Parameter:   id =  k_v0, name = k_v0, constant
par k_v0=1.6

# Parameter:   id =  k2, name = k2, constant
par k2=0.2

# Parameter:   id =  k3, name = k3, constant
par k3=0.2

# Parameter:   id =  k4, name = k4, constant
par k4=0.2

# Parameter:   id =  k5, name = k5, constant
par k5=0.1

# Parameter:   id =  k6, name = k6, constant
par k6=0.12

# Parameter:   id =  k7, name = k7, constant
par k7=10.0

# Parameter:   id =  k8, name = k8, constant
par k8=10.0

# Parameter:   id =  k9, name = k9, constant
par k9=10.0

# Parameter:   id =  k_v10, name = k_v10, constant
par k_v10=80.0

# Parameter:   id =  k11, name = k11, constant
par k11=10.0

# Parameter:   id =  k12, name = k12, constant
par k12=5.0

# Parameter:   id =  k_v13, name = k_v13, constant
par k_v13=4.0

# Parameter:   id =  k14, name = k14, constant
par k14=10.0

# Parameter:   id =  k15, name = k15, constant
par k15=5.0

# Parameter:   id =  k16, name = k16, constant
par k16=10.0

# Parameter:   id =  k17, name = k17, constant
par k17=0.02

# Parameter:   id =  k18, name = k18, constant
par k18=1.0

# Parameter:   id =  n, name = n, constant
par n=4.0

# Parameter:   id =  m, name = m, constant
par m=4.0

# Parameter:   id =  Ka, name = Ka, constant
par Ka=1.0

# Parameter:   id =  Kc, name = Kc, constant
par Kc=0.1

# Parameter:   id =  a, name = a, constant
par a=0.1

# Parameter:   id =  Ac, name = Ac, constant
par Ac=2.0

# Parameter:   id =  Am, name = Am, constant
par Am=2.0

# Parameter:   id =  S, name = S, constant
par S=2.0

# Parameter:   id =  N, name = N, constant
par N_1=2.0

# Parameter:   id =  Kh, name = Kh, constant
par Kh=0.5

# assignmentRule: variable = A2c
A2c=Ac-A3c
aux A2c=A2c

# assignmentRule: variable = A2m
A2m=Am-A3m
aux A2m=A2m

# assignmentRule: variable = N1
N1=N_1-N2
aux N1=N1

# assignmentRule: variable = S2
S2=S-S1
aux S2=S2

# Reaction: id = v1, name = v1

v1=c0*k_v0/(1+(cys/Kc)^n)

# Reaction: id = v13, name = v13

v13=c0*k_v13

# Reaction: id = v2, name = v2

v2=c1*k2*sul*A3c

# Reaction: id = v10, name = v10

v10=c0*k_v10

# Reaction: id = v14, name = v14

v14=c2*k14*oxy

# Reaction: id = v3, name = v3

v3=c1*k3*aps*A3c

# Reaction: id = v4, name = v4

v4=c1*k4*pap*N2

# Reaction: id = v5, name = v5

v5=c1*k5*hyd*oah

# Reaction: id = v6, name = v6

v6=c1*k6*cys

# Reaction: id = v7, name = v7

v7=c1*k7*eth*N1

# Reaction: id = v15, name = v15

v15=c1*k15*aco

# Reaction: id = v17, name = v17

v17=c1*k17*hyd

# Reaction: id = v18, name = v18

v18=c1*k18*oah

# Reaction: id = v8, name = v8

v8=c2*k8*aco*S2

# Reaction: id = v9, name = v9

v9=c2*k9*S1*N1

# Reaction: id = v11a, name = vET1

v11a=c2*k11*N2*oxy/((a*N2+oxy)*(1+(hyd/Kh)^m))

# Reaction: id = v11a2, name = vET2

v11a2=c2*k11*N2*oxy/((a*N2+oxy)*(1+(hyd/Kh)^m))

# Reaction: id = v16, name = v16

v16=c2*k16*A3m*A2c

# Reaction: id = v11b, name = vSYNT

v11b=c2*3*k11*N2*oxy/((a*N2+oxy)*(1+(hyd/Kh)^m))*A2m/(Ka+A2m)

# Reaction: id = vLEAK, name = vLEAK

vLEAK=0

# Reaction: id = v12, name = v12

v12=c1*k12*A3c

# Species:   id = sul_ex, name = SO4_ex, constant
par sul_ex=0.0


# Species:   id = eth_ex, name = EtOH_ex, constant
par eth_ex=0.0


# Species:   id = oxy_ex, name = O2_ex, constant
par oxy_ex=0.0


# Species:   id = oxy, name = O2, affected by kineticLaw

init oxy=7.0
doxy/dt=(1/(c2))*(( 1.0 * v10) + (-1.0 * v14) + (-1.0 * v11a2))

# Species:   id = H2O, name = H2O, constant
par H2O=0.0


# Species:   id = A3c, name = ATP, affected by kineticLaw

init A3c=1.5
dA3c/dt=(1/(c1))*((-1.0 * v2) + (-1.0 * v3) + ( 1.0 * v16) + (-1.0 * v12))

# Species:   id = aps, name = APS, affected by kineticLaw

init aps=0.5
daps/dt=(1/(c1))*(( 1.0 * v2) + (-1.0 * v3))

# Species:   id = PPi, name = PPi, constant
par PPi=0.0


# Species:   id = pap, name = PAPS, affected by kineticLaw

init pap=0.4
dpap/dt=(1/(c1))*(( 1.0 * v3) + (-1.0 * v4))

# Species:   id = sul, name = SO4, affected by kineticLaw

init sul=0.4
dsul/dt=(1/(c1))*(( 1.0 * v1) + (-1.0 * v2))

# Species:   id = eth, name = EtOH, affected by kineticLaw

init eth=4.0
deth/dt=(1/(c1))*(( 1.0 * v13) + (-1.0 * v7))

# Species:   id = A2c, name = ADP, involved in a rule 

# Species:   id = hyd, name = H2S, affected by kineticLaw

init hyd=0.5
dhyd/dt=(1/(c1))*(( 1.0 * v4) + (-1.0 * v5) + (-1.0 * v17))

# Species:   id = cys, name = CYS, affected by kineticLaw

init cys=0.3
dcys/dt=(1/(c1))*(( 1.0 * v5) + (-1.0 * v6))

# Species:   id = N2, name = NADH, affected by kineticLaw

init N2=2.0
dN2/dt=(1/(c1))*((-3.0 * v4) + ( 2.0 * v7) + ( 4.0 * v9) + (-1.0 * v11a))

# Species:   id = N1, name = NAD, involved in a rule 

# Species:   id = aco, name = AcCoA, affected by kineticLaw

init aco=0.3
daco/dt=(1/(c1))*(( 1.0 * v7) + (-1.0 * v15) + (-1.0 * v8))

# Species:   id = oah, name = OAH, affected by kineticLaw

init oah=1.5
doah/dt=(1/(c1))*((-1.0 * v5) + ( 1.0 * v15) + (-1.0 * v18))

# Species:   id = S1, name = S1, affected by kineticLaw

init S1=1.5
dS1/dt=(1/(c2))*(( 1.0 * v8) + (-1.0 * v9))

# Species:   id = S2, name = S2, involved in a rule 

# Species:   id = C1, name = C1, constant
par C1_1=0.0


# Species:   id = C2, name = C2, constant
par C2_1=0.0


# Species:   id = A2m, name = ADP_mit, involved in a rule 

# Species:   id = A3m, name = ATP_mit, affected by kineticLaw

init A3m=1.5
dA3m/dt=(1/(c2))*((-1.0 * v16) + ( 1.0 * v11b))

# Species:   id = Ho, name = Ho, constant
par Ho=0.0


# Species:   id = Hm, name = Hm, constant
par Hm=0.0


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

