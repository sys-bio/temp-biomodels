
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Tomida2003 - Calcium Oscillatory-induced translocation of nuclear factor of activated T cells
#
# is http://identifiers.org/biomodels.db/MODEL0912160005
# is http://identifiers.org/biomodels.db/BIOMD0000000678
# isDescribedBy http://identifiers.org/pubmed/12881417
# is http://identifiers.org/biomodels.db/MODEL0912160005
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = function_for_modified_reaction_1, name = function for modified reaction_1
function_(NFAT_phosphorylated,k1,stimulus)=(k1*stimulus*NFAT_phosphorylated)


# FunctionDefinition id = function_for_modified_reaction_0, name = function for modified reaction
functio_1(k1,stimulus,substrate)=(k1*stimulus*substrate)


# Compartment: id = Jurkat_cell, name = Jurkat cell, constant
par Jurkat_ce=1.0

# Parameter:   id =  k1, name = k1, constant
par k1=0.359

# Parameter:   id =  k2, name = k2, constant
par k2=0.147

# Parameter:   id =  k3, name = k3, constant
par k3=0.06

# Parameter:   id =  k4, name = k4, constant
par k4=0.035

# Parameter:   id =  stim_frequency, name = stim_frequency, constant
par stim_freq=3.0

# Parameter:   id =  dNFAT, name = dNFAT%, defined by a Rule

# Parameter:   id =  pNFAT, name = pNFAT%, defined by a Rule

# Parameter:   id =  tNFAT, name = tNFAT%, defined by a Rule

# Parameter:   id =  stim_duration, name = stim_duration, constant
par stim_dura=1.0

# Parameter:   id =  ModelValue_17, name = Initial for stim_duration, constant
par ModelValu=1.0

# Parameter:   id =  ModelValue_13, name = Initial for stim_frequency, constant
par ModelVa_1=3.0

# assignmentRule: variable = NFAT_transported
NFAT_tran=1-NFAT_phos-NFAT_deph
aux NFAT_tran=NFAT_tran

# assignmentRule: variable = pNFAT
pNFAT=100*NFAT_phos
aux pNFAT=pNFAT

# assignmentRule: variable = tNFAT
tNFAT=100*NFAT_tran
aux tNFAT=tNFAT

# assignmentRule: variable = dNFAT
dNFAT=100*NFAT_deph
aux dNFAT=dNFAT

# assignmentRule: variable = stimulus
stimulus= piecew1 
aux stimulus=stimulus

# Reaction: id = Dephosphorylation, name = Dephosphorylation

Dephospho=Jurkat_ce*function_(NFAT_phos, k1, stimulus)

# Reaction: id = Phosphorylation, name = Phosphorylation

Phosphory=Jurkat_ce*k2*NFAT_deph

# Reaction: id = Translocation, name = Translocation

Transloca=Jurkat_ce*k3*NFAT_deph

# Reaction: id = Nuclear_export, name = Nuclear_export

Nuclear_e=Jurkat_ce*k4*NFAT_tran

# Species:   id = NFAT_phosphorylated, name = NFAT_phosphorylated, affected by kineticLaw

par NFAT_phos=1.0
aux NFAT_phos=NFAT_phos
dNFAT_phos/dt=(1/(Jurkat_ce))*((-1.0 * Dephospho) + ( 1.0 * Phosphory) + ( 1.0 * Nuclear_e))

# Species:   id = NFAT_dephosphorylated, name = NFAT_dephosphorylated, affected by kineticLaw

par NFAT_deph=0.0
aux NFAT_deph=NFAT_deph
dNFAT_deph/dt=(1/(Jurkat_ce))*(( 1.0 * Dephospho) + (-1.0 * Phosphory) + (-1.0 * Transloca))

# Species:   id = NFAT_transported, name = NFAT_transported, involved in a rule 

# Species:   id = stimulus, name = stimulus, involved in a rule 


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if ((t-flr(t/ModelVa_1)*ModelVa_1)  <  ModelValu) then (1) else (0)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

