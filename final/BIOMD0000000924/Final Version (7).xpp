
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Smith2011 - Three Stage Innate Immune Response to a Pneumococcal Lung Infection
#
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  r, name = r, constant
par r=1.13

# Parameter:   id =  K_P, name = K_P, constant
par K_P=2.3E8

# Parameter:   id =  gamma_M_A, name = gamma_M_A, constant
par gamma_M_A=5.6E-6

# Parameter:   id =  n, name = n, constant
par n=5.0

# Parameter:   id =  x, name = x, constant
par x=2.0

# Parameter:   id =  d, name = d, constant
par d=0.001

# Parameter:   id =  M_Astar, name = M_Astar, constant
par M_Astar=1000000.0

# Parameter:   id =  gamma_N, name = gamma_N, constant
par gamma_N=1.0E-5

# Parameter:   id =  theta_M, name = theta_M, constant
par theta_M=4.2E-8

# Parameter:   id =  kappa, name = kappa, constant
par kappa=0.042

# Parameter:   id =  v, name = v, constant
par v=0.029

# Parameter:   id =  omega, name = omega, constant
par omega=2.1E-8

# Parameter:   id =  d_E, name = d_E, constant
par d_E=0.167

# Parameter:   id =  alpha, name = alpha, constant
par alpha=0.021

# Parameter:   id =  k_n, name = k_n, constant
par k_n=1.4E-5

# Parameter:   id =  d_C, name = d_C, constant
par d_C=0.83

# Parameter:   id =  N_max, name = N_max, constant
par N_max=180000.0

# Parameter:   id =  eta, name = eta, constant
par eta=1.33

# Parameter:   id =  d_N, name = d_N, constant
par d_N=0.063

# Parameter:   id =  d_NP, name = d_NP, constant
par d_NP=1.76E-7

# Parameter:   id =  rho1, name = rho1, constant
par rho1=0.15

# Parameter:   id =  rho2, name = rho2, constant
par rho2=0.001

# Parameter:   id =  rho3, name = rho3, constant
par rho3=1.0E-5

# Parameter:   id =  d_D, name = d_D, constant
par d_D=1.4E-7

# Parameter:   id =  k_d, name = k_d, constant
par k_d=5.0E-9

# Parameter:   id =  f_P_M_A, name = f_P_M_A, defined by a Rule

# Parameter:   id =  s, name = s, constant
par s=1000.0

# assignmentRule: variable = f_P_M_A
f_P_M_A=n^x*M_Astar/(P^x+n^x*M_Astar)
aux f_P_M_A=f_P_M_A

# rateRule: variable = P
init P=100000.0
dP/dt=r*P*(1-P/K_P)-gamma_M_A*f_P_M_A/(1+k_d*D_1*M_Astar)*M_Astar*P-gamma_N*N_1*P

# rateRule: variable = E_U
init E_U=1.0E8
dE_U/dt=(-omega)*P*E_U

# rateRule: variable = E_A
init E_A=0.0
dE_A/dt=omega*P*E_U-d_E*E_A

# rateRule: variable = C
init C=0.0
dC/dt=alpha*E_A/(1+k_n*N_1)+v*theta_M*P*M_Astar/((d+kappa+theta_M*P)*(1+k_n*N_1))-d_C*C

# rateRule: variable = N
init N_1=0.0
dN_1/dt=eta*C*(1-N_1/N_max)-d_NP*N_1*P-d_N*N_1

# rateRule: variable = D
init D_1=0.0
dD_1/dt=rho1*d_NP*N_1*P+rho2*d_N*N_1+rho3*d_E*E_A-d_D*D_1*M_Astar

# Species:   id = P, name = P, involved in a rule # Species is changed by 1 event(s)

# Species:   id = E_U, name = E_U, involved in a rule # Species is changed by 1 event(s)

# Species:   id = E_A, name = E_A, involved in a rule 

# Species:   id = C, name = C, involved in a rule 

# Species:   id = N, name = N, involved in a rule 

# Species:   id = D, name = D, involved in a rule 

# event : event
event=if (E_U < 0) then (1.5) else (0.2)
global 1 {event - 1.1} {E_U=0}

# event : event_1
event_1=if (P < 0) then (1.5) else (0.2)
global 1 {event_1 - 1.1} {P=0}

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

