
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Smith2011 - Three Stage Innate Immune Response to a Pneumococcal Lung Infection
#
# is http://identifiers.org/biomodels.db/MODEL1808280007
# is http://identifiers.org/biomodels.db/BIOMD0000000924
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Rate_Law_for_reaction_for__EU_decay, name = Rate Law for reaction for  EU decay
Rate_Law_(omega,P,Eu)=(omega*P*Eu)


# FunctionDefinition id = Rate_Law_for_reaction_for_Ea_decay, name = Rate Law for reaction for Ea decay
Rate_La_1(d_E,Ea)=(d_E*Ea)


# FunctionDefinition id = Rate_Law_for_reaction_for_P_Decay, name = Rate Law for reaction for P Decay
Rate_La_2(gamma_M_A,f_P_M_A,kd,D,M_Astar,P,gamma_N,N)=(gamma_M_A*f_P_M_A/(1+kd*D*M_Astar)*M_Astar*P+gamma_N*N*P)


# FunctionDefinition id = Rate_Law_for_reaction_for__P_production, name = Rate Law for reaction for  P production
Rate_La_3(r,P,Kp)=(r*P*(1-P/Kp))


# FunctionDefinition id = Rate_Law_for_reaction_for_C_decay, name = Rate Law for reaction for C decay
Rate_La_4(dc,C)=(dc*C)


# FunctionDefinition id = Rate_Law_for_reaction_for_C_production, name = Rate Law for reaction for C production
Rate_La_5(alpha,Ea,kn,N,v,theta_M,M_Astar,d,k,P)=(alpha*Ea/(1+kn*N)+v*theta_M*P*M_Astar/(d+k+theta_M*P*(1+kn*N)))


# FunctionDefinition id = Rate_Law_for_reaction_for_D_production, name = Rate Law for reaction for D production
Rate_La_6(rho1,d_NP,N,P,rho2,d_N,rho3,d_E,Ea)=(rho1*d_NP*N*P+rho2*d_N*N+rho3*d_E*Ea)


# FunctionDefinition id = Rate_Law_for_reaction_for_Ea_production, name = Rate Law for reaction for Ea production
Rate_La_7(omega,P,Eu)=(omega*P*Eu)


# FunctionDefinition id = Rate_Law_for_reaction_for_N_decay, name = Rate Law for reaction for N decay
Rate_La_8(d_NP,N,P,d_N)=(d_NP*N*P+d_N*N)


# FunctionDefinition id = Rate_Law_for_reaction_for_D_decay, name = Rate Law for reaction for D decay
Rate_La_9(d_D,D,M_Astar)=(d_D*D*M_Astar)


# FunctionDefinition id = Rate_Law_for_reaction_for_N_production, name = Rate Law for reaction for N production
Rate_L_10(eta,C,N,N_max)=(eta*C*(1-N/N_max))


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  r, name = r, constant
par r=1.13

# Parameter:   id =  K_P, name = K_P, constant
par K_P=3.41765197726012E8

# Parameter:   id =  gamma_M_A, name = gamma_M_A, constant
par gamma_M_A=5.6E-6

# Parameter:   id =  n, name = n, constant
par n=5.0

# Parameter:   id =  x, name = x, constant
par x=2.0

# Parameter:   id =  d, name = d, constant
par d=0.001

# Parameter:   id =  M_Astar, name = M_Astar, constant
par M_Astar=1000000.0

# Parameter:   id =  gamma_N, name = gamma_N, constant
par gamma_N=1.0E-5

# Parameter:   id =  theta_M, name = theta_M, constant
par theta_M=4.2E-8

# Parameter:   id =  kappa, name = kappa, constant
par kappa=0.042

# Parameter:   id =  v, name = v, constant
par v=0.029

# Parameter:   id =  omega, name = omega, constant
par omega=2.1E-8

# Parameter:   id =  d_E, name = d_E, constant
par d_E=0.167

# Parameter:   id =  alpha, name = alpha, constant
par alpha=0.021

# Parameter:   id =  k_n, name = k_n, constant
par k_n=1.4E-5

# Parameter:   id =  d_C, name = d_C, constant
par d_C=0.83

# Parameter:   id =  N_max, name = N_max, constant
par N_max=180000.0

# Parameter:   id =  eta, name = eta, constant
par eta=1.33

# Parameter:   id =  d_N, name = d_N, constant
par d_N=0.063

# Parameter:   id =  d_NP, name = d_NP, constant
par d_NP=1.76E-7

# Parameter:   id =  rho1, name = rho1, constant
par rho1=0.15

# Parameter:   id =  rho2, name = rho2, constant
par rho2=0.001

# Parameter:   id =  rho3, name = rho3, constant
par rho3=1.0E-5

# Parameter:   id =  d_D, name = d_D, constant
par d_D=1.4E-7

# Parameter:   id =  k_d, name = k_d, constant
par k_d=5.0E-9

# Parameter:   id =  f_P_M_A, name = f_P_M_A, defined by a Rule

# Parameter:   id =  s, name = s, constant
par s=1000.0

# Parameter:   id =  log_Pneumococcal__P, name = log Pneumococcal (P), defined by a Rule

# assignmentRule: variable = f_P_M_A
f_P_M_A=n^x*M_Astar/(Pneumococ^x+n^x*M_Astar)
aux f_P_M_A=f_P_M_A

# assignmentRule: variable = log_Pneumococcal__P
log_Pneum=log(10, Pneumococ)
aux log_Pneum=log_Pneum

# Reaction: id = reaction_for__P_production, name = reaction for  P production

reaction_=compartme*Rate_La_3(r, Pneumococ, K_P)

# Reaction: id = reaction_for_P_Decay, name = reaction for P Decay

reactio_1=compartme*Rate_La_2(gamma_M_A, f_P_M_A, k_d, Debris__D, M_Astar, Pneumococ, gamma_N, Neutrophi)

# Reaction: id = reaction_for__EU_decay, name = reaction for  EU decay

reactio_2=compartme*Rate_Law_(omega, Pneumococ, Susceptib)

# Reaction: id = reaction_for_Ea_production, name = reaction for Ea production

reactio_3=compartme*Rate_La_7(omega, Pneumococ, Susceptib)

# Reaction: id = reaction_for_Ea_decay, name = reaction for Ea decay

reactio_4=compartme*Rate_La_1(d_E, Epithelia)

# Reaction: id = reaction_for_C_production, name = reaction for C production

reactio_5=compartme*Rate_La_5(alpha, Epithelia, k_n, Neutrophi, v, theta_M, M_Astar, d, kappa, Pneumococ)

# Reaction: id = reaction_for_C_decay, name = reaction for C decay

reactio_6=compartme*Rate_La_4(d_C, proinflam)

# Reaction: id = reaction_for_N_production, name = reaction for N production

reactio_7=compartme*Rate_L_10(eta, proinflam, Neutrophi, N_max)

# Reaction: id = reaction_for_N_decay, name = reaction for N decay

reactio_8=compartme*Rate_La_8(d_NP, Neutrophi, Pneumococ, d_N)

# Reaction: id = reaction_for_D_production, name = reaction for D production

reactio_9=compartme*Rate_La_6(rho1, d_NP, Neutrophi, Pneumococ, rho2, d_N, rho3, d_E, Epithelia)

# Reaction: id = reaction_for_D_decay, name = reaction for D decay

reacti_10=compartme*Rate_La_9(d_D, Debris__D, M_Astar)

# Species:   id = Pneumococci___P, name = Pneumococci  (P), affected by kineticLaw

par Pneumococ=100000.0
aux Pneumococ=Pneumococ
dPneumococ/dt=(1/(compartme))*(( 1.0 * reaction_) + (-1.0 * reactio_1))

# Species:   id = Susceptible_epithelial_cells__EU, name = Susceptible epithelial cells (EU), affected by kineticLaw

par Susceptib=1.0E8
aux Susceptib=Susceptib
dSusceptib/dt=(1/(compartme))*((-1.0 * reactio_2))

# Species:   id = Epithelial_cells_with_bacteria_attached__Ea, name = Epithelial cells with bacteria attached (Ea), affected by kineticLaw

par Epithelia=0.0
aux Epithelia=Epithelia
dEpithelia/dt=(1/(compartme))*(( 1.0 * reactio_3) + (-1.0 * reactio_4))

# Species:   id = proinflammatory_cytokine__C, name = proinflammatory cytokine (C), affected by kineticLaw

par proinflam=0.0
aux proinflam=proinflam
dproinflam/dt=(1/(compartme))*(( 1.0 * reactio_5) + (-1.0 * reactio_6))

# Species:   id = Neutrophils__N, name = Neutrophils (N), affected by kineticLaw

par Neutrophi=0.0
aux Neutrophi=Neutrophi
dNeutrophi/dt=(1/(compartme))*(( 1.0 * reactio_7) + (-1.0 * reactio_8))

# Species:   id = Debris__D, name = Debris (D), affected by kineticLaw

init Debris__D=0.0
dDebris__D/dt=(1/(compartme))*(( 1.0 * reactio_9) + (-1.0 * reacti_10))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

