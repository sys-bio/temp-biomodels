
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Chen2000 - Budding yeast cell cycle
#
# is http://identifiers.org/biomodels.db/MODEL1006230004
# isDescribedBy http://identifiers.org/pubmed/10637314
# is http://identifiers.org/biomodels.db/BIOMD0000000675
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = COMpartment, name = Yeast Cell, constant
par COMpartme=1.0

# Parameter:   id =  Cln2, name = Cln2, defined by a Rule

# Parameter:   id =  ks_n2, name = ks_n2_prime, constant
par ks_n2=0.0

# Parameter:   id =  ks_n2_, name = ks_n2_2prime, constant
par ks_n2_=0.05

# Parameter:   id =  kd_n2, name = kd_n2, constant
par kd_n2=0.1

# Parameter:   id =  Clb2_T, name = Clb2_T, defined by a Rule

# Parameter:   id =  Hct1_T, name = Hct1_T, constant
par Hct1_T=1.0

# Parameter:   id =  ks_b2, name = ks_b2_prime, constant
par ks_b2=0.002

# Parameter:   id =  ks_b2_, name = ks_b2_2prime, constant
par ks_b2_=0.05

# Parameter:   id =  kd_b2, name = kd_b2_prime, constant
par kd_b2=0.01

# Parameter:   id =  kd_b2_, name = kd_b2_2prime, constant
par kd_b2_=2.0

# Parameter:   id =  kd_b2__, name = kd_b2_3prime, constant
par kd_b2__=0.05

# Parameter:   id =  Vd_b2, name = Vd_b2, defined by a Rule

# Parameter:   id =  Clb2, name = Clb2, defined by a Rule

# Parameter:   id =  Clb5, name = Clb5, defined by a Rule

# Parameter:   id =  Sic1, name = Sic1, defined by a Rule

# Parameter:   id =  Clb5_T, name = Clb5_T, defined by a Rule

# Parameter:   id =  ks_b5, name = ks_b5_prime, constant
par ks_b5=0.006

# Parameter:   id =  ks_b5_, name = ks_b5_2prime, constant
par ks_b5_=0.02

# Parameter:   id =  kd_b5, name = kd_b5_prime, constant
par kd_b5=0.1

# Parameter:   id =  kd_b5_, name = kd_b5_2prime, constant
par kd_b5_=0.25

# Parameter:   id =  Vd_b5, name = Vd_b5, defined by a Rule

# Parameter:   id =  Bck2, name = Bck2, defined by a Rule

# Parameter:   id =  Bck2_0, name = Bck2_0, constant
par Bck2_0=0.0027

# Parameter:   id =  Cln3, name = Cln3, defined by a Rule

# Parameter:   id =  Jn3, name = Jn3, constant
par Jn3=6.0

# Parameter:   id =  Dn3, name = Dn3, constant
par Dn3=1.0

# Parameter:   id =  Cln3_max, name = Cln3_max, constant
par Cln3_max=0.02

# Parameter:   id =  Sic1_T, name = Sic1_T, defined by a Rule

# Parameter:   id =  ks_c1, name = ks_c1, constant
par ks_c1=0.02

# Parameter:   id =  ks_c1_, name = ks_c1_2prime, constant
par ks_c1_=0.1

# Parameter:   id =  Clb2_Sic1, name = Clb2_Sic1, defined by a Rule

# Parameter:   id =  kas_b2, name = kas_b2, constant
par kas_b2=50.0

# Parameter:   id =  kdi_b2, name = kdi_b2, constant
par kdi_b2=0.05

# Parameter:   id =  Clb5_Sic1, name = Clb5_Sic1, defined by a Rule

# Parameter:   id =  kas_b5, name = kas_b5, constant
par kas_b5=50.0

# Parameter:   id =  kdi_b5, name = kdi_b5, constant
par kdi_b5=0.05

# Parameter:   id =  Vd2_c1, name = Vd2_c1, defined by a Rule

# Parameter:   id =  kd2_c1, name = kd2_c1, constant
par kd2_c1=0.3

# Parameter:   id =  epsilonc1_n3, name = epsilonc1_n3, constant
par epsilonc1=20.0

# Parameter:   id =  epsilonc1_k2, name = epsilonc1_k2, constant
par epsilon_1=2.0

# Parameter:   id =  epsilonc1_b5, name = epsilonc1_b5, constant
par epsilon_2=1.0

# Parameter:   id =  epsilonc1_b2, name = epsilonc1_b2, constant
par epsilon_3=0.067

# Parameter:   id =  Cdc20_T, name = Cdc20_T, defined by a Rule

# Parameter:   id =  ks_20, name = ks_20_prime, constant
par ks_20=0.005

# Parameter:   id =  ks_20_, name = ks_20_2prime, constant
par ks_20_=0.06

# Parameter:   id =  Cdc20, name = Cdc20, defined by a Rule

# Parameter:   id =  ka_20, name = ka_20, constant
par ka_20=1.0

# Parameter:   id =  ki_20, name = ki_20_prime, constant
par ki_20=0.1

# Parameter:   id =  ki_20_, name = ki_20_2prime, constant
par ki_20_=10.0

# Parameter:   id =  Vi_20, name = Vi_20, defined by a Rule

# Parameter:   id =  Hct1, name = Hct1, defined by a Rule

# Parameter:   id =  ka_t1, name = ka_t1_prime, constant
par ka_t1=0.04

# Parameter:   id =  ka_t1_, name = ka_t1_2prime, constant
par ka_t1_=2.0

# Parameter:   id =  ki_t1, name = ki_t1_prime, constant
par ki_t1=0.0

# Parameter:   id =  ki_t1_, name = ki_t1_2prime, constant
par ki_t1_=0.64

# Parameter:   id =  Vi_t1, name = Vi_t1, defined by a Rule

# Parameter:   id =  Ji_t1, name = Ji_t1, constant
par Ji_t1=0.05

# Parameter:   id =  Ja_t1, name = Ja_t1, constant
par Ja_t1=0.05

# Parameter:   id =  epsiloni_t1_n2, name = epsiloni_t1_n2, constant
par epsiloni_=1.0

# Parameter:   id =  epsiloni_t1_b5, name = epsiloni_t1_b5, constant
par epsilon_4=0.5

# Parameter:   id =  epsiloni_t1_b2, name = epsiloni_t1_b2, constant
par epsilon_5=1.0

# Parameter:   id =  mass, name = mass, defined by a Rule

# Parameter:   id =  mu, name = mu, constant
par mu=0.005776

# Parameter:   id =  ORI, name = ORI, defined by a Rule

# Parameter:   id =  ks_ori, name = ks_ori, constant
par ks_ori=2.0

# Parameter:   id =  kd_ori, name = kd_ori, constant
par kd_ori=0.06

# Parameter:   id =  epsilonori_b2, name = epsilonori_b2, constant
par epsilonor=0.4

# Parameter:   id =  BUD, name = BUD, defined by a Rule

# Parameter:   id =  ks_bud, name = ks_bud, constant
par ks_bud=0.3

# Parameter:   id =  kd_bud, name = kd_bud, constant
par kd_bud=0.06

# Parameter:   id =  epsilonbud_b5, name = epsilonbud_b5, constant
par epsilonbu=1.0

# Parameter:   id =  SPN, name = SPN, defined by a Rule

# Parameter:   id =  ks_spn, name = ks_spn, constant
par ks_spn=0.08

# Parameter:   id =  kd_spn, name = kd_spn, constant
par kd_spn=0.06

# Parameter:   id =  J_spn, name = J_spn, constant
par J_spn=0.2

# Parameter:   id =  SBF, name = SBF, defined by a Rule

# Parameter:   id =  ka_sbf, name = ka_sbf, constant
par ka_sbf=1.0

# Parameter:   id =  ki_sbf, name = ki_sbf_prime, constant
par ki_sbf=0.5

# Parameter:   id =  ki_sbf_, name = ki_sbf_2prime, constant
par ki_sbf_=6.0

# Parameter:   id =  Va_sbf, name = Va_sbf, defined by a Rule

# Parameter:   id =  Ji_sbf, name = Ji_sbf, constant
par Ji_sbf=0.01

# Parameter:   id =  Ja_sbf, name = Ja_sbf, constant
par Ja_sbf=0.01

# Parameter:   id =  epsilonsbf_n3, name = epsilonsbf_n3, constant
par epsilonsb=75.0

# Parameter:   id =  epsilonsbf_b5, name = epsilonsbf_b5, constant
par epsilon_6=0.5

# Parameter:   id =  MBF, name = MBF, defined by a Rule

# Parameter:   id =  Mcm1, name = Mcm1, defined by a Rule

# Parameter:   id =  ka_mcm, name = ka_mcm, constant
par ka_mcm=1.0

# Parameter:   id =  ki_mcm, name = ki_mcm, constant
par ki_mcm=0.15

# Parameter:   id =  Ji_mcm, name = Ji_mcm, constant
par Ji_mcm=1.0

# Parameter:   id =  Ja_mcm, name = Ja_mcm, constant
par Ja_mcm=1.0

# Parameter:   id =  Swi5, name = Swi5, defined by a Rule

# Parameter:   id =  ka_swi, name = ka_swi, constant
par ka_swi=1.0

# Parameter:   id =  ki_swi, name = ki_swi_prime, constant
par ki_swi=0.3

# Parameter:   id =  ki_swi_, name = ki_swi_2prime, constant
par ki_swi_=0.2

# Parameter:   id =  Ji_swi, name = Ji_swi, constant
par Ji_swi=0.1

# Parameter:   id =  Ja_swi, name = Ja_swi, constant
par Ja_swi=0.1

# Parameter:   id =  kd1_c1, name = kd1_c1, constant
par kd1_c1=0.01

# Parameter:   id =  kd_20, name = kd_20, constant
par kd_20=0.08

# Parameter:   id =  Jd2_c1, name = Jd2_c1, constant
par Jd2_c1=0.05

# Parameter:   id =  END_M, name = END_M
par END_M=2000.0

# Parameter:   id =  START_S, name = START_S
par START_S=1000.0

# Parameter:   id =  D, name = D, defined by a Rule

# assignmentRule: variable = Vd_b2
Vd_b2=kd_b2*(Hct1_T-Hct1)+kd_b2_*Hct1+kd_b2__*Cdc20
aux Vd_b2=Vd_b2

# assignmentRule: variable = Clb2
Clb2=Clb2_T-Clb2_Sic1
aux Clb2=Clb2

# assignmentRule: variable = Clb5
Clb5=Clb5_T-Clb5_Sic1
aux Clb5=Clb5

# assignmentRule: variable = Sic1
Sic1=Sic1_T-(Clb2_Sic1+Clb5_Sic1)
aux Sic1=Sic1

# assignmentRule: variable = Vd_b5
Vd_b5=kd_b5+kd_b5_*Cdc20
aux Vd_b5=Vd_b5

# assignmentRule: variable = Bck2
Bck2=Bck2_0*mass
aux Bck2=Bck2

# assignmentRule: variable = Cln3
Cln3=Cln3_max*Dn3*mass/(Jn3+Dn3*mass)
aux Cln3=Cln3

# assignmentRule: variable = Va_sbf
Va_sbf=ka_sbf*(Cln2+epsilonsb*(Cln3+Bck2)+epsilon_6*Clb5)
aux Va_sbf=Va_sbf

# assignmentRule: variable = Vd2_c1
Vd2_c1=kd2_c1*(epsilonc1*Cln3+epsilon_1*Bck2+Cln2+epsilon_2*Clb5+epsilon_3*Clb2)
aux Vd2_c1=Vd2_c1

# assignmentRule: variable = Vi_20
Vi_20= piecew2 
aux Vi_20=Vi_20

# assignmentRule: variable = Vi_t1
Vi_t1=ki_t1+ki_t1_*(Cln3+epsiloni_*Cln2+epsilon_4*Clb5+epsilon_5*Clb2)
aux Vi_t1=Vi_t1

# assignmentRule: variable = SBF
SBF=2*Va_sbf*Ji_sbf/(((ki_sbf+ki_sbf_*Clb2+Va_sbf*Ji_sbf+(ki_sbf+ki_sbf_*Clb2)*Ja_sbf)-Va_sbf)+(((ki_sbf+ki_sbf_*Clb2+Va_sbf*Ji_sbf+(ki_sbf+ki_sbf_*Clb2)*Ja_sbf)-Va_sbf)^2-4*Va_sbf*Ji_sbf*((ki_sbf+ki_sbf_*Clb2)-Va_sbf))^(1/2))
aux SBF=SBF

# assignmentRule: variable = MBF
MBF=SBF
aux MBF=MBF

# assignmentRule: variable = Mcm1
Mcm1=2*ka_mcm*Clb2*Ji_mcm/(((ki_mcm+ka_mcm*Clb2*Ji_mcm+ki_mcm*Ja_mcm)-ka_mcm*Clb2)+(((ki_mcm+ka_mcm*Clb2*Ji_mcm+ki_mcm*Ja_mcm)-ka_mcm*Clb2)^2-4*(ki_mcm-ka_mcm*Clb2)*ka_mcm*Clb2*Ji_mcm)^(1/2))
aux Mcm1=Mcm1

# assignmentRule: variable = Swi5
Swi5=2*ka_swi*Cdc20*Ji_swi/(((ki_swi+ki_swi_*Clb2+ka_swi*Cdc20*Ji_swi+(ki_swi+ki_swi_*Clb2)*Ja_swi)-ka_swi*Cdc20)+(((ki_swi+ki_swi_*Clb2+ka_swi*Cdc20*Ji_swi+(ki_swi+ki_swi_*Clb2)*Ja_swi)-ka_swi*Cdc20)^2-4*((ki_swi+ki_swi_*Clb2)-ka_swi*Cdc20)*ka_swi*Cdc20*Ji_swi)^(1/2))
aux Swi5=Swi5

# assignmentRule: variable = D
D=1.026/mu-32
aux D=D

# rateRule: variable = Cln2
init Cln2=0.0078
dCln2/dt=mass*(ks_n2+ks_n2_*SBF)-kd_n2*Cln2

# rateRule: variable = Clb2_T
init Clb2_T=0.2342
dClb2_T/dt=mass*(ks_b2+ks_b2_*Mcm1)-Vd_b2*Clb2_T

# rateRule: variable = Clb5_T
init Clb5_T=0.0614
dClb5_T/dt=mass*(ks_b5+ks_b5_*MBF)-Vd_b5*Clb5_T

# rateRule: variable = Sic1_T
init Sic1_T=0.1231
dSic1_T/dt=(ks_c1+ks_c1_*Swi5)-Sic1_T*(kd1_c1+Vd2_c1/(Jd2_c1+Sic1_T))

# rateRule: variable = Clb2_Sic1
init Clb2_Sic1=0.079
dClb2_Sic1/dt=kas_b2*Clb2*Sic1-Clb2_Sic1*(kdi_b2+Vd_b2+kd1_c1+Vd2_c1/(Jd2_c1+Sic1_T))

# rateRule: variable = Clb5_Sic1
init Clb5_Sic1=0.0207
dClb5_Sic1/dt=kas_b5*Clb5*Sic1-Clb5_Sic1*(kdi_b5+Vd_b5+kd1_c1+Vd2_c1/(Jd2_c1+Sic1_T))

# rateRule: variable = Cdc20_T
init Cdc20_T=0.8332
dCdc20_T/dt=(ks_20+ks_20_*Clb2)-kd_20*Cdc20_T

# rateRule: variable = Cdc20
init Cdc20=0.6848
dCdc20/dt=ka_20*(Cdc20_T-Cdc20)-Cdc20*(Vi_20+kd_20)

# rateRule: variable = Hct1
init Hct1=0.9946
dHct1/dt=(ka_t1+ka_t1_*Cdc20)*(Hct1_T-Hct1)/((Ja_t1+Hct1_T)-Hct1)-Vi_t1*Hct1/(Ji_t1+Hct1)

# rateRule: variable = mass
init mass=0.6608
dmass/dt=mu*mass

# rateRule: variable = ORI
init ORI=0.0
dORI/dt=ks_ori*(Clb5+epsilonor*Clb2)-kd_ori*ORI

# rateRule: variable = BUD
init BUD=0.0
dBUD/dt=ks_bud*(Cln2+Cln3+epsilonbu*Clb5)-kd_bud*BUD

# rateRule: variable = SPN
init SPN=0.0
dSPN/dt=ks_spn*Clb2/(J_spn+Clb2)-kd_spn*SPN

# event : Event_detection_for_END_M
Event_det=if (SPN >= 1) then (1.5) else (0.2)
global 1 {Event_det - 1.1} {END_M=t}

# event : Event_detection_for_Cell_Division_and_BUD_SPN_reset
Event_d_1=if (Clb2 < 0.3) then (1.5) else (0.2)
global 1 {Event_d_1 - 1.1} {mass=exp((-1)*mu*D)*mass;BUD=0;SPN=0}

# event : Event_detection_for_START_S
Event_d_2=if (ORI > 1) then (1.5) else (0.2)
global 1 {Event_d_2 - 1.1} {START_S=t;END_M=t+1000}

# event : Event_detection_for_ORI_reset
Event_d_3=if ((Clb2+Clb5) < 0.2) then (1.5) else (0.2)
global 1 {Event_d_3 - 1.1} {ORI=0}


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if ((t  >=  END_M) && (t  <  (END_M+12))) then (10-9.9*(t-END_M)/12) else (0.1)

piecew2=if ((t  >=  START_S) && (t  <  END_M)) then (10) else ( piecew1 )


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

