
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Friedland2009_Ara_RTC3_counter
#
# is http://identifiers.org/biomodels.db/MODEL1012220006
# is http://identifiers.org/biomodels.db/BIOMD0000000301
# isDescribedBy http://identifiers.org/pubmed/19478183
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = cell, name = cell, constant
par cell=1.0

# Parameter:   id =  cAra, name = cAra, constant
par cAra=3.0E-4

# Parameter:   id =  pulse_flag, name = pulse_flag
par pulse_fla=0.0

# Parameter:   id =  dAra, name = dAra, constant
par dAra=0.1201

# Parameter:   id =  sT, name = sT, constant
par sT=0.8467

# Parameter:   id =  k_ara, name = k_ara, constant
par k_ara=0.0571

# Parameter:   id =  s0_taRNA, name = s0_taRNA, constant
par s0_taRNA=8.0E-4

# Parameter:   id =  d_taRNA, name = d_taRNA, constant
par d_taRNA=0.1177

# Parameter:   id =  s0_mT7cr, name = s0_mT7cr, constant
par s0_mT7cr=0.0252

# Parameter:   id =  d_mT7, name = d_mT7, constant
par d_mT7=0.0706

# Parameter:   id =  s0_mGFPcr, name = s0_mGFPcr, constant
par s0_mGFPcr=0.0123

# Parameter:   id =  k_pT3, name = k_pT3, constant
par k_pT3=3.006

# Parameter:   id =  n3, name = n3, constant
par n3=0.8892

# Parameter:   id =  km3, name = km3, constant
par km3=7.9075

# Parameter:   id =  d_mGFP, name = d_mGFP, constant
par d_mGFP=0.07

# Parameter:   id =  s0_pT7, name = s0_pT7, constant
par s0_pT7=3.0E-4

# Parameter:   id =  s_pT7k, name = s_pT7k, constant
par s_pT7k=0.0766

# Parameter:   id =  s0_pGFP, name = s0_pGFP, constant
par s0_pGFP=0.1007

# Parameter:   id =  s_pGFPk, name = s_pGFPk, constant
par s_pGFPk=0.9923

# Parameter:   id =  d_pT7, name = d_pT7, constant
par d_pT7=0.0056

# Parameter:   id =  d_pGFP, name = d_pGFP, constant
par d_pGFP=0.003

# Parameter:   id =  s0_mT3cr, name = s0_mT3cr, constant
par s0_mT3cr=3.0E-4

# Parameter:   id =  k_pT7, name = k_pT7, constant
par k_pT7=3.8009

# Parameter:   id =  n7, name = n7, constant
par n7=2.602

# Parameter:   id =  km7, name = km7, constant
par km7=3.0455

# Parameter:   id =  d_mT3, name = d_mT3, constant
par d_mT3=0.0701

# Parameter:   id =  s0_pT3, name = s0_pT3, constant
par s0_pT3=0.0

# Parameter:   id =  s_pT3k, name = s_pT3k, constant
par s_pT3k=0.0115

# Parameter:   id =  d_pT3, name = d_pT3, constant
par d_pT3=0.0069

# Parameter:   id =  pulse_interval, name = pulse_interval, constant
par pulse_int=20.0

# Parameter:   id =  pulse1_start, name = pulse1_start, constant
par pulse1_st=0.01

# Parameter:   id =  pulse1_length, name = pulse1_length, constant
par pulse1_le=11.0

# Parameter:   id =  pulse_conc, name = pulse_conc, constant
par pulse_con=0.01

# Parameter:   id =  pulse2_start, name = pulse2_start, defined by a Rule

# Parameter:   id =  pulse2_length, name = pulse2_length, constant
par pulse2_le=11.0

# Parameter:   id =  pulse3_start, name = pulse3_start, defined by a Rule

# Parameter:   id =  pulse3_length, name = pulse3_length, constant
par pulse3_le=22.0

# assignmentRule: variable = pulse2_start
pulse2_st=pulse1_st+pulse1_le+pulse_int
aux pulse2_st=pulse2_st

# assignmentRule: variable = pulse3_start
pulse3_st=pulse2_st+pulse2_le+pulse_int
aux pulse3_st=pulse3_st

# Reaction: id = r0

r0=cell* piecew1 

# Reaction: id = r1a

r1a=cell*(sT*ara/(ara+k_ara)+s0_taRNA)

# Reaction: id = r1b

r1b=cell*d_taRNA*taRNA

# Reaction: id = r2a

r2a=cell*s0_mT7cr

# Reaction: id = r2b

r2b=cell*d_mT7*mT7cr

# Reaction: id = r3a

r3a=cell*(s0_mGFPcr+k_pT3*pT3^n3/(km3^n3+pT3^n3))

# Reaction: id = r3b

r3b=cell*d_mGFP*mGFPcr

# Reaction: id = r6

r6=cell*(s0_pT7*mT7cr+s_pT7k*mT7cr*taRNA)

# Reaction: id = r7

r7=cell*(s0_pGFP*mGFPcr+s_pGFPk*mGFPcr*taRNA)

# Reaction: id = r8

r8=cell*d_pT7*pT7

# Reaction: id = r9

r9=cell*d_pGFP*pGFP

# Reaction: id = r10a

r10a=cell*(s0_mT3cr+k_pT7*pT7^n7/(km7^n7+pT7^n7))

# Reaction: id = r10b

r10b=cell*d_mT3*mT3cr

# Reaction: id = r11

r11=cell*(s0_pT3*mT3cr+s_pT3k*taRNA*mT3cr)

# Reaction: id = r12

r12=cell*d_pT3*pT3

# Species:   id = taRNA, name = taRNA, affected by kineticLaw

init taRNA=0.006796941377
dtaRNA/dt=(1/(cell))*(( 1.0 * r1a) + (-1.0 * r1b))

# Species:   id = mT7cr, name = mT7cr, affected by kineticLaw

init mT7cr=0.3569405099
dmT7cr/dt=(1/(cell))*(( 1.0 * r2a) + (-1.0 * r2b))

# Species:   id = mGFPcr, name = mGFPcr, affected by kineticLaw

init mGFPcr=0.176991329
dmGFPcr/dt=(1/(cell))*(( 1.0 * r3a) + (-1.0 * r3b))

# Species:   id = pT7, name = pT7, affected by kineticLaw

init pT7=0.05230744612
dpT7/dt=(1/(cell))*(( 1.0 * r6) + (-1.0 * r8))

# Species:   id = pGFP, name = pGFP, affected by kineticLaw

init pGFP=6.338921181
dpGFP/dt=(1/(cell))*(( 1.0 * r7) + (-1.0 * r9))

# Species:   id = ara, name = ara, affected by kineticLaw
# Species is changed by 3 event(s)
init ara=0.0
dara/dt=(1/(cell))*((-1.0 * r0))

# Species:   id = pT3, name = pT3, affected by kineticLaw

init pT3=6.41674E-5
dpT3/dt=(1/(cell))*(( 1.0 * r11) + (-1.0 * r12))

# Species:   id = mT3cr, name = mT3cr, affected by kineticLaw

init mT3cr=0.00566438
dmT3cr/dt=(1/(cell))*(( 1.0 * r10a) + (-1.0 * r10b))

# event : pulse_start1
pulse_sta=if ((t >= pulse1_st) && (t <= (pulse1_st+pulse1_le))) then (1.5) else (0.2)
global 1 {pulse_sta - 1.1} {pulse_flag=1;ara=pulse_con}

# event : pulse_start2
pulse_s_1=if ((t >= pulse2_st) && (t <= (pulse2_st+pulse2_le))) then (1.5) else (0.2)
global 1 {pulse_s_1 - 1.1} {pulse_flag=1;ara=pulse_con}

# event : pulse_start3
pulse_s_2=if ((t >= pulse3_st) && (t <= (pulse3_st+pulse3_le))) then (1.5) else (0.2)
global 1 {pulse_s_2 - 1.1} {pulse_flag=1;ara=pulse_con}

# event : pulse_end1
pulse_end=if ((t < pulse2_st) && (t > (pulse1_st+pulse1_le))) then (1.5) else (0.2)
global 1 {pulse_end - 1.1} {pulse_flag=0}

# event : pulse_end2
pulse_e_1=if ((t < pulse3_st) && (t > (pulse2_st+pulse2_le))) then (1.5) else (0.2)
global 1 {pulse_e_1 - 1.1} {pulse_flag=0}

# event : pulse_end3
pulse_e_2=if (t > (pulse3_st+pulse3_le)) then (1.5) else (0.2)
global 1 {pulse_e_2 - 1.1} {pulse_flag=0}


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if ((pulse_fla  ==  1) && (ara  >  0)) then (cAra) else (dAra*ara)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

