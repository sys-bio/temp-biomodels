
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Arnold2011_Damour2007_RuBisCO-CalvinCycle
#
# is http://identifiers.org/biomodels.db/MODEL1109270003
# is http://identifiers.org/biomodels.db/BIOMD0000000387
# isDescribedBy http://identifiers.org/pubmed/22001849
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = oxygenation, name = Oxygenation
oxygenati(phi,Vc,Vj,Vp)=(phi*((Vc+Vj-abs(Vc-Vj))/2+Vp-abs((Vc+Vj-abs(Vc-Vj))/2-Vp))/2)


# FunctionDefinition id = carboxylation, name = Carboxylation
carboxyla(Vc,Vj,Vp)=(((Vc+Vj-abs(Vc-Vj))/2+Vp-abs((Vc+Vj-abs(Vc-Vj))/2-Vp))/2)


# FunctionDefinition id = NADPH_production, name = NADPH production
NADPH_pro(j,S1,Nt)=(j/2*S1/Nt)


# FunctionDefinition id = PGA_consumption, name = PGA consumption
PGA_consu(S1,Rp,R,Nt,Vc)=(S1/Rp*R/Nt*Vc)


# Compartment: id = chloroplast, name = chloroplast, constant
par chloropla=1.0

# Parameter:   id =  Rp, name = Rp, constant
par Rp=3.2

# Parameter:   id =  Nt, name = Nt, constant
par Nt=0.5

# Parameter:   id =  alpha, name = alpha, constant
par alpha=0.24

# Parameter:   id =  J, name = J, defined by a Rule

# Parameter:   id =  Jmax, name = Jmax, constant
par Jmax=142.047003854271

# Parameter:   id =  Gamma, name = Gamma, defined by a Rule

# Parameter:   id =  Q, name = Q, constant
par Q=1000.0

# Parameter:   id =  Vcmax, name = Vcmax, constant
par Vcmax=1.91141270310584

# Parameter:   id =  Kc, name = Kc, constant
par Kc=26.7125313821435

# Parameter:   id =  Ko, name = Ko, constant
par Ko=187891.032274486

# Parameter:   id =  Vj, name = Vj, defined by a Rule

# Parameter:   id =  phi, name = phi, defined by a Rule

# Parameter:   id =  Vc, name = Vc, defined by a Rule

# Parameter:   id =  Vp, name = Vp, defined by a Rule

# Parameter:   id =  TPU, name = TPU, constant
par TPU=0.259027750094988

# Parameter:   id =  Cst, name = Cst, defined by a Rule

# Parameter:   id =  a, name = a, constant
par a=0.0434

# assignmentRule: variable = Gamma
Gamma=O2/(2*exp(-7.458+37830/(8.3143*298.15)))
aux Gamma=Gamma

# assignmentRule: variable = Cst
Cst=exp((-0.0398)*starch*a)
aux Cst=Cst

# assignmentRule: variable = phi
phi=0.21*O2/Ko/CO2/Kc
aux phi=phi

# assignmentRule: variable = Vc
Vc=Vcmax*CO2/((1+O2/Ko)*(CO2+Kc))
aux Vc=Vc

# assignmentRule: variable = Vp
Vp=3*TPU/(1-Gamma/CO2)
aux Vp=Vp

# assignmentRule: variable = NADP
NADP=Nt-NADPH
aux NADP=NADP

# assignmentRule: variable = J
J=Cst*alpha*0.9*Q/(1+(alpha*0.9*Q/Jmax)^2)^(0.5)/(65*0.5)
aux J=J

# assignmentRule: variable = Vj
Vj=J/4*CO2/(CO2+2*Gamma)
aux Vj=Vj

# Reaction: id = PGA_prod_Vc, name = PGA production - v_c

PGA_prod_=chloropla*carboxyla(Vc, Vj, Vp)

# Reaction: id = PGA_prod_Vo, name = PGA production - v_o

PGA_pro_1=chloropla*oxygenati(phi, Vc, Vj, Vp)

# Reaction: id = PGA_cons, name = PGA consumption

PGA_cons=chloropla*PGA_consu(PGA, Rp, NADPH, Nt, Vcmax)

# Reaction: id = NADPH_prod, name = NADPH production

NADPH_p_1=chloropla*NADPH_pro(J, NADP, Nt)

# Species:   id = RuBP, name = RuBP, constant
par RuBP=2.0


# Species:   id = PGA, name = PGA, affected by kineticLaw

init PGA=2.4
dPGA/dt=(1/(chloropla))*(( 2.0 * PGA_prod_) + ( 1.5 * PGA_pro_1) + (-1.0 * PGA_cons))

# Species:   id = NADPH, name = NADPH, affected by kineticLaw

init NADPH=0.21
dNADPH/dt=(1/(chloropla))*((-2.0 * PGA_prod_) + (-2.0 * PGA_pro_1) + ( 1.0 * NADPH_p_1))

# Species:   id = CO2, name = CO2, constant
par CO2=24.5


# Species:   id = O2, name = O2, constant
par O2=21000.0


# Species:   id = NADP, name = NADP, involved in a rule 

# Species:   id = starch, name = starch, constant
par starch=0.5


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

