
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Wang2016/2 - oncolytic efficacy of M1 virus-SNT model
#
# isDerivedFrom http://identifiers.org/go/GO:0002418
# isDerivedFrom http://identifiers.org/mamo/MAMO_0000046
# isDerivedFrom http://identifiers.org/ncit/C62713
# isDerivedFrom http://identifiers.org/taxonomy/9606
# isDerivedFrom http://identifiers.org/biomodels.db/BIOMD0000000780
# isDerivedFrom http://identifiers.org/biomodels.db/MODEL1908060001
# isDescribedBy http://identifiers.org/biomodels.db/BIOMD0000000780
# isDescribedBy http://identifiers.org/biomodels.db/MODEL1908060001
# isDescribedBy http://identifiers.org/pubmed/26976483
# is http://identifiers.org/biomodels.db/MODEL1908060002
# is http://identifiers.org/biomodels.db/BIOMD0000000781
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = death, name = death
death(d,e,sub)=((d+e)*sub)


# FunctionDefinition id = decrease, name = decrease
decrease(u,sub,mod)=(u*sub*mod)


# FunctionDefinition id = growth, name = growth
growth(r,mod,pro,u)=(r*u*mod*pro)


# Compartment: id = tme, name = tme, constant
par tme=1.0

# Parameter:   id =  a, name = a, constant
par a=0.02

# Parameter:   id =  d, name = d, constant
par d=0.02

# Parameter:   id =  u1, name = u1, constant
par u1=0.2

# Parameter:   id =  u2, name = u2, constant
par u2=0.5

# Parameter:   id =  r1, name = r1, constant
par r1=0.8

# Parameter:   id =  e1, name = e1, constant
par e1=0.01

# Parameter:   id =  r2, name = r2, constant
par r2=0.8

# Parameter:   id =  e2, name = e2, constant
par e2=0.008

# Parameter:   id =  Q1, name = Q1, defined by a Rule

# Parameter:   id =  Q2, name = Q2, defined by a Rule

# assignmentRule: variable = Q1
Q1=a*r1*u1/(d*(d+e1))
aux Q1=Q1

# assignmentRule: variable = Q2
Q2=a*r2*u2/(d*(d+e2))
aux Q2=Q2

# Reaction: id = nutrient_supply, name = nutrient supply

nutrient_=tme*Constant_(a)

# Reaction: id = nutrient_decay, name = nutrient decay

nutrien_1=tme*d*S

# Reaction: id = nutrient_consumption_N, name = nutrient consumption N

nutrien_2=tme*decrease(u1, S, N)

# Reaction: id = nutrient_consumption_T, name = nutrient consumption T

nutrien_3=tme*decrease(u2, S, T_renamed)

# Reaction: id = normal_cell_growth, name = normal cell growth

normal_ce=tme*growth(r1, S, N, u1)

# Reaction: id = normal_cell_death, name = normal cell death

normal__1=tme*death(d, e1, N)

# Reaction: id = tumor_growth, name = tumor growth

tumor_gro=tme*growth(r2, S, T_renamed, u2)

# Reaction: id = tumor_death, name = tumor death

tumor_dea=tme*death(d, e2, T_renamed)

# Species:   id = S, name = S, affected by kineticLaw

init S=0.1
dS/dt=(1/(tme))*(( 1.0 * nutrient_) + (-1.0 * nutrien_1) + (-1.0 * nutrien_2) + (-1.0 * nutrien_3))

# Species:   id = N, name = N, affected by kineticLaw

init N=0.2
dN/dt=(1/(tme))*(( 1.0 * normal_ce) + (-1.0 * normal__1))

# Species:   id = T, name = T, affected by kineticLaw

par T_renamed=0.1
aux T_renamed=T_renamed
dT_renamed/dt=(1/(tme))*(( 1.0 * tumor_gro) + (-1.0 * tumor_dea))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

