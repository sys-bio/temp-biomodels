
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Westerhoff2020 - systems biology model of the coronavirus pandemic 2020
#
# is http://identifiers.org/biomodels.db/MODEL2102120001
# is http://identifiers.org/biomodels.db/BIOMD0000000988
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = population_growth, name = population growth
populatio(S,T,k)=(S*T*k)


# Compartment: id = default, name = default, constant
par default=1.0

# Parameter:   id =  Testing_Randome, name = test_random, constant
par Testing_R=8.0E-4

# Parameter:   id =  Total_Infection_coefficient, name = infection_rate, defined by a Rule

# Parameter:   id =  Normal_death_rate_constant_0, name = death_rate_natural, constant
par Normal_de=3.29E-5

# Parameter:   id =  Corona_death_rate_constant, name = death_rate_corona, constant
par Corona_de=0.002

# Parameter:   id =  Birth_rate, name = birth_rate, constant
par Birth_rat=3.29E-5

# Parameter:   id =  Testing_for_Symptoms, name = test_symptoms, constant
par Testing_f=500.0

# Parameter:   id =  Corona_recover, name = recovery_rate, constant
par Corona_re=0.067

# Parameter:   id =  Symptoms_appear, name = symptoms_rate, constant
par Symptoms_=0.30165

# Parameter:   id =  Infection_from_non_tested_no_symptoms_0, name = iota_ntns, constant
par Infection=0.508

# Parameter:   id =  Infection_from_non_tested_symptoms, name = iota_nts, constant
par Infecti_1=0.25

# Parameter:   id =  Infection_from_tested_no_symptoms_0, name = iota_tns, constant
par Infecti_2=0.025

# Parameter:   id =  Infection_from_tested_symptoms, name = iota_ts, constant
par Infecti_3=0.025

# Parameter:   id =  Social_Distance, name = social_distance, defined by a Rule

# Parameter:   id =  Government_induced_isolation_factor_0, name = lockdown_severity, defined by a Rule

# Parameter:   id =  Time_government_action_0, name = t_government_action, constant
par Time_gove=15.0

# Parameter:   id =  lockdown_duration, name = t_lockdown, constant
par lockdown_=7.0

# Parameter:   id =  lockdownPause_duration_0, name = t_lockdown_pause, constant
par lockdownP=7.0

# Parameter:   id =  n_lockdowns, name = n_lockdowns, defined by a Rule

# Parameter:   id =  n_pauses, name = n_pauses, constant
par n_pauses=0.0

# Parameter:   id =  intermittent_time, name = t_intermittent, defined by a Rule

# Parameter:   id =  timeFraction_lockdown_0, name = t_lockdown_effective, constant
par timeFract=0.55

# Parameter:   id =  number_cutoff, name = number_cutoff, constant
par number_cu=0.0

# Parameter:   id =  symptomatic_numberTolerance_0, name = symptoms_tolerance, constant
par symptomat=141.0

# Parameter:   id =  governmentResponseFactorToDiagnosedInfected_0, name = bool_adaptive_lockdown, constant
par governm_1=0.0

# Parameter:   id =  social_distancing_factor, name = social_distancing_factor, constant
par social__1=10.0

# Parameter:   id =  Social_Distance_base, name = social_distance_base, constant
par Social__2=534700.0

# assignmentRule: variable = infected_tested_div10
infecte_2=infecte_1*default/10
aux infecte_2=infecte_2

# assignmentRule: variable = total_population_0
total_pop=infected_+infecte_1+uninfecte+uninfec_1+recover_1+recovered+symptom_2+symptom_1
aux total_pop=total_pop

# assignmentRule: variable = recovered_corona_perc_0
recover_2=(recover_1+recovered)*100/total_pop
aux recover_2=recover_2

# assignmentRule: variable = registered_corona_0
registere=infecte_1+symptom_1+recovered+dead_coro
aux registere=registere

# assignmentRule: variable = dead_corona_perc_0
dead_co_2=(dead_co_1+dead_coro)*100/total_pop
aux dead_co_2=dead_co_2

# assignmentRule: variable = dead_noncorona_perc_0
dead_no_1=dead_nonc*100/total_pop
aux dead_no_1=dead_no_1

# assignmentRule: variable = frac_coronaDeadOfAllDead_0
frac_coro=100*dead_co_2/(dead_co_2+dead_no_1)
aux frac_coro=frac_coro

# assignmentRule: variable = epidemic_extinguished_bool_0
epidemic_= piecew1 
aux epidemic_=epidemic_

# assignmentRule: variable = n_lockdowns
# the operator Time_government_action_0 is not supported by xpp
# the formula is : piecewise(1, (time-Time_government_action_0) > (0*lockdown_duration), 0)+ piecew2 + piecew3 + piecew4 + piecew5 + piecew6 + piecew7 + piecew8 + piecew9 + piecew10 + piecew11 + piecew12 + piecew13 + piecew14 + piecew15 + piecew16 + piecew17 + piecew18 + piecew19 + piecew20 + piecew21 + piecew22 + piecew23 + piecew24 + piecew25 + piecew26 + piecew27 + piecew28 + piecew29 + piecew30 + piecew31 + piecew32 + piecew33 + piecew34 + piecew35 + piecew36 + piecew37 + piecew38 + piecew39 + piecew40 + piecew41 + piecew42 + piecew43 + piecew44 + piecew45 + piecew46 + piecew47 + piecew48 + piecew49 + piecew50 + piecew51 + piecew52 
# the operator lockdown_duration is not supported by xpp
# the formula is : piecewise(1, (time-Time_government_action_0) > (0*lockdown_duration), 0)+ piecew2 + piecew3 + piecew4 + piecew5 + piecew6 + piecew7 + piecew8 + piecew9 + piecew10 + piecew11 + piecew12 + piecew13 + piecew14 + piecew15 + piecew16 + piecew17 + piecew18 + piecew19 + piecew20 + piecew21 + piecew22 + piecew23 + piecew24 + piecew25 + piecew26 + piecew27 + piecew28 + piecew29 + piecew30 + piecew31 + piecew32 + piecew33 + piecew34 + piecew35 + piecew36 + piecew37 + piecew38 + piecew39 + piecew40 + piecew41 + piecew42 + piecew43 + piecew44 + piecew45 + piecew46 + piecew47 + piecew48 + piecew49 + piecew50 + piecew51 + piecew52 
#Rule ignored : there are some unsupported functions !!

# assignmentRule: variable = intermittent_time
intermitt=t-n_lockdow*lockdown_-n_pauses*lockdownP
aux intermitt=intermitt

# assignmentRule: variable = Government_induced_isolation_factor_0
# the operator social_distancing_factor is not supported by xpp
# the formula is : social_distancing_factor*(1+2.5*symptoms_tested_0/symptomatic_numberTolerance_0* piecew53 )
# the operator symptoms_tested_0 is not supported by xpp
# the formula is : social_distancing_factor*(1+2.5*symptoms_tested_0/symptomatic_numberTolerance_0* piecew53 )
# the operator symptomatic_numberTolerance_0 is not supported by xpp
# the formula is : social_distancing_factor*(1+2.5*symptoms_tested_0/symptomatic_numberTolerance_0* piecew53 )
#Rule ignored : there are some unsupported functions !!

# assignmentRule: variable = Social_Distance
Social_Di= piecew54 
aux Social_Di=Social_Di

# assignmentRule: variable = Total_Infection_coefficient
Total_Inf=(infected_*Infection+symptom_2*Infecti_1+infecte_1*Infecti_2+symptom_1*Infecti_3)*(1-epidemic_)/Social_Di
aux Total_Inf=Total_Inf

# Reaction: id = re1, name = infection_uninfected_nt

re1=default*Total_Inf*uninfecte

# Reaction: id = re2, name = test_uninfected

re2=default*Testing_R*uninfecte

# Reaction: id = re3, name = infection_uninfected_t

re3=default*Total_Inf*uninfec_1

# Reaction: id = re4, name = test_infected

re4=default*Testing_R*infected_

# Reaction: id = re5, name = symptoms_infected_nt

re5=default*Symptoms_*infected_

# Reaction: id = re6, name = symptoms_infected_t

re6=default*Symptoms_*infecte_1

# Reaction: id = re7, name = test_symptoms

re7=default*Testing_f*symptom_2

# Reaction: id = re8, name = death_c_symptoms_t

re8=default*Corona_de*symptom_1

# Reaction: id = re9, name = recovery_symptoms_t

re9=default*Corona_re*symptom_1

# Reaction: id = re10, name = recovery_symptoms_nt

re10=default*Corona_re*symptom_2

# Reaction: id = re11, name = population_growth

re11=default*populatio(susceptib, total_pop, Birth_rat)

# Reaction: id = re12, name = death_nc_uninfected_nt

re12=default*Normal_de*uninfecte

# Reaction: id = re13, name = death_recovered_t

re13=default*Normal_de*recovered

# Reaction: id = re14, name = death_nc_recovered_nt

re14=default*Normal_de*recover_1

# Reaction: id = re15, name = death_c_infected_t

re15=default*Corona_de*infecte_1

# Reaction: id = re16, name = death_c_infected_nt

re16=default*Corona_de*infected_

# Reaction: id = re17, name = death_nc_uninfected_t

re17=default*Normal_de*uninfec_1

# Reaction: id = re18, name = death_c_symptoms_nt

re18=default*Corona_de*symptom_2

# Species:   id = infected_nontested_0, name = infected_nontested, affected by kineticLaw

par infected_=2.0
aux infected_=infected_
dinfected_/dt=(1/(default))*(( 1.0 * re1) + ( 1.0 * re3) + (-1.0 * re4) + (-1.0 * re5) + (-1.0 * re16))

# Species:   id = infected_tested_0, name = infected_tested, affected by kineticLaw

par infecte_1=1.0
aux infecte_1=infecte_1
dinfecte_1/dt=(1/(default))*(( 1.0 * re4) + (-1.0 * re6) + (-1.0 * re15))

# Species:   id = uninfected_nontested_0, name = uninfected_nontested, affected by kineticLaw

par uninfecte=630000.0
aux uninfecte=uninfecte
duninfecte/dt=(1/(default))*((-1.0 * re1) + (-1.0 * re2) + ( 1.0 * re11) + (-1.0 * re12))

# Species:   id = uninfected_tested_0, name = uninfected_tested, affected by kineticLaw

par uninfec_1=0.0
aux uninfec_1=uninfec_1
duninfec_1/dt=(1/(default))*(( 1.0 * re2) + (-1.0 * re3) + (-1.0 * re17))

# Species:   id = symptoms_tested_0, name = symptoms_tested, affected by kineticLaw

par symptom_1=0.0
aux symptom_1=symptom_1
dsymptom_1/dt=(1/(default))*(( 1.0 * re6) + ( 1.0 * re7) + (-1.0 * re8) + (-1.0 * re9))

# Species:   id = symptoms_nontested_0, name = symptoms_nontested, affected by kineticLaw

par symptom_2=0.0
aux symptom_2=symptom_2
dsymptom_2/dt=(1/(default))*(( 1.0 * re5) + (-1.0 * re7) + (-1.0 * re10) + (-1.0 * re18))

# Species:   id = recovered_tested_0, name = recovered_tested, affected by kineticLaw

par recovered=0.0
aux recovered=recovered
drecovered/dt=(1/(default))*(( 1.0 * re9) + (-1.0 * re13))

# Species:   id = recovered_nontested_0, name = recovered_nontested, affected by kineticLaw

par recover_1=0.0
aux recover_1=recover_1
drecover_1/dt=(1/(default))*(( 1.0 * re10) + (-1.0 * re14))

# Species:   id = susceptible_0, name = susceptible, constant
par susceptib=1.0


# Species:   id = dead_corona_tested_0, name = dead_corona_tested, affected by kineticLaw

par dead_coro=0.0
aux dead_coro=dead_coro
ddead_coro/dt=(1/(default))*(( 1.0 * re8) + ( 1.0 * re15))

# Species:   id = dead_corona_nontested_0, name = dead_corona_nontested, affected by kineticLaw

par dead_co_1=0.0
aux dead_co_1=dead_co_1
ddead_co_1/dt=(1/(default))*(( 1.0 * re16) + ( 1.0 * re18))

# Species:   id = dead_noncorona_0, name = dead_noncorona, affected by kineticLaw

par dead_nonc=0.0
aux dead_nonc=dead_nonc
ddead_nonc/dt=(1/(default))*(( 1.0 * re12) + ( 1.0 * re13) + ( 1.0 * re14) + ( 1.0 * re17))

# Species:   id = total_population_0, name = total_population, involved in a rule 

# Species:   id = registered_corona_0, name = registered_corona, involved in a rule 

# Species:   id = dead_corona_perc_0, name = dead_corona_perc, involved in a rule 

# Species:   id = recovered_corona_perc_0, name = recovered_corona_perc, involved in a rule 

# Species:   id = dead_noncorona_perc_0, name = dead_noncorona_perc, involved in a rule 

# Species:   id = frac_coronaDeadOfAllDead_0, name = frac_coronaDeadOfAllDead, involved in a rule 

# Species:   id = epidemic_extinguished_bool_0, name = epidemic_extinguished_bool, involved in a rule 

# Species:   id = infected_tested_div10, name = infected_tested_div10, involved in a rule 


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if ((infected_+infecte_1+symptom_2+symptom_1)  <  number_cu) then (1) else (0)

piecew2=if ((t-Time_gove)  >  (1*lockdown_)) then (1) else (0)

piecew3=if ((t-Time_gove)  >  (2*lockdown_)) then (1) else (0)

piecew4=if ((t-Time_gove)  >  (3*lockdown_)) then (1) else (0)

piecew5=if ((t-Time_gove)  >  (4*lockdown_)) then (1) else (0)

piecew6=if ((t-Time_gove)  >  (5*lockdown_)) then (1) else (0)

piecew7=if ((t-Time_gove)  >  (6*lockdown_)) then (1) else (0)

piecew8=if ((t-Time_gove)  >  (7*lockdown_)) then (1) else (0)

piecew9=if ((t-Time_gove)  >  (8*lockdown_)) then (1) else (0)

piecew10=if ((t-Time_gove)  >  (9*lockdown_)) then (1) else (0)

piecew11=if ((t-Time_gove)  >  (10*lockdown_)) then (1) else (0)

piecew12=if ((t-Time_gove)  >  (11*lockdown_)) then (1) else (0)

piecew13=if ((t-Time_gove)  >  (12*lockdown_)) then (1) else (0)

piecew14=if ((t-Time_gove)  >  (13*lockdown_)) then (1) else (0)

piecew15=if ((t-Time_gove)  >  (14*lockdown_)) then (1) else (0)

piecew16=if ((t-Time_gove)  >  (15*lockdown_)) then (1) else (0)

piecew17=if ((t-Time_gove)  >  (16*lockdown_)) then (1) else (0)

piecew18=if ((t-Time_gove)  >  (17*lockdown_)) then (1) else (0)

piecew19=if ((t-Time_gove)  >  (18*lockdown_)) then (1) else (0)

piecew20=if ((t-Time_gove)  >  (19*lockdown_)) then (1) else (0)

piecew21=if ((t-Time_gove)  >  (20*lockdown_)) then (1) else (0)

piecew22=if ((t-Time_gove)  >  (21*lockdown_)) then (1) else (0)

piecew23=if ((t-Time_gove)  >  (22*lockdown_)) then (1) else (0)

piecew24=if ((t-Time_gove)  >  (23*lockdown_)) then (1) else (0)

piecew25=if ((t-Time_gove)  >  (24*lockdown_)) then (1) else (0)

piecew26=if ((t-Time_gove)  >  (25*lockdown_)) then (1) else (0)

piecew27=if ((t-Time_gove)  >  (26*lockdown_)) then (1) else (0)

piecew28=if ((t-Time_gove)  >  (27*lockdown_)) then (1) else (0)

piecew29=if ((t-Time_gove)  >  (28*lockdown_)) then (1) else (0)

piecew30=if ((t-Time_gove)  >  (29*lockdown_)) then (1) else (0)

piecew31=if ((t-Time_gove)  >  (30*lockdown_)) then (1) else (0)

piecew32=if ((t-Time_gove)  >  (31*lockdown_)) then (1) else (0)

piecew33=if ((t-Time_gove)  >  (32*lockdown_)) then (1) else (0)

piecew34=if ((t-Time_gove)  >  (33*lockdown_)) then (1) else (0)

piecew35=if ((t-Time_gove)  >  (34*lockdown_)) then (1) else (0)

piecew36=if ((t-Time_gove)  >  (35*lockdown_)) then (1) else (0)

piecew37=if ((t-Time_gove)  >  (36*lockdown_)) then (1) else (0)

piecew38=if ((t-Time_gove)  >  (37*lockdown_)) then (1) else (0)

piecew39=if ((t-Time_gove)  >  (38*lockdown_)) then (1) else (0)

piecew40=if ((t-Time_gove)  >  (39*lockdown_)) then (1) else (0)

piecew41=if ((t-Time_gove)  >  (40*lockdown_)) then (1) else (0)

piecew42=if ((t-Time_gove)  >  (41*lockdown_)) then (1) else (0)

piecew43=if ((t-Time_gove)  >  (42*lockdown_)) then (1) else (0)

piecew44=if ((t-Time_gove)  >  (43*lockdown_)) then (1) else (0)

piecew45=if ((t-Time_gove)  >  (44*lockdown_)) then (1) else (0)

piecew46=if ((t-Time_gove)  >  (45*lockdown_)) then (1) else (0)

piecew47=if ((t-Time_gove)  >  (46*lockdown_)) then (1) else (0)

piecew48=if ((t-Time_gove)  >  (47*lockdown_)) then (1) else (0)

piecew49=if ((t-Time_gove)  >  (48*lockdown_)) then (1) else (0)

piecew50=if ((t-Time_gove)  >  (49*lockdown_)) then (1) else (0)

piecew51=if ((t-Time_gove)  >  (50*lockdown_)) then (1) else (0)

piecew52=if ((t-Time_gove)  >  (51*lockdown_)) then (1) else (0)

piecew53=if (t  <  Time_gove) then (0) else (governm_1)

piecew54=if ((t  >  Time_gove) && (intermitt  <  (Time_gove-lockdown_*(1-timeFract)))) then (Social__2*Governmen) else (Social__2)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

