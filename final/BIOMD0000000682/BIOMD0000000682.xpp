
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Wierschem2004 - Electrical bursting activity in Pancreatic Islets
#
# is http://identifiers.org/biomodels.db/MODEL1006230006
# is http://identifiers.org/biomodels.db/BIOMD0000000682
# isDescribedBy http://identifiers.org/pubmed/15178199
# isDerivedFrom http://identifiers.org/pubmed/6305437
# isDerivedFrom http://identifiers.org/pubmed/4263005
# is http://identifiers.org/biomodels.db/MODEL1006230006
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = COMpartment, name = Pancreatic Islet Cell, constant
par COMpartme=1.0

# Parameter:   id =  tau_c, name = tau_c, constant
par tau_c=1200.0

# Parameter:   id =  eta, name = eta, constant
par eta=185.0

# Parameter:   id =  v, name = v, constant
par v=10.0

# Parameter:   id =  k, name = k, constant
par k=20.0

# Parameter:   id =  phi, name = phi, defined by a Rule

# Parameter:   id =  ADP, name = ADP, defined by a Rule

# Parameter:   id =  ATP, name = ATP, defined by a Rule

# Parameter:   id =  C_m, name = C_m, constant
par C_m=5300.0

# Parameter:   id =  V_membrane, name = V, defined by a Rule

# Parameter:   id =  g_Ca_, name = g_Ca_, constant
par g_Ca_=1200.0

# Parameter:   id =  V_Ca, name = V_Ca, constant
par V_Ca=25.0

# Parameter:   id =  v_m, name = v_m, constant
par v_m=-20.0

# Parameter:   id =  s_m, name = s_m, constant
par s_m=12.0

# Parameter:   id =  m_infinity, name = m_infinity, defined by a Rule

# Parameter:   id =  I_Ca, name = I_Ca, defined by a Rule

# Parameter:   id =  g_K_, name = g_K_, constant
par g_K_=3000.0

# Parameter:   id =  V_K, name = V_K, constant
par V_K=-75.0

# Parameter:   id =  I_K, name = I_K, defined by a Rule

# Parameter:   id =  g_KCa_, name = g_KCa_, constant
par g_KCa_=300.0

# Parameter:   id =  k_D, name = k_D, constant
par k_D=0.3

# Parameter:   id =  omega, name = omega, defined by a Rule

# Parameter:   id =  I_KCa, name = I_KCa, defined by a Rule

# Parameter:   id =  g_KATP_, name = g_KATP_, constant
par g_KATP_=350.0

# Parameter:   id =  I_KATP, name = I_KATP, defined by a Rule

# Parameter:   id =  tau_n, name = tau_n, constant
par tau_n=16.0

# Parameter:   id =  v_n, name = v_n, constant
par v_n=-16.0

# Parameter:   id =  s_n, name = s_n, constant
par s_n=5.6

# Parameter:   id =  n_infinity, name = n_infinity, defined by a Rule

# Parameter:   id =  n, name = n, defined by a Rule

# Parameter:   id =  c, name = c, defined by a Rule

# Parameter:   id =  f, name = f, constant
par f=0.001

# Parameter:   id =  alpha, name = alpha, constant
par alpha=2.25E-6

# Parameter:   id =  k_c, name = k_c, constant
par k_c=0.1

# Parameter:   id =  J_mem, name = J_mem, defined by a Rule

# assignmentRule: variable = I_KATP
I_KATP=(V_membran-V_K)*g_KATP_/ATP
aux I_KATP=I_KATP

# assignmentRule: variable = n_infinity
n_infinit=1/(1+exp((v_n-V_membran)/s_n))
aux n_infinit=n_infinit

# assignmentRule: variable = omega
omega=1/(1+k_D/c)
aux omega=omega

# assignmentRule: variable = phi
phi=ATP*(1+k*ADP)^2
aux phi=phi

# assignmentRule: variable = I_K
I_K=g_K_*n*(V_membran-V_K)
aux I_K=I_K

# assignmentRule: variable = I_KCa
I_KCa=g_KCa_*omega*(V_membran-V_K)
aux I_KCa=I_KCa

# assignmentRule: variable = m_infinity
m_infinit=1/(1+exp((v_m-V_membran)/s_m))
aux m_infinit=m_infinit

# assignmentRule: variable = I_Ca
I_Ca=g_Ca_*m_infinit*(V_membran-V_Ca)
aux I_Ca=I_Ca

# assignmentRule: variable = J_mem
J_mem=(-f)*(alpha*I_Ca+k_c*c)
aux J_mem=J_mem

# rateRule: variable = ADP
init ADP=0.085817
dADP/dt=(phi-eta*ADP)/(1000*tau_c)

# rateRule: variable = ATP
init ATP=2.1047
dATP/dt=(v-phi)/(1000*tau_c)

# rateRule: variable = V_membrane
init V_membran=-67.018
dV_membran/dt=(-(I_Ca+I_K+I_KCa+I_KATP))/C_m

# rateRule: variable = n
init n=1.1E-4
dn/dt=(n_infinit-n)/tau_n

# rateRule: variable = c
init c=0.15666
dc/dt=J_mem

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

