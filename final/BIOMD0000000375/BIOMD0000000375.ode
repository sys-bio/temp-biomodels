
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Mears1997_CRAC_PancreaticBetaCells
#
# is http://identifiers.org/biomodels.db/MODEL1006230074
# is http://identifiers.org/biomodels.db/BIOMD0000000375
# isDescribedBy http://identifiers.org/pubmed/9002424
# isDerivedFrom http://identifiers.org/biomodels.db/BIOMD0000000374
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = COMpartment, name = COMpartment, constant
par COMpartme=1.0

# Parameter:   id =  Cm, name = Cm, constant
par Cm=6158.0

# Parameter:   id =  i_K, name = i_K, defined by a Rule

# Parameter:   id =  V_K, name = V_K, constant
par V_K=-70.0

# Parameter:   id =  g_K, name = g_K, constant
par g_K=3900.0

# Parameter:   id =  n_infinity, name = n_infinity, defined by a Rule

# Parameter:   id =  tau_n, name = tau_n, defined by a Rule

# Parameter:   id =  Vn, name = Vn, constant
par Vn=-15.0

# Parameter:   id =  Sn, name = Sn, constant
par Sn=6.0

# Parameter:   id =  lambda_n, name = lambda_n, constant
par lambda_n=1.85

# Parameter:   id =  i_K_ATP, name = i_K_ATP, defined by a Rule

# Parameter:   id =  g_K_ATP, name = g_K_ATP, defined by a Rule

# Parameter:   id =  i_Ca_f, name = i_Ca_f, defined by a Rule

# Parameter:   id =  V_Ca, name = V_Ca, constant
par V_Ca=100.0

# Parameter:   id =  g_Ca_f, name = g_Ca_f, constant
par g_Ca_f=810.0

# Parameter:   id =  m_f_infinity, name = m_f_infinity, defined by a Rule

# Parameter:   id =  Vm_f, name = Vm_f, constant
par Vm_f=-20.0

# Parameter:   id =  Sm_f, name = Sm_f, constant
par Sm_f=7.5

# Parameter:   id =  i_Ca_s, name = i_Ca_s, defined by a Rule

# Parameter:   id =  g_Ca_s, name = g_Ca_s, constant
par g_Ca_s=510.0

# Parameter:   id =  m_s_infinity, name = m_s_infinity, defined by a Rule

# Parameter:   id =  Vm_s, name = Vm_s, constant
par Vm_s=-16.0

# Parameter:   id =  Sm_s, name = Sm_s, constant
par Sm_s=10.0

# Parameter:   id =  jm_infinity, name = jm_infinity, defined by a Rule

# Parameter:   id =  Vj, name = Vj, constant
par Vj=-53.0

# Parameter:   id =  tau_j, name = tau_j, defined by a Rule

# Parameter:   id =  Sj, name = Sj, constant
par Sj=2.0

# Parameter:   id =  i_Ca, name = i_Ca, defined by a Rule

# Parameter:   id =  i_K_Ca, name = i_K_Ca, defined by a Rule

# Parameter:   id =  g_K_Ca, name = g_K_Ca, constant
par g_K_Ca=1200.0

# Parameter:   id =  kdkca, name = kdkca, constant
par kdkca=0.55

# Parameter:   id =  i_CRAC, name = i_CRAC, defined by a Rule

# Parameter:   id =  g_CRAC, name = g_CRAC, constant
par g_CRAC=75.0

# Parameter:   id =  V_CRAC, name = V_CRAC, constant
par V_CRAC=0.0

# Parameter:   id =  r_infinity, name = r_infinity, defined by a Rule

# Parameter:   id =  Ca_er_bar, name = Ca_er_bar, constant
par Ca_er_bar=40.0

# Parameter:   id =  sloper, name = sloper, constant
par sloper=3.0

# Parameter:   id =  i_leak, name = i_leak, defined by a Rule

# Parameter:   id =  g_leak, name = g_leak, constant
par g_leak=0.0

# Parameter:   id =  J_er_p, name = J_er_p, defined by a Rule

# Parameter:   id =  IP3, name = IP3, constant
par IP3=0.0

# Parameter:   id =  kerp, name = kerp, constant
par kerp=0.09

# Parameter:   id =  verp, name = verp, constant
par verp=0.24

# Parameter:   id =  dact, name = dact, constant
par dact=0.35

# Parameter:   id =  dinh, name = dinh, constant
par dinh=0.4

# Parameter:   id =  dip3, name = dip3, constant
par dip3=0.2

# Parameter:   id =  a_infinity, name = a_infinity, defined by a Rule

# Parameter:   id =  b_infinity, name = b_infinity, defined by a Rule

# Parameter:   id =  h_infinity, name = h_infinity, defined by a Rule

# Parameter:   id =  O, name = O, defined by a Rule

# Parameter:   id =  J_er_tot, name = J_er_tot, defined by a Rule

# Parameter:   id =  J_er_IP3, name = J_er_IP3, defined by a Rule

# Parameter:   id =  J_er_leak, name = J_er_leak, defined by a Rule

# Parameter:   id =  perl, name = perl, constant
par perl=0.003

# Parameter:   id =  lambda_er, name = lambda_er, constant
par lambda_er=250.0

# Parameter:   id =  sigma_er, name = sigma_er, constant
par sigma_er=1.0

# Parameter:   id =  kmp, name = kmp, constant
par kmp=0.35

# Parameter:   id =  vmp, name = vmp, constant
par vmp=0.08

# Parameter:   id =  gamma, name = gamma, constant
par gamma=3.607E-6

# Parameter:   id =  J_mem_tot, name = J_mem_tot, defined by a Rule

# Parameter:   id =  Jmp, name = Jmp, defined by a Rule

# Parameter:   id =  f, name = f, constant
par f=0.01

# assignmentRule: variable = tau_n
tau_n=9.09/(1+exp((V_membran+15)/6))
aux tau_n=tau_n

# assignmentRule: variable = i_K
i_K=g_K*n*(V_membran-V_K)
aux i_K=i_K

# assignmentRule: variable = n_infinity
n_infinit=1/(1+exp((-15-V_membran)/6))
aux n_infinit=n_infinit

# assignmentRule: variable = g_K_ATP
g_K_ATP= piecew1 
aux g_K_ATP=g_K_ATP

# assignmentRule: variable = i_K_ATP
i_K_ATP=g_K_ATP*(V_membran-V_K)
aux i_K_ATP=i_K_ATP

# assignmentRule: variable = m_f_infinity
m_f_infin=1/(1+exp((-20-V_membran)/7.5))
aux m_f_infin=m_f_infin

# assignmentRule: variable = i_Ca_f
i_Ca_f=g_Ca_f*m_f_infin*(V_membran-V_Ca)
aux i_Ca_f=i_Ca_f

# assignmentRule: variable = m_s_infinity
m_s_infin=1/(1+exp((-16-V_membran)/10))
aux m_s_infin=m_s_infin

# assignmentRule: variable = i_Ca_s
i_Ca_s=g_Ca_s*m_s_infin*(1-jm)*(V_membran-V_Ca)
aux i_Ca_s=i_Ca_s

# assignmentRule: variable = jm_infinity
jm_infini=1-1/(1+exp((V_membran+53)/2))
aux jm_infini=jm_infini

# assignmentRule: variable = tau_j
tau_j=50000/(exp((V_membran+53)/4)+exp((-53-V_membran)/4))+1500
aux tau_j=tau_j

# assignmentRule: variable = i_Ca
i_Ca=i_Ca_f+i_Ca_s
aux i_Ca=i_Ca

# assignmentRule: variable = i_K_Ca
i_K_Ca=g_K_Ca*Ca_i^5/(Ca_i^5+kdkca^5)*(V_membran-V_K)
aux i_K_Ca=i_K_Ca

# assignmentRule: variable = r_infinity
r_infinit=1/(1+exp((Ca_er_Ca_-Ca_er_bar)/sloper))
aux r_infinit=r_infinit

# assignmentRule: variable = i_CRAC
i_CRAC=g_CRAC*r_infinit*(V_membran-V_CRAC)
aux i_CRAC=i_CRAC

# assignmentRule: variable = i_leak
i_leak=g_leak*(V_membran-V_CRAC)
aux i_leak=i_leak

# assignmentRule: variable = J_er_p
J_er_p=verp*Ca_i^2/(Ca_i^2+kerp^2)
aux J_er_p=J_er_p

# assignmentRule: variable = a_infinity
a_infinit=1/(1+dact/Ca_i)
aux a_infinit=a_infinit

# assignmentRule: variable = b_infinity
b_infinit=IP3/(IP3+dip3)
aux b_infinit=b_infinit

# assignmentRule: variable = h_infinity
h_infinit=1/(1+Ca_i/dinh)
aux h_infinit=h_infinit

# assignmentRule: variable = O
O=a_infinit^3*b_infinit^3*h_infinit^3*1
aux O=O

# assignmentRule: variable = J_er_IP3
J_er_IP3=O*(Ca_er_Ca_-Ca_i)
aux J_er_IP3=J_er_IP3

# assignmentRule: variable = J_er_leak
J_er_leak=perl*(Ca_er_Ca_-Ca_i)
aux J_er_leak=J_er_leak

# assignmentRule: variable = J_er_tot
J_er_tot=J_er_leak+J_er_IP3-J_er_p
aux J_er_tot=J_er_tot

# assignmentRule: variable = Jmp
Jmp=vmp*Ca_i^2/(Ca_i^2+kmp^2)
aux Jmp=Jmp

# assignmentRule: variable = J_mem_tot
J_mem_tot=(-f)*(gamma*i_Ca+Jmp)
aux J_mem_tot=J_mem_tot

# rateRule: variable = V_membrane
init V_membran=-61.0
dV_membran/dt=(-(i_Ca+i_K+i_K_ATP+i_K_Ca+i_CRAC+i_leak))/Cm

# rateRule: variable = n
init n=5.0E-4
dn/dt=lambda_n*(n_infinit-n)/tau_n

# rateRule: variable = jm
init jm=0.12
djm/dt=(jm_infini-jm)/tau_j

# rateRule: variable = Ca_er_Ca_equations
init Ca_er_Ca_=60.0
dCa_er_Ca_/dt=(-J_er_tot)/(lambda_er*sigma_er)

# rateRule: variable = Ca_i
init Ca_i=0.11
dCa_i/dt=J_er_tot/lambda_er+J_mem_tot

# Species:   id = V_membrane, name = V_membrane, defined in a rule 

# Species:   id = n, name = n, defined in a rule 

# Species:   id = jm, name = jm, defined in a rule 

# Species:   id = Ca_er_Ca_equations, name = Ca_er_Ca_equations, defined in a rule 

# Species:   id = Ca_i, name = Ca_i, defined in a rule 


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if ((t  >  60000) && (t  <  660000)) then (2000) else (150)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

