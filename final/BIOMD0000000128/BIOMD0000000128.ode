
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Bertram2006_Endothelin
#
# is http://identifiers.org/biomodels.db/MODEL6509019628
# is http://identifiers.org/biomodels.db/BIOMD0000000128
# isDescribedBy http://identifiers.org/pubmed/16434725
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = cell, name = cell, constant
par cell=1.0

# Parameter:   id =  vh, name = vh, constant
par vh=-20.0

# Parameter:   id =  sh, name = sh, constant
par sh=70.0

# Parameter:   id =  tauh, name = tauh, constant
par tauh=20.0

# Parameter:   id =  kserca, name = kserca, constant
par kserca=0.4

# Parameter:   id =  sigmav, name = sigmav, constant
par sigmav=10.0

# Parameter:   id =  kc, name = kc, constant
par kc=0.15

# Parameter:   id =  vn, name = vn, constant
par vn=-16.0

# Parameter:   id =  vk, name = vk, constant
par vk=-75.0

# Parameter:   id =  taun, name = taun, constant
par taun=20.0

# Parameter:   id =  gk, name = gk, constant
par gk=3500.0

# Parameter:   id =  sn, name = sn, constant
par sn=5.0

# Parameter:   id =  vca, name = vca, constant
par vca=25.0

# Parameter:   id =  gca, name = gca, constant
par gca=2000.0

# Parameter:   id =  vm, name = vm, constant
par vm=-20.0

# Parameter:   id =  sm, name = sm, constant
par sm=12.0

# Parameter:   id =  lambda, name = lambda, constant
par lambda=1.25

# Parameter:   id =  cm, name = cm, constant
par cm=5300.0

# Parameter:   id =  f, name = f, constant
par f=0.01

# Parameter:   id =  fer, name = fer, constant
par fer=0.01

# Parameter:   id =  alpha, name = alpha, constant
par alpha=4.5E-6

# Parameter:   id =  perl, name = perl, constant
par perl=5.0E-4

# Parameter:   id =  dact, name = dact, constant
par dact=0.35

# Parameter:   id =  dip3, name = dip3, constant
par dip3=0.5

# Parameter:   id =  dinh, name = dinh, constant
par dinh=0.4

# Parameter:   id =  ninf, name = ninf, defined by a Rule

# Parameter:   id =  minf, name = minf, defined by a Rule

# Parameter:   id =  hinf, name = hinf, defined by a Rule

# Parameter:   id =  ica, name = ica, defined by a Rule

# Parameter:   id =  igirk, name = igirk, defined by a Rule

# Parameter:   id =  ik, name = ik, defined by a Rule

# Parameter:   id =  girk, name = girk
par girk=1000.0

# Parameter:   id =  IP3, name = IP3
par IP3=0.0

# Parameter:   id =  ainf, name = ainf, defined by a Rule

# Parameter:   id =  hinfer, name = hinfer, defined by a Rule

# Parameter:   id =  jerp, name = jerp, defined by a Rule

# Parameter:   id =  binf, name = binf, defined by a Rule

# Parameter:   id =  o, name = o, defined by a Rule

# Parameter:   id =  jerleak, name = jerleak, defined by a Rule

# Parameter:   id =  jerip3, name = jerip3, defined by a Rule

# Parameter:   id =  jertot, name = jertot, defined by a Rule

# Parameter:   id =  jmemtot, name = jmemtot, defined by a Rule

# Parameter:   id =  ki, name = ki, constant
par ki=0.5

# Parameter:   id =  perl_inf, name = perl_inf, defined by a Rule

# Parameter:   id =  taudir, name = taudir, constant
par taudir=20000.0

# Parameter:   id =  cAMPlow, name = cAMPlow, constant
par cAMPlow=0.2

# Parameter:   id =  ETswitch, name = ETswitch
par ETswitch=0.0

# Parameter:   id =  h, name = h, defined by a Rule

# Parameter:   id =  inh, name = variable for direct inhibition of secretion, defined by a Rule

# Parameter:   id =  V, name = voltage, defined by a Rule

# Parameter:   id =  n, name = delayed rectifier activation, defined by a Rule

# assignmentRule: variable = minf
minf=1/(1+exp((vm-V)/sm))
aux minf=minf

# assignmentRule: variable = ninf
ninf=1/(1+exp((vn-V)/sn))
aux ninf=ninf

# assignmentRule: variable = hinf
hinf=1/(1+exp((vh-V)/sh))
aux hinf=hinf

# assignmentRule: variable = ica
ica=gca*minf*(V-vca)
aux ica=ica

# assignmentRule: variable = igirk
igirk=girk*h*(V-vk)
aux igirk=igirk

# assignmentRule: variable = ik
ik=gk*n*(V-vk)
aux ik=ik

# assignmentRule: variable = ainf
ainf=1/(1+dact/c)
aux ainf=ainf

# assignmentRule: variable = hinfer
hinfer=1/(1+c/dinh)
aux hinfer=hinfer

# assignmentRule: variable = jerp
jerp=kserca*c
aux jerp=jerp

# assignmentRule: variable = binf
binf=IP3/(IP3+dip3)
aux binf=binf

# assignmentRule: variable = o
o=ainf^3*binf^3*hinfer^3
aux o=o

# assignmentRule: variable = jmemtot
jmemtot=-(alpha*ica+kc*c)
aux jmemtot=jmemtot

# assignmentRule: variable = jerleak
jerleak=perl*(cer-c)
aux jerleak=jerleak

# assignmentRule: variable = jerip3
jerip3=o*(cer-c)
aux jerip3=jerip3

# assignmentRule: variable = jertot
jertot=jerleak+jerip3-jerp
aux jertot=jertot

# assignmentRule: variable = perl_inf
perl_inf=inh*cAMP*c^4/(ki^4+c^4)
aux perl_inf=perl_inf

# rateRule: variable = h
init h=0.0
dh/dt=(hinf-h)/tauh

# rateRule: variable = inh
init inh=1.0
dinh/dt=ETswitch*(0.2-inh)/taudir

# rateRule: variable = V
init V=-60.0
dV/dt=(-ica-ik-igirk)/cm

# rateRule: variable = n
init n=0.0
dn/dt=lambda*(ninf-n)/taun

# Reaction: id = reaction_0000001

reaction_=cell*f*(jertot+jmemtot)

# Reaction: id = reaction_0000002

reactio_1=(-fer)*sigmav*jertot*cell

# Reaction: id = reaction_000003

reactio_2=cell*ETswitch*(cAMPlow-cAMP)/taudir

# Species:   id = c, name = cytosolic calcium concentration, affected by kineticLaw

init c=0.3
dc/dt=(1/(cell))*(( 1.0 * reaction_))

# Species:   id = cer, name = ER calcium concentration, affected by kineticLaw

init cer=260.0
dcer/dt=(1/(cell))*(( 1.0 * reactio_1))

# Species:   id = cAMP, name = cAMP, affected by kineticLaw

init cAMP=1.0
dcAMP/dt=(1/(cell))*(( 1.0 * reactio_2))

# event : event_0000001
event_000=if (t > 60000) then (1.5) else (0.2)
global 1 {event_000 - 1.1} {IP3=0.3;girk=3000;ETswitch=1}

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

