
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Weis2014 - Data driven Mammalian Cell Cycle Model
#
# is http://identifiers.org/biomodels.db/MODEL1811220001
# is http://identifiers.org/biomodels.db/BIOMD0000000723
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = Henri_Michaelis_Menten__irreversible, name = Henri-Michaelis-Menten (irreversible)
Henri_Mic(substrate,Km,V)=(V*substrate/(Km+substrate))


# FunctionDefinition id = function_for_ERG, name = function for ERG
function_(k,M,J)=(k/(1+(M/J)^2))


# FunctionDefinition id = function_1k_1m, name = function 1k 1m
functio_1(k,M)=(k*M)


# FunctionDefinition id = function_for_DRG, name = function for DRG
functio_2(k,P,J)=(k*(P/J)^2/(1+(P/J)^2))


# FunctionDefinition id = function_1k_2m, name = function 1k 2m
functio_3(k,M1,M2)=(k*M1*M2)


# FunctionDefinition id = function_2k_1m, name = function 2k 1m
functio_4(k1,M,k2)=(k1*M*k2)


# FunctionDefinition id = function_for_actCycACdk1, name = function for actCycACdk1
functio_5(k0,k1,k2,M1,k3,M2,M3)=(k0*(k1+k2*M1+k3*M2)*M3*2)


# FunctionDefinition id = function_for_actCycACdk2_1, name = function for actCycACdk2 1
functio_6(k0,k1,k2,M1,k3,M2,M3)=((1-k0)*(k1+k2*M1+k3*M2)*M3*2)


# FunctionDefinition id = function_for_actCycACdk2_2, name = function for actCycACdk2 2
functio_7(k0,k1,k2,M)=((1-k0)*(k1+k2)*M)


# FunctionDefinition id = function_2k_2m, name = function 2k 2m
functio_8(k1,M1,M2,k2)=(k1*M1*M2*k2)


# FunctionDefinition id = function_for_2k, name = function for 2k
functio_9(k1,k2)=(k1*k2)


# FunctionDefinition id = function_for_Cdh1_1, name = function for Cdh1 1
functi_10(k1,k2,M,P,k3)=((k1+k2*M)*(1-P)/(k3+1-P))


# FunctionDefinition id = function_for_cdh1_2, name = function for cdh1 2
functi_11(k1,M1,M2,k2,M3,S,k3)=((k1*(M1+M2)+k2*M3)*S/(k3+S))


# FunctionDefinition id = function_for_APCP_1, name = function for APCP 1
functi_12(k1,M,P,k2)=(k1*M*(1-P)/(k2+1-P))


# FunctionDefinition id = function_for_Cdc20A, name = function for Cdc20A
functi_13(k1,M1,M2,P,k2)=(k1*M1*(M2-P)/(k2+M2-P))


# FunctionDefinition id = function_for_Cdc20T, name = function for Cdc20T
functi_14(k1,M1,k2,M2)=(k1*M1/(k2+M2))


# Compartment: id = cell, name = cell, constant
par cell=1.0

# Parameter:   id =  a1frac, name = a1frac, constant
par a1frac=0.081283

# Parameter:   id =  FB, name = FB, constant
par FB=2.0

# Parameter:   id =  FE, name = FE, constant
par FE=25.0

# Parameter:   id =  J15, name = J15, constant
par J15=0.1

# Parameter:   id =  J17, name = J17, constant
par J17=0.3

# Parameter:   id =  J20, name = J20, constant
par J20=100.0

# Parameter:   id =  Ja20, name = Ja20, constant
par Ja20=0.005

# Parameter:   id =  Ja25, name = Ja25, constant
par Ja25=0.005

# Parameter:   id =  JaAPC, name = JaAPC, constant
par JaAPC=0.01

# Parameter:   id =  Jafb, name = Jafb, constant
par Jafb=0.01

# Parameter:   id =  Jah1, name = Jah1, constant
par Jah1=0.15

# Parameter:   id =  Jatf, name = Jatf, constant
par Jatf=0.01

# Parameter:   id =  Jawee, name = Jawee, constant
par Jawee=0.05

# Parameter:   id =  Jaweeb, name = Jaweeb, constant
par Jaweeb=0.05

# Parameter:   id =  Ji20, name = Ji20, constant
par Ji20=0.005

# Parameter:   id =  Ji25, name = Ji25, constant
par Ji25=0.031623

# Parameter:   id =  JiAPC, name = JiAPC, constant
par JiAPC=0.001

# Parameter:   id =  Jifb, name = Jifb, constant
par Jifb=0.001

# Parameter:   id =  Jih1, name = Jih1, constant
par Jih1=0.01

# Parameter:   id =  Jitf, name = Jitf, constant
par Jitf=0.01

# Parameter:   id =  Jiwee, name = Jiwee, constant
par Jiwee=0.05

# Parameter:   id =  k10, name = k10, constant
par k10=88.175

# Parameter:   id =  k15, name = k15, constant
par k15=5.2905

# Parameter:   id =  k16, name = k16, constant
par k16=44.0875

# Parameter:   id =  k17, name = k17, constant
par k17=2645.25

# Parameter:   id =  k17p, name = k17p, constant
par k17p=2.64525

# Parameter:   id =  k18, name = k18, constant
par k18=176.35

# Parameter:   id =  K19, name = K19, constant
par K19=35.27

# Parameter:   id =  K19a, name = K19a, constant
par K19a=440.875

# Parameter:   id =  K20, name = K20, constant
par K20=176.35

# Parameter:   id =  K21, name = K21, constant
par K21=1.0

# Parameter:   id =  K22, name = K22, constant
par K22=3.527

# Parameter:   id =  K23a, name = K23a, constant
par K23a=0.17635

# Parameter:   id =  K23b, name = K23b, constant
par K23b=1.7635

# Parameter:   id =  k24, name = k24, constant
par k24=1763.5

# Parameter:   id =  k25p, name = k25p, constant
par k25p=61.474

# Parameter:   id =  k25pp, name = k25pp, constant
par k25pp=30515.96

# Parameter:   id =  K26, name = K26, constant
par K26=17635.0

# Parameter:   id =  K26R, name = K26R, constant
par K26R=35.27

# Parameter:   id =  k9, name = k9, constant
par k9=45.851

# Parameter:   id =  ka20, name = ka20, constant
par ka20=292.669

# Parameter:   id =  ka25, name = ka25, constant
par ka25=8.85277

# Parameter:   id =  kaAPC, name = kaAPC, constant
par kaAPC=2.33401

# Parameter:   id =  kacdh1, name = kacdh1, constant
par kacdh1=264.525

# Parameter:   id =  kafab, name = kafab, constant
par kafab=0.296268

# Parameter:   id =  kah1p, name = kah1p, constant
par kah1p=155.8708

# Parameter:   id =  kah1pp, name = kah1pp, constant
par kah1pp=176350.0

# Parameter:   id =  kasa, name = kasa, constant
par kasa=19733.57

# Parameter:   id =  kase, name = kase, constant
par kase=19733.57

# Parameter:   id =  katfpp, name = katfpp, constant
par katfpp=58.70692

# Parameter:   id =  katfppp, name = katfppp, constant
par katfppp=97.80724

# Parameter:   id =  katfpppp, name = katfpppp, constant
par katfpppp=77.63935

# Parameter:   id =  kaweep, name = kaweep, constant
par kaweep=13.8188

# Parameter:   id =  kd20, name = kd20, constant
par kd20=17.635

# Parameter:   id =  kdap, name = kdap, constant
par kdap=0.516094

# Parameter:   id =  kdapp, name = kdapp, constant
par kdapp=2645.25

# Parameter:   id =  kdbp, name = kdbp, constant
par kdbp=0.853181

# Parameter:   id =  kdbpp, name = kdbpp, constant
par kdbpp=176.35

# Parameter:   id =  kdbppp, name = kdbppp, constant
par kdbppp=387.97

# Parameter:   id =  kde2fcdc20, name = kde2fcdc20, constant
par kde2fcdc2=881.75

# Parameter:   id =  kde2fcdh1, name = kde2fcdh1, constant
par kde2fcdh1=1.7635

# Parameter:   id =  kdep, name = kdep, constant
par kdep=1.961012

# Parameter:   id =  kdepp, name = kdepp, constant
par kdepp=1.973357

# Parameter:   id =  kdeppp, name = kdeppp, constant
par kdeppp=176.35

# Parameter:   id =  kdepppp, name = kdepppp, constant
par kdepppp=3527.0

# Parameter:   id =  kdia, name = kdia, constant
par kdia=196.0783

# Parameter:   id =  kdie, name = kdie, constant
par kdie=196.0783

# Parameter:   id =  kdip, name = kdip, constant
par kdip=196.0783

# Parameter:   id =  kdipp, name = kdipp, constant
par kdipp=978.0688

# Parameter:   id =  kdippp, name = kdippp, constant
par kdippp=1960.837

# Parameter:   id =  kdipppp, name = kdipppp, constant
par kdipppp=978.0688

# Parameter:   id =  ke2f, name = ke2f, constant
par ke2f=4.2324

# Parameter:   id =  ki20, name = ki20, constant
par ki20=17.635

# Parameter:   id =  ki25, name = ki25, constant
par ki25=35.27

# Parameter:   id =  kiAPC, name = kiAPC, constant
par kiAPC=3.862259

# Parameter:   id =  kifb, name = kifb, constant
par kifb=9.827456

# Parameter:   id =  kih1pp, name = kih1pp, constant
par kih1pp=17635.0

# Parameter:   id =  kih1ppp, name = kih1ppp, constant
par kih1ppp=1763.5

# Parameter:   id =  kitfp, name = kitfp, constant
par kitfp=48.96181

# Parameter:   id =  kitfpp, name = kitfpp, constant
par kitfpp=19.60836

# Parameter:   id =  kitfppp, name = kitfppp, constant
par kitfppp=19.60836

# Parameter:   id =  kiwee, name = kiwee, constant
par kiwee=0.145

# Parameter:   id =  ks20pp, name = ks20pp, constant
par ks20pp=105.81

# Parameter:   id =  ksap, name = ksap, constant
par ksap=16.75325

# Parameter:   id =  ksapp, name = ksapp, constant
par ksapp=0.10581

# Parameter:   id =  ksappp, name = ksappp, constant
par ksappp=20.28025

# Parameter:   id =  ksbp, name = ksbp, constant
par ksbp=6.7013

# Parameter:   id =  ksbpp, name = ksbpp, constant
par ksbpp=15.8715

# Parameter:   id =  ksbppp, name = ksbppp, constant
par ksbppp=1.7635

# Parameter:   id =  ksbpppp, name = ksbpppp, constant
par ksbpppp=0.617225

# Parameter:   id =  ksep, name = ksep, constant
par ksep=1.562461

# Parameter:   id =  ksepp, name = ksepp, constant
par ksepp=8.8175

# Parameter:   id =  ksip, name = ksip, constant
par ksip=390.9926

# Parameter:   id =  kweep, name = kweep, constant
par kweep=234.8312

# Parameter:   id =  kweepp, name = kweepp, constant
par kweepp=17635.0

# Parameter:   id =  LA, name = LA, constant
par LA=30.0

# Parameter:   id =  LB, name = LB, constant
par LB=0.5

# Parameter:   id =  LD, name = LD, constant
par LD=3.3

# Parameter:   id =  LE, name = LE, constant
par LE=10.0

# Parameter:   id =  PP1T, name = PP1T, constant
par PP1T=1.0

# Parameter:   id =  u, name = u, constant
par u=0.693937

# Parameter:   id =  k24r, name = k24r, constant
par k24r=176.35

# Parameter:   id =  kiweeb, name = kiweeb, constant
par kiweeb=5.0

# Parameter:   id =  v29, name = v29, defined by a Rule

# Parameter:   id =  v30, name = v30, defined by a Rule

# Parameter:   id =  v43, name = v43, defined by a Rule

# Parameter:   id =  v44, name = v44, defined by a Rule

# Parameter:   id =  v45, name = v45, defined by a Rule

# Parameter:   id =  v46, name = v46, defined by a Rule

# Parameter:   id =  v47, name = v47, defined by a Rule

# Parameter:   id =  v48, name = v48, defined by a Rule

# Parameter:   id =  v49, name = v49, defined by a Rule

# Parameter:   id =  v50, name = v50, defined by a Rule

# Parameter:   id =  v51, name = v51, defined by a Rule

# Parameter:   id =  v52, name = v52, defined by a Rule

# Parameter:   id =  Vatf, name = Vatf, defined by a Rule

# Parameter:   id =  Vde, name = Vde, defined by a Rule

# Parameter:   id =  Vda, name = Vda, defined by a Rule

# Parameter:   id =  TFAB, name = TFAB, defined by a Rule

# Parameter:   id =  Vsi, name = Vsi, defined by a Rule

# Parameter:   id =  Vsb, name = Vsb, defined by a Rule

# Parameter:   id =  Vdb, name = Vdb, defined by a Rule

# Parameter:   id =  Wee1, name = Wee1, defined by a Rule

# Parameter:   id =  Vwee, name = Vwee, defined by a Rule

# Parameter:   id =  Cdc25, name = Cdc25, defined by a Rule

# Parameter:   id =  V25, name = V25, defined by a Rule

# Parameter:   id =  Vdi, name = Vdi, defined by a Rule

# Parameter:   id =  TriE, name = TriE, defined by a Rule

# Parameter:   id =  freeCK1, name = freeCK1, defined by a Rule

# Parameter:   id =  CdkCycBCK1, name = CdkCycBCK1, defined by a Rule

# Parameter:   id =  Cdk1PCycB, name = Cdk1PCycB, defined by a Rule

# Parameter:   id =  PP1A, name = PP1A, defined by a Rule

# assignmentRule: variable = v29
v29=E2FRB*K20*((actCycD+TriD)*LD+LA*(actCycACd+actCycA_1)+LB*actCycB+LE*actCycE)
aux v29=v29

# assignmentRule: variable = v30
v30=pE2FRB*K20*(LD*(actCycD+TriD)+LA*(actCycACd+actCycA_1)+LB*actCycB+LE*actCycE)
aux v30=v30

# assignmentRule: variable = v43
v43=Rb*K20*(LD*(actCycD+TriD)+LA*(actCycACd+actCycA_1)+LB*actCycB+LE*actCycE)
aux v43=v43

# assignmentRule: variable = v45
v45=K26R*E2FRB
aux v45=v45

# assignmentRule: variable = v46
v46=E2F*(K23a*(actCycACd+actCycA_1)+K23b*actCycB)
aux v46=v46

# assignmentRule: variable = v47
v47=K22*pE2F
aux v47=v47

# assignmentRule: variable = v48
v48=K26*E2F*Rb
aux v48=v48

# assignmentRule: variable = v49
v49=K26R*pE2FRB
aux v49=v49

# assignmentRule: variable = v50
v50=K26*Rb*pE2F
aux v50=v50

# assignmentRule: variable = v51
v51=K22*pE2FRB
aux v51=v51

# assignmentRule: variable = v52
v52=E2FRB*(K23a*(actCycACd+actCycA_1)+K23b*actCycB)
aux v52=v52

# assignmentRule: variable = Vatf
Vatf=katfpp*(actCycACd+actCycA_1)+katfppp*actCycE+katfpppp*actCycD
aux Vatf=Vatf

# assignmentRule: variable = Vde
Vde=kdep+kdepp*actCycE+kdeppp*(actCycACd+actCycA_1)+kdepppp*actCycB
aux Vde=Vde

# assignmentRule: variable = Vda
Vda=kdap+kdapp*Cdc20A+kacdh1*Cdh1
aux Vda=Vda

# assignmentRule: variable = TFAB
TFAB=2*kafab*(actCycACd+actCycA_1)*Jifb/(kifb-kafab*(actCycACd+actCycA_1)+Jafb*kifb+kafab*(actCycACd+actCycA_1)*Jifb+((kifb-kafab*(actCycACd+actCycA_1)+Jafb*kifb+kafab*(actCycACd+actCycA_1)*Jifb)^2-4*(kifb-kafab*(actCycACd+actCycA_1))*Jifb*kafab*(actCycACd+actCycA_1))^(0.5))
aux TFAB=TFAB

# assignmentRule: variable = Vsb
Vsb=ksbp+ksbpp*TFAB+ksbppp*actCycB+ksbpppp*E2F
aux Vsb=Vsb

# assignmentRule: variable = Vsi
Vsi=ksip
aux Vsi=Vsi

# assignmentRule: variable = Vdb
Vdb=kdbp+kdbpp*Cdh1+kdbppp*Cdc20A
aux Vdb=Vdb

# assignmentRule: variable = Wee1
Wee1=2*kaweep*Jiwee/(kiwee*(actCycACd+actCycA_1)+kiweeb*actCycB-kaweep+Jawee*(kiwee*(actCycACd+actCycA_1)+kiweeb*actCycB)+kaweep*Jiwee+((kiwee*(actCycACd+actCycA_1)+kiweeb*actCycB-kaweep+Jawee*(kiwee*(actCycACd+actCycA_1)+kiweeb*actCycB)+kaweep*Jiwee)^2-4*(kiwee*(actCycACd+actCycA_1)+kiweeb*actCycB-kaweep)*kaweep*Jawee)^(0.5))
aux Wee1=Wee1

# assignmentRule: variable = Cdc25
Cdc25=2*ka25*actCycB*Ji25/(ki25-ka25*actCycB+Ja25*ki25+Ji25*ka25*actCycB+((ki25-ka25*actCycB+Ja25*ki25+Ji25*ka25*actCycB)^2-4*(ki25-ka25*actCycB)*Ja25*ka25*actCycB)^(0.5))
aux Cdc25=Cdc25

# assignmentRule: variable = Vwee
Vwee=kweep+kweepp*Wee1
aux Vwee=Vwee

# assignmentRule: variable = Vdi
Vdi=kdip+kdipp*(actCycACd+actCycA_1)+kdippp*actCycB+kdipppp*actCycE
aux Vdi=Vdi

# assignmentRule: variable = V25
V25=k25p+k25pp*Cdc25
aux V25=V25

# assignmentRule: variable = TriE
TriE=cycE-actCycE
aux TriE=TriE

# assignmentRule: variable = freeCK1
freeCK1=CKI-TriA-TriE-TriD
aux freeCK1=freeCK1

# assignmentRule: variable = CdkCycBCK1
CdkCycBCK=cycB-actCycB-preMPF
aux CdkCycBCK=CdkCycBCK

# assignmentRule: variable = Cdk1PCycB
Cdk1PCycB=cycB-actCycB
aux Cdk1PCycB=Cdk1PCycB

# assignmentRule: variable = PP1A
PP1A=PP1T/(K21*(FE*(actCycACd+actCycA_1+actCycE)+FB*actCycB+1))
aux PP1A=PP1A

# assignmentRule: variable = v44
v44=ppRB*(K19a*(PP1T-PP1A)+K19*PP1A)
aux v44=v44

# Reaction: id = reaction, name = ERG synthesis

reaction=cell*function_(k15, DRG, J15)

# Reaction: id = reaction_1, name = ERG degradation

reaction_=cell*k16*ERG

# Reaction: id = reaction_2, name = DRG synthesis through ERG

reactio_1=cell*functio_1(k17p, ERG)

# Reaction: id = reaction_3, name = DRG synthesis

reactio_2=cell*functio_2(k17, DRG, J17)

# Reaction: id = reaction_4, name = DRG degradation

reactio_3=cell*k18*DRG

# Reaction: id = reaction_5, name = E2FRB complex dissociation

reactio_4=cell*Constant_(v29)

# Reaction: id = reaction_6, name = E2FRB complex dissociation 2

reactio_5=cell*Constant_(v30)

# Reaction: id = reaction_7, name = double phosphorylation of Rb

reactio_6=cell*Constant_(v43)

# Reaction: id = reaction_8, name = dephosphorylation of Rb

reactio_7=cell*Constant_(v44)

# Reaction: id = reaction_9, name = E2FRB complex dissociation 3

reactio_8=cell*Constant_(v45)

# Reaction: id = reaction_10, name = dephosphorylation of E2F

reactio_9=cell*Constant_(v47)

# Reaction: id = reaction_11, name = E2f phosphorylation

reacti_10=cell*Constant_(v46)

# Reaction: id = reaction_12, name = E2FRB complex formation

reacti_11=cell*Constant_(v48)

# Reaction: id = reaction_13, name = E2F synthesis

reacti_12=cell*functio_3(ke2f, mass, E2F)

# Reaction: id = reaction_14, name = E2F degradation through Cdc20

reacti_13=cell*functio_3(kde2fcdc2, E2F, Cdc20A)

# Reaction: id = reaction_15, name = E2F degradation through Cdh1

reacti_14=cell*functio_3(kde2fcdh1, Cdh1, E2F)

# Reaction: id = reaction_16, name = phosphorylated E2FRB complex dissociation

reacti_15=cell*Constant_(v49)

# Reaction: id = reaction_17, name = phosphorylated E2FRB complex formation

reacti_16=cell*Constant_(v50)

# Reaction: id = reaction_18, name = pE2F degradation through Cdc20

reacti_17=cell*functio_3(kde2fcdc2, pE2F, Cdc20A)

# Reaction: id = reaction_19, name = pE2F degradation through Cdh1

reacti_18=cell*functio_3(kde2fcdh1, pE2F, Cdh1)

# Reaction: id = reaction_20, name = E2FRB dephosphorylation

reacti_19=cell*Constant_(v51)

# Reaction: id = reaction_21, name = E2FRB phosphorylation

reacti_20=cell*Constant_(v52)

# Reaction: id = reaction_22, name = active cyclin D synthesis

reacti_21=cell*functio_1(k9, DRG)

# Reaction: id = reaction_23, name = cyclin D activation 1

reacti_22=cell*functio_1(Vdi, TriD)

# Reaction: id = reaction_24, name = cyclin D activation 2

reacti_23=cell*functio_1(k24r, TriD)

# Reaction: id = reaction_25, name = active cyclin D inactivation

reacti_24=cell*functio_4(k24, actCycD, freeCK1)

# Reaction: id = reaction_26, name = active cyclin D degradation

reacti_25=cell*k10*actCycD

# Reaction: id = reaction_27, name = inactive cyclin D degradation

reacti_26=cell*k10*TriD

# Reaction: id = reaction_28, name = actCycACdk1 formation 1

reacti_27=cell*functio_5(a1frac, ksap, ksapp, E2F, ksappp, TFAB, mass)

# Reaction: id = reaction_29, name = actCycACdk1 formation 2

reacti_28=cell*functio_4(a1frac, TriA, Vdi)

# Reaction: id = reaction_30, name = actCycACdk1 formation 3

reacti_29=cell*functio_4(a1frac, TriA, kdia)

# Reaction: id = reaction_31, name = actCycACdk1 degradation 1

reacti_30=cell*Vda*actCycACd

# Reaction: id = reaction_32, name = actCycACdk1 degradation 2

reacti_31=cell*functio_4(kasa, actCycACd, freeCK1)

# Reaction: id = reaction_33, name = actCycACdk2 formation 1

reacti_32=cell*functio_6(a1frac, ksap, ksapp, E2F, ksappp, TFAB, mass)

# Reaction: id = reaction_34, name = actCycACdk2 formation 2

reacti_33=cell*functio_7(a1frac, Vdi, kdia, TriA)

# Reaction: id = reaction_35, name = actCycACdk2 degradation 1

reacti_34=cell*Vda*actCycA_1

# Reaction: id = reaction_36, name = actCycACdk2 degradation 2

reacti_35=cell*functio_4(kasa, actCycA_1, freeCK1)

# Reaction: id = reaction_37, name = cyclinB synthesis
# Local Parameter:   id =  k2, name = k2
par k2=2.0


reacti_36=cell*functio_4(Vsb, mass, k2)

# Reaction: id = reaction_38, name = active cyclin B synthesis

reacti_37=cell*functio_1(V25, cycB)

# Reaction: id = reaction_39, name = active cyclinB degradation 1

reacti_38=cell*V25*actCycB

# Reaction: id = reaction_40, name = active cyclinB degradation 2

reacti_39=cell*Vdb*actCycB

# Reaction: id = reaction_41, name = active cyclinB degradation 3

reacti_40=cell*Vwee*actCycB

# Reaction: id = reaction_42, name = cyclinE synthesis 1
# Local Parameter:   id =  k2, name = k2
par k2_1=2.0


reacti_41=cell*functio_4(ksep, mass, k2_1)

# Reaction: id = reaction_43, name = cyclinE synthesis 2
# Local Parameter:   id =  k2, name = k2
par k2_1_2=2.0


reacti_42=cell*functio_8(ksepp, E2F, mass, k2_1_2)

# Reaction: id = reaction_44, name = active cyclin E synthesis 1

reacti_43=cell*functio_9(Vdi, TriE)

# Reaction: id = reaction_45, name = active cyclin E synthesis 2

reacti_44=cell*functio_9(kdie, TriE)

# Reaction: id = reaction_46, name = active cyclin E degradation 1

reacti_45=cell*Vde*actCycE

# Reaction: id = reaction_47, name = active cyclin E degradation 2

reacti_46=cell*functio_4(kase, actCycE, freeCK1)

# Reaction: id = reaction_48, name = cyclinA synthesis
# Local Parameter:   id =  k0, name = k0
par k0=1.0


reacti_47=cell*functio_5(k0, ksap, ksapp, E2F, ksappp, TFAB, mass)

# Reaction: id = reaction_49, name = cyclinA degradation

reacti_48=cell*Vda*cycA

# Reaction: id = reaction_50, name = cyclinB degradation

reacti_49=cell*Vdb*cycB

# Reaction: id = reaction_51, name = cyclinE degradation

reacti_50=cell*Vde*cycE

# Reaction: id = reaction_52, name = CKI synthesis

reacti_51=cell*Constant_(Vsi)

# Reaction: id = reaction_53, name = CKI degradation

reacti_52=cell*Vdi*CKI

# Reaction: id = reaction_54, name = Cdh1 synthesis

reacti_53=cell*functi_10(kah1p, kah1pp, Cdc20A, Cdh1, Jah1)

# Reaction: id = reaction_55, name = Cdh1 degradation

reacti_54=cell*functi_11(kih1pp, actCycACd, actCycA_1, kih1ppp, actCycB, Cdh1, Jih1)

# Reaction: id = reaction_56, name = preMPF synthesis

reacti_55=cell*functio_1(Vwee, cycB)

# Reaction: id = reaction_57, name = preMPF degradation 1

reacti_56=cell*Vwee*preMPF

# Reaction: id = reaction_58, name = preMPF degradation 2

reacti_57=cell*V25*preMPF

# Reaction: id = reaction_59, name = preMPF degradation 3

reacti_58=cell*Vdb*preMPF

# Reaction: id = reaction_60, name = TriA synthesis

reacti_59=cell*functio_4(kasa, cycA, freeCK1)

# Reaction: id = reaction_61, name = TriA degradation 1

reacti_60=cell*functio_4(kasa, TriA, freeCK1)

# Reaction: id = reaction_62, name = TriA degradation 2

reacti_61=cell*kdia*TriA

# Reaction: id = reaction_63, name = TriA degradation 3

reacti_62=cell*Vda*TriA

# Reaction: id = reaction_64, name = TriA degradation 4

reacti_63=cell*Vdi*TriA

# Reaction: id = reaction_65, name = APCP synthesis

reacti_64=cell*functi_12(kaAPC, actCycB, APCP, JaAPC)

# Reaction: id = reaction_66, name = APCP degradation

reacti_65=cell*Henri_Mic(APCP, JiAPC, kiAPC)

# Reaction: id = reaction_67, name = active Cdc20 synthesis

reacti_66=cell*functi_13(ka20, APCP, Cdc20T, Cdc20A, Ja20)

# Reaction: id = reaction_68, name = active Cdc20 degradation 1

reacti_67=cell*Henri_Mic(Cdc20A, Ji20, ki20)

# Reaction: id = reaction_69, name = active Cdc20 degradation 2

reacti_68=cell*kd20*Cdc20A

# Reaction: id = reaction_70, name = Cdc20T degradation 1

reacti_69=cell*functi_14(ka20, actCycB, J20, actCycB)

# Reaction: id = reaction_71, name = Cdc20T degradation 2

reacti_70=cell*kd20*Cdc20T

# Reaction: id = reaction_72, name = mass

reacti_71=cell*functio_1(u, mass)

# Species:   id = ERG, name = ERG, affected by kineticLaw

init ERG=0.0
dERG/dt=(1/(cell))*(( 1.0 * reaction) + (-1.0 * reaction_))

# Species:   id = DRG, name = DRG, affected by kineticLaw

init DRG=0.0
dDRG/dt=(1/(cell))*(( 1.0 * reactio_1) + ( 1.0 * reactio_2) + (-1.0 * reactio_3))

# Species:   id = ppRB, name = ppRB, affected by kineticLaw

init ppRB=14.08011
dppRB/dt=(1/(cell))*(( 1.0 * reactio_4) + ( 1.0 * reactio_5) + ( 1.0 * reactio_6) + (-1.0 * reactio_7))

# Species:   id = E2F, name = E2F, affected by kineticLaw

init E2F=0.716055
dE2F/dt=(1/(cell))*(( 1.0 * reactio_4) + ( 1.0 * reactio_8) + ( 1.0 * reactio_9) + (-1.0 * reacti_10) + (-1.0 * reacti_11) + ( 1.0 * reacti_12) + (-1.0 * reacti_13) + (-1.0 * reacti_14))

# Species:   id = pE2F, name = pE2F, affected by kineticLaw

init pE2F=1.388537
dpE2F/dt=(1/(cell))*(( 1.0 * reactio_5) + (-1.0 * reactio_9) + ( 1.0 * reacti_10) + ( 1.0 * reacti_15) + (-1.0 * reacti_16) + (-1.0 * reacti_17) + (-1.0 * reacti_18))

# Species:   id = Rb, name = Rb, affected by kineticLaw

init Rb=0.1071
dRb/dt=(1/(cell))*((-1.0 * reactio_6) + ( 1.0 * reactio_7) + ( 1.0 * reactio_8) + (-1.0 * reacti_11) + ( 1.0 * reacti_15) + (-1.0 * reacti_16))

# Species:   id = E2FRB, name = E2FRB, affected by kineticLaw

init E2FRB=0.27627
dE2FRB/dt=(1/(cell))*((-1.0 * reactio_4) + (-1.0 * reactio_8) + ( 1.0 * reacti_11) + ( 1.0 * reacti_19) + (-1.0 * reacti_20))

# Species:   id = pE2FRB, name = pE2FRB, affected by kineticLaw

init pE2FRB=0.53642
dpE2FRB/dt=(1/(cell))*((-1.0 * reactio_5) + (-1.0 * reacti_15) + ( 1.0 * reacti_16) + (-1.0 * reacti_19) + ( 1.0 * reacti_20))

# Species:   id = actCycD, name = actCycD, affected by kineticLaw

init actCycD=0.0
dactCycD/dt=(1/(cell))*(( 1.0 * reacti_21) + ( 1.0 * reacti_22) + ( 1.0 * reacti_23) + (-1.0 * reacti_24) + (-1.0 * reacti_25))

# Species:   id = TriD, name = TriD, affected by kineticLaw

init TriD=0.0
dTriD/dt=(1/(cell))*((-1.0 * reacti_22) + (-1.0 * reacti_23) + ( 1.0 * reacti_24) + (-1.0 * reacti_26))

# Species:   id = actCycACdk1, name = actCycACdk1, affected by kineticLaw

par actCycACd=0.003801725709734
aux actCycACd=actCycACd
dactCycACd/dt=(1/(cell))*(( 1.0 * reacti_27) + ( 1.0 * reacti_28) + ( 1.0 * reacti_29) + (-1.0 * reacti_30) + (-1.0 * reacti_31))

# Species:   id = actCycACdk2, name = actCycACdk2, affected by kineticLaw

par actCycA_1=0.042969690554
aux actCycA_1=actCycA_1
dactCycA_1/dt=(1/(cell))*(( 1.0 * reacti_32) + ( 1.0 * reacti_33) + (-1.0 * reacti_34) + (-1.0 * reacti_35))

# Species:   id = actCycB, name = actCycB, affected by kineticLaw

init actCycB=0.01
dactCycB/dt=(1/(cell))*(( 1.0 * reacti_36) + ( 1.0 * reacti_37) + (-1.0 * reacti_38) + (-1.0 * reacti_39) + (-1.0 * reacti_40))

# Species:   id = actCycE, name = actCycE, affected by kineticLaw

init actCycE=0.045866
dactCycE/dt=(1/(cell))*(( 1.0 * reacti_41) + ( 1.0 * reacti_42) + ( 1.0 * reacti_43) + ( 1.0 * reacti_44) + (-1.0 * reacti_45) + (-1.0 * reacti_46))

# Species:   id = cycA, name = cycA, affected by kineticLaw

init cycA=0.067925
dcycA/dt=(1/(cell))*(( 1.0 * reacti_47) + (-1.0 * reacti_48))

# Species:   id = cycB, name = cycB, affected by kineticLaw

init cycB=2.3652
dcycB/dt=(1/(cell))*(( 1.0 * reacti_36) + (-1.0 * reacti_49))

# Species:   id = cycE, name = cycE, affected by kineticLaw

init cycE=0.072513
dcycE/dt=(1/(cell))*(( 1.0 * reacti_41) + ( 1.0 * reacti_42) + (-1.0 * reacti_50))

# Species:   id = CKI, name = CKI, affected by kineticLaw

init CKI=0.60183432
dCKI/dt=(1/(cell))*(( 1.0 * reacti_51) + (-1.0 * reacti_52))

# Species:   id = Cdh1, name = Cdh1, affected by kineticLaw

init Cdh1=0.99736
dCdh1/dt=(1/(cell))*(( 1.0 * reacti_53) + (-1.0 * reacti_54))

# Species:   id = preMPF, name = preMPF, affected by kineticLaw

init preMPF=2.3552058
dpreMPF/dt=(1/(cell))*(( 1.0 * reacti_55) + (-1.0 * reacti_56) + (-1.0 * reacti_57) + (-1.0 * reacti_58))

# Species:   id = TriA, name = TriA, affected by kineticLaw

init TriA=0.0211544
dTriA/dt=(1/(cell))*(( 1.0 * reacti_59) + (-1.0 * reacti_60) + (-1.0 * reacti_61) + (-1.0 * reacti_62) + (-1.0 * reacti_63))

# Species:   id = APCP, name = APCP, affected by kineticLaw

init APCP=0.81078
dAPCP/dt=(1/(cell))*(( 1.0 * reacti_64) + (-1.0 * reacti_65))

# Species:   id = Cdc20A, name = Cdc20A, affected by kineticLaw

init Cdc20A=0.2727
dCdc20A/dt=(1/(cell))*(( 1.0 * reacti_66) + (-1.0 * reacti_67) + (-1.0 * reacti_68))

# Species:   id = Cdc20T, name = Cdc20T, affected by kineticLaw

init Cdc20T=0.27315
dCdc20T/dt=(1/(cell))*(( 1.0 * reacti_69) + (-1.0 * reacti_70))

# Species:   id = mass, name = mass, affected by kineticLaw

init mass=1.0
dmass/dt=(1/(cell))*(( 1.0 * reacti_71))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

