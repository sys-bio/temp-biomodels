
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Palini2011_Minimal_2_Feedback_Model
#
# is http://identifiers.org/biomodels.db/MODEL1102160000
# is http://identifiers.org/biomodels.db/BIOMD0000000325
# isDescribedBy http://identifiers.org/pubmed/21451590
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = cell, name = cell, constant
par cell=NaN

# Parameter:   id =  BR, name = BR, constant
par BR=0.005

# Parameter:   id =  Rs, name = Rs, constant
par Rs=3.0

# Parameter:   id =  KD, name = KD, constant
par KD=200.0

# Parameter:   id =  kdegR, name = kdegR, constant
par kdegR=0.005

# Parameter:   id =  kon, name = kon, constant
par kon=0.001

# Parameter:   id =  koff, name = koff, constant
par koff=0.05

# Parameter:   id =  kdegC, name = kdegC, constant
par kdegC=0.01

# Parameter:   id =  k1, name = k1, constant
par k1=1.0

# Parameter:   id =  k2, name = k2, constant
par k2=5.0

# Parameter:   id =  k3, name = k3, constant
par k3=45.0

# Parameter:   id =  kdegX, name = kdegX, constant
par kdegX=0.005

# Parameter:   id =  kdegA, name = kdegA, constant
par kdegA=0.005

# Parameter:   id =  BI, name = BI, constant
par BI=0.005

# Parameter:   id =  TFs, name = TFs, constant
par TFs=3.0

# Parameter:   id =  kdegI, name = kdegI, constant
par kdegI=0.005

# Reaction: id = R_expression

R_express=cell*(BR+Rs*A/(KD+A))

# Reaction: id = R_degradation

R_degrada=cell*kdegR*R

# Reaction: id = R_L_binding

R_L_bindi=cell*(kon*L*R-koff*C)

# Reaction: id = C_degradation

C_degrada=cell*kdegC*C

# Reaction: id = C_I_binding

C_I_bindi=cell*(k1*C*I-k2*X)

# Reaction: id = I_activation

I_activat=cell*k3*X

# Reaction: id = X_degradation

X_degrada=cell*kdegX*X

# Reaction: id = A_degradation

A_degrada=cell*kdegA*A

# Reaction: id = I_expression

I_express=cell*(BI+TFs*A/(KD+A))

# Reaction: id = I_degradation

I_degrada=cell*kdegI*I

# Species:   id = L, name = L
par L=0.1
aux L=L
#WARNING speciesID: L, constant= false  , boundaryCondition = true but is not involved in assignmentRule, rateRule or events !

# Species:   id = R, name = R, affected by kineticLaw

init R=1.0
dR/dt=(1/(cell))*(( 1.0 * R_express) + (-1.0 * R_degrada) + (-1.0 * R_L_bindi))

# Species:   id = C, name = C, affected by kineticLaw

init C=0.0
dC/dt=(1/(cell))*(( 1.0 * R_L_bindi) + (-1.0 * C_degrada) + (-1.0 * C_I_bindi) + ( 1.0 * I_activat))

# Species:   id = I, name = I, affected by kineticLaw

init I=1.0
dI/dt=(1/(cell))*((-1.0 * C_I_bindi) + ( 1.0 * I_express) + (-1.0 * I_degrada))

# Species:   id = X, name = X, affected by kineticLaw

init X=0.0
dX/dt=(1/(cell))*(( 1.0 * C_I_bindi) + (-1.0 * I_activat) + (-1.0 * X_degrada))

# Species:   id = A, name = A, affected by kineticLaw

init A=0.0
dA/dt=(1/(cell))*(( 1.0 * I_activat) + (-1.0 * A_degrada))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

