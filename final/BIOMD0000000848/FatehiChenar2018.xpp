
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = FatehiChenar2018 - Mathematical model of immune response to hepatitis B
#
# isDescribedBy http://identifiers.org/pubmed/29574141
# isDerivedFrom http://identifiers.org/doi/10.1109/ISB.2012.6314119
# isDerivedFrom http://identifiers.org/pubmed/8599114
# isDerivedFrom http://identifiers.org/pubmed/8633078
# is http://identifiers.org/biomodels.db/MODEL1911110001
# is http://identifiers.org/biomodels.db/BIOMD0000000848
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_Uninfected_To_Refractory_IFN, name = Function_for_Uninfected_To_Refractory_IFN
Function_(phi_1,T,F_1,F_2)=(phi_1*T*(F_1+F_2))


# FunctionDefinition id = Function_for_Uninfected_Death, name = Function_for_Uninfected_Death
Functio_1(d,T)=(d*(1-T))


# FunctionDefinition id = Function_for_Uninfected_Infection, name = Function_for_Uninfected_Infection
Functio_2(beta,V,T)=(beta*V*T)


# FunctionDefinition id = Function_for_Infected_Killing_Immune, name = Function_for_Infected_Killing_Immune
Functio_3(mu_1,s_1,F_1,s_2,F_2,N,mu_2,s_1_prime,s_2_prime,E,I)=((mu_1*(1+s_1*F_1+s_2*F_2)*N+mu_2*(1+s_1_prime*F_1+s_2_prime*F_2)*E)*I)


# FunctionDefinition id = Function_for_IFN_AB_Production_Infected, name = Function_for_IFN_AB_Production_Infected
Functio_4(p_1,I)=(p_1*I)


# FunctionDefinition id = Function_for_HBV_S_CTL_Proliferation_Antigen, name = Function_for_HBV_S_CTL_Proliferation_Antigen
Functio_5(alpha,I,E)=(alpha*I*E)


# FunctionDefinition id = Function_for_Antibody_Turnover, name = Function_for_Antibody_Turnover
Functio_6(d_a,A)=(d_a*(1-A))


# FunctionDefinition id = Function_for_IFN_G_Production_CTLs, name = Function_for_IFN_G_Production_CTLs
Functio_7(p_2,E)=(p_2*E)


# FunctionDefinition id = Function_for_NK_Cells_Proliferaton, name = Function_for_NK_Cells_Proliferaton
Functio_8(N)=(N*(1-N))


# FunctionDefinition id = Function_for_HBV_S_CTL_Proliferation, name = Function_for_HBV_S_CTL_Proliferation
Functio_9(r_e,E)=(r_e*E*(1-E))


# FunctionDefinition id = Function_for_Antibody_Production_Virus, name = Function_for_Antibody_Production_Virus
Functi_10(q,V)=(q*V)


# FunctionDefinition id = Function_for_Virus_Production, name = Function_for_Virus_Production
Functi_11(I,p,s_3,F_1,s_4,F_2)=(I*p/(1+s_3*F_1+s_4*F_2))


# FunctionDefinition id = Function_for_NK_Cells_Production_IFN, name = Function_for_NK_Cells_Production_IFN
Functi_12(q_1,F_1,q_2,F_2,N)=((q_1*F_1+q_2*F_2)*N)


# FunctionDefinition id = Function_for_Infected_To_Refractory, name = Function_for_Infected_To_Refractory
Functi_13(psi_2,I,F_2)=(psi_2*I*F_2)


# FunctionDefinition id = Function_for_IFN_G_Production_NK, name = Function_for_IFN_G_Production_NK
Functi_14(p_3,N)=(p_3*N)


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  d, name = d, constant
par d=0.003

# Parameter:   id =  beta, name = beta, constant
par beta=7.0

# Parameter:   id =  rho, name = rho, constant
par rho=5.0

# Parameter:   id =  psi_1, name = psi_1, constant
par psi_1=14.0

# Parameter:   id =  delta, name = delta, constant
par delta=0.56

# Parameter:   id =  mu_1, name = mu_1, constant
par mu_1=5.0

# Parameter:   id =  s_1, name = s_1, constant
par s_1=1.5

# Parameter:   id =  s_2, name = s_2, constant
par s_2=0.6

# Parameter:   id =  mu_2, name = mu_2, constant
par mu_2=0.14

# Parameter:   id =  s_1_prime, name = s_1_prime, constant
par s_1_prime=1.9

# Parameter:   id =  s_2_prime, name = s_2_prime, constant
par s_2_prime=2.0

# Parameter:   id =  psi_2, name = psi_2, constant
par psi_2=21.0

# Parameter:   id =  p_1, name = p_1, constant
par p_1=1.0

# Parameter:   id =  delta_1, name = delta_1, constant
par delta_1=4.9

# Parameter:   id =  p_2, name = p_2, constant
par p_2=0.5

# Parameter:   id =  p_3, name = p_3, constant
par p_3=3.0

# Parameter:   id =  delta_2, name = delta_2, constant
par delta_2=5.16

# Parameter:   id =  q_1, name = q_1, constant
par q_1=0.8

# Parameter:   id =  q_2, name = q_2, constant
par q_2=0.6

# Parameter:   id =  r_e, name = r_e, constant
par r_e=0.5

# Parameter:   id =  alpha, name = alpha, constant
par alpha=1.0

# Parameter:   id =  p, name = p, constant
par p=20.0

# Parameter:   id =  s_3, name = s_3, constant
par s_3=1.7

# Parameter:   id =  s_4, name = s_4, constant
par s_4=1.0

# Parameter:   id =  c, name = c, constant
par c=0.67

# Parameter:   id =  k, name = k, constant
par k=8.0

# Parameter:   id =  d_a, name = d_a, constant
par d_a=0.332

# Parameter:   id =  q, name = q, constant
par q=5.0

# Reaction: id = Uninfected_Death, name = Uninfected_Death

Uninfecte=compartme*Functio_1(d, T_renamed)

# Reaction: id = Uninfected_Infection, name = Uninfected_Infection

Uninfec_1=compartme*Functio_2(beta, V, T_renamed)

# Reaction: id = Refractory_To_Uninfected, name = Refractory_To_Uninfected

Refractor=compartme*rho*R

# Reaction: id = Uninfected_To_Refractory_IFN, name = Uninfected_To_Refractory_IFN

Uninfec_2=compartme*Function_(psi_1, T_renamed, F_1, F_2)

# Reaction: id = Infected_Death, name = Infected_Death

Infected_=compartme*delta*I

# Reaction: id = Infected_Killing_Immune, name = Infected_Killing_Immune

Infecte_1=compartme*Functio_3(mu_1, s_1, F_1, s_2, F_2, N, mu_2, s_1_prime, s_2_prime, E, I)

# Reaction: id = IFN_AB_Production_Infected, name = IFN_AB_Production_Infected

IFN_AB_Pr=compartme*Functio_4(p_1, I)

# Reaction: id = IFN_AB_Degradation, name = IFN_AB_Degradation

IFN_AB_De=compartme*delta_1*F_1

# Reaction: id = IFN_G_Production_CTLs, name = IFN_G_Production_CTLs

IFN_G_Pro=compartme*Functio_7(p_2, E)

# Reaction: id = IFN_G_Production_NK, name = IFN_G_Production_NK

IFN_G_P_1=compartme*Functi_14(p_3, N)

# Reaction: id = IFN_G_Degradation, name = IFN_G_Degradation

IFN_G_Deg=compartme*delta_2*F_2

# Reaction: id = NK_Cells_Proliferaton, name = NK_Cells_Proliferaton

NK_Cells_=compartme*Functio_8(N)

# Reaction: id = NK_Cells_Production_IFN, name = NK_Cells_Production_IFN

NK_Cell_1=compartme*Functi_12(q_1, F_1, q_2, F_2, N)

# Reaction: id = HBV_S_CTL_Proliferation, name = HBV_S_CTL_Proliferation

HBV_S_CTL=compartme*Functio_9(r_e, E)

# Reaction: id = HBV_S_CTL_Proliferation_Antigen, name = HBV_S_CTL_Proliferation_Antigen

HBV_S_C_1=compartme*Functio_5(alpha, I, E)

# Reaction: id = Infected_To_Refractory, name = Infected_To_Refractory

Infecte_2=compartme*Functi_13(psi_2, I, F_2)

# Reaction: id = Virus_Production, name = Virus_Production

Virus_Pro=compartme*Functi_11(I, p, s_3, F_1, s_4, F_2)

# Reaction: id = Virus_Clearance_Natural, name = Virus_Clearance_Natural

Virus_Cle=compartme*c*V

# Reaction: id = Virus_Clearance_Antibodies, name = Virus_Clearance_Antibodies

Virus_C_1=compartme*k*V*A

# Reaction: id = Antibody_Turnover, name = Antibody_Turnover

Antibody_=compartme*Functio_6(d_a, A)

# Reaction: id = Antibody_Production_Virus, name = Antibody_Production_Virus

Antibod_1=compartme*Functi_10(q, V)

# Species:   id = T, name = T, affected by kineticLaw

par T_renamed=0.9
aux T_renamed=T_renamed
dT_renamed/dt=(1/(compartme))*(( 1.0 * Uninfecte) + (-1.0 * Uninfec_1) + ( 1.0 * Refractor) + (-1.0 * Uninfec_2))

# Species:   id = I, name = I, affected by kineticLaw

init I=0.0
dI/dt=(1/(compartme))*(( 1.0 * Uninfec_1) + (-1.0 * Infected_) + (-1.0 * Infecte_1) + (-1.0 * Infecte_2))

# Species:   id = F_1, name = F_1, affected by kineticLaw

init F_1=0.0
dF_1/dt=(1/(compartme))*(( 1.0 * IFN_AB_Pr) + (-1.0 * IFN_AB_De))

# Species:   id = F_2, name = F_2, affected by kineticLaw

init F_2=0.0
dF_2/dt=(1/(compartme))*(( 1.0 * IFN_G_Pro) + ( 1.0 * IFN_G_P_1) + (-1.0 * IFN_G_Deg))

# Species:   id = N, name = N, affected by kineticLaw

init N=0.1
dN/dt=(1/(compartme))*(( 1.0 * NK_Cells_) + ( 1.0 * NK_Cell_1))

# Species:   id = E, name = E, affected by kineticLaw

init E=0.2
dE/dt=(1/(compartme))*(( 1.0 * HBV_S_CTL) + ( 1.0 * HBV_S_C_1))

# Species:   id = R, name = R, affected by kineticLaw

init R=0.0
dR/dt=(1/(compartme))*((-1.0 * Refractor) + ( 1.0 * Uninfec_2) + ( 1.0 * Infecte_2))

# Species:   id = V, name = V, affected by kineticLaw

init V=0.4
dV/dt=(1/(compartme))*(( 1.0 * Virus_Pro) + (-1.0 * Virus_Cle) + (-1.0 * Virus_C_1))

# Species:   id = A, name = A, affected by kineticLaw

init A=0.1
dA/dt=(1/(compartme))*((-1.0 * Virus_C_1) + ( 1.0 * Antibody_) + ( 1.0 * Antibod_1))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

