
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Hong2009_CircadianClock
#
# is http://identifiers.org/biomodels.db/MODEL7984093336
# is http://identifiers.org/biomodels.db/BIOMD0000000216
# isDescribedBy http://identifiers.org/pubmed/19424508
# isDerivedFrom http://identifiers.org/pubmed/18057329
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = function_4_r1, name = function_4_r1
function_(Dex,system)=(Dex/system)


# FunctionDefinition id = function_4_r8, name = function_4_r8
functio_1(CP,CP2,IC,Jp,kp1,system)=(kp1*CP/(Jp+CP+2*CP2+2*IC)/system)


# FunctionDefinition id = function_4_r2, name = function_4_r2
functio_2(J,TF,kms,n,system)=(kms*TF^n/(J^n+TF^n)/system)


# FunctionDefinition id = function_4_r17, name = function_4_r17
functio_3(CP,CP2,IC,Jp,kp2,system)=(kp2*IC/(Jp+CP+2*CP2+2*IC)/system)


# FunctionDefinition id = function_4_r13, name = function_4_r13
functio_4(CP,CP2,IC,Jp,kp2,system)=(kp2*CP2/(Jp+CP+2*CP2+2*IC)/system)


# FunctionDefinition id = function_1, name = Rate Law for r4
functio_5(kcps,M)=(kcps*M)


# Compartment: id = system, name = system, constant
par system=1.0

# Parameter:   id =  Dex, name = Dex, constant
par Dex=0.0

# Parameter:   id =  kms, name = kms, constant
par kms=1.0

# Parameter:   id =  n, name = n, constant
par n=2.0

# Parameter:   id =  J, name = J, constant
par J=0.3

# Parameter:   id =  kmd, name = kmd, constant
par kmd=0.1

# Parameter:   id =  kcps, name = kcps, constant
par kcps=0.5

# Parameter:   id =  kcpd, name = kcpd, constant
par kcpd=0.525

# Parameter:   id =  ka, name = ka, constant
par ka=100.0

# Parameter:   id =  kd, name = kd, constant
par kd=0.01

# Parameter:   id =  kp1, name = kp1, constant
par kp1=10.0

# Parameter:   id =  Jp, name = Jp, constant
par Jp=0.05

# Parameter:   id =  chk2, name = chk2, constant
par chk2=0.0

# Parameter:   id =  kicd, name = kicd, constant
par kicd=0.01

# Parameter:   id =  kcp2d, name = kcp2d, constant
par kcp2d=0.0525

# Parameter:   id =  kica, name = kica, constant
par kica=20.0

# Parameter:   id =  chk2c, name = chk2c, constant
par chk2c=0.0

# Parameter:   id =  kp2, name = kp2, constant
par kp2=0.1

# Parameter:   id =  ICtot, name = TFtot, constant
par ICtot=1.0

# assignmentRule: variable = CPtot
CPtot=CP+2*CP2+2*IC
aux CPtot=CPtot

# Reaction: id = r1, name = r1

r1=system*function_(Dex, system)

# Reaction: id = r2, name = r2

r2=system*functio_2(J, TF, kms, n, system)

# Reaction: id = r3, name = r3

r3=system*kmd*M

# Reaction: id = r4, name = r4

r4=system*functio_5(kcps, M)

# Reaction: id = r5, name = r5

r5=system*kcpd*CP

# Reaction: id = r6, name = r6

r6=system*ka*CP^2

# Reaction: id = r7, name = r7

r7=system*kd*CP2

# Reaction: id = r8, name = r8

r8=system*functio_1(CP, CP2, IC, Jp, kp1, system)

# Reaction: id = r9, name = r9

r9=system*chk2*CP

# Reaction: id = r10, name = r10

r10=system*kicd*IC

# Reaction: id = r11, name = r11

r11=system*kcp2d*CP2

# Reaction: id = r12, name = r12

r12=system*kica*CP2*TF

# Reaction: id = r13, name = r13

r13=system*functio_4(CP, CP2, IC, Jp, kp2, system)

# Reaction: id = r14, name = r14

r14=system*chk2*CP2

# Reaction: id = r15, name = r15

r15=system*kcp2d*IC

# Reaction: id = r16, name = r16

r16=system*chk2c*IC

# Reaction: id = r17, name = r17

r17=system*functio_3(CP, CP2, IC, Jp, kp2, system)

# Species:   id = M, name = M, affected by kineticLaw

init M=1.4
dM/dt=(1/(system))*(( 1.0 * r1) + ( 1.0 * r2) + (-1.0 * r3))

# Species:   id = TF, name = TF, affected by kineticLaw

init TF=0.13
dTF/dt=(1/(system))*(( 1.0 * r10) + (-1.0 * r12) + ( 1.0 * r15) + ( 1.0 * r16) + ( 1.0 * r17))

# Species:   id = CP, name = CP, affected by kineticLaw

init CP=0.037
dCP/dt=(1/(system))*(( 1.0 * r4) + (-1.0 * r5) + (-2.0 * r6) + ( 2.0 * r7) + (-1.0 * r8) + (-1.0 * r9))

# Species:   id = CP2, name = CP2, affected by kineticLaw

init CP2=0.046
dCP2/dt=(1/(system))*(( 1.0 * r6) + (-1.0 * r7) + ( 1.0 * r10) + (-1.0 * r11) + (-1.0 * r12) + (-1.0 * r13) + (-1.0 * r14))

# Species:   id = IC, name = IC, affected by kineticLaw

init IC=0.37
dIC/dt=(1/(system))*((-1.0 * r10) + ( 1.0 * r12) + (-1.0 * r15) + (-1.0 * r16) + (-1.0 * r17))

# Species:   id = CPtot, name = CPtot, involved in a rule 

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

