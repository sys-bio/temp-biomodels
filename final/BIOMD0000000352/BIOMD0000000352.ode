
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Vernoux2011_AuxinSignaling_AuxinFluctuating
#
# is http://identifiers.org/biomodels.db/MODEL1108110000
# is http://identifiers.org/biomodels.db/BIOMD0000000352
# isDescribedBy http://identifiers.org/pubmed/21734647
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = compartment_0000001, name = c_1, constant
par compartme=1.0

# Parameter:   id =  pi_I, name = pi_I, constant
par pi_I=1.0

# Parameter:   id =  d_r, name = d_r, constant
par d_r=0.007

# Parameter:   id =  d_A, name = d_A, constant
par d_A=0.003

# Parameter:   id =  d_II, name = d_II, constant
par d_II=0.003

# Parameter:   id =  d_IA, name = d_IA, constant
par d_IA=0.003

# Parameter:   id =  k_II, name = k_II, constant
par k_II=1.0

# Parameter:   id =  k_IA, name = k_IA, constant
par k_IA=1.0

# Parameter:   id =  B_d, name = B_d, constant
par B_d=100.0

# Parameter:   id =  f_A, name = f_A, constant
par f_A=10.0

# Parameter:   id =  gamma_I, name = gamma_I, constant
par gamma_I=10.0

# Parameter:   id =  K_aux, name = K_aux, constant
par K_aux=1.0

# Parameter:   id =  K_II, name = K_II, constant
par K_II_1=10.0

# Parameter:   id =  K_IA, name = K_IA, constant
par K_IA_1=10.0

# Parameter:   id =  f_c, name = f_c, constant
par f_c=10.0

# Parameter:   id =  w_A, name = w_A, constant
par w_A=10.0

# Parameter:   id =  w_I, name = w_I, constant
par w_I=10.0

# Parameter:   id =  w_D, name = w_D, constant
par w_D=10.0

# Parameter:   id =  d_I, name = d_I, constant
par d_I=0.05

# Parameter:   id =  pi_A, name = pi_A, constant
par pi_A=1.0

# Parameter:   id =  k_Am, name = k_Am, constant
par k_Am=10.0

# Parameter:   id =  kprime_IA, name = kprime_IA, defined by a Rule

# Parameter:   id =  kprime_II, name = kprime_II, defined by a Rule

# Parameter:   id =  aux_basal, name = aux_basal, defined by a Rule

# assignmentRule: variable = aux
aux=1.11*sin(2*3.1416/800*(t-200))+1.11
aux aux=aux

# assignmentRule: variable = kprime_IA
kprime_IA=K_IA_1*k_IA
aux kprime_IA=kprime_IA

# assignmentRule: variable = kprime_II
kprime_II=K_II_1*k_II
aux kprime_II=kprime_II

# assignmentRule: variable = aux_basal
aux_basal=1/(K_aux*(gamma_I-1))
aux aux_basal=aux_basal

# Reaction: id = reac_DIA, name = reac_DIA

reac_DIA=k_IA*I*A-kprime_IA*D_IA_1

# Reaction: id = reac_DII, name = reac_DII

reac_DII=k_II*I*I-kprime_II*D_II_1

# Reaction: id = reac_degrI, name = reac_degrI

reac_degr=gamma_I*d_I*K_aux*aux/(K_aux*aux+1)*I

# Reaction: id = reac_degrA, name = reac_degrA

reac_de_1=d_A*A

# Reaction: id = reac_degrDIA, name = reac_degrDIA

reac_de_2=d_IA*D_IA_1

# Reaction: id = reac_degrDII, name = reac_degrDII

reac_de_3=d_II*D_II_1

# Reaction: id = reac_DIAxA, name = reac_DIAxA

reac_DIAx=gamma_I*d_I*K_aux*aux/(K_aux*aux+1)*D_IA_1

# Reaction: id = reac_DIIxI, name = reac_DIIxI

reac_DIIx=gamma_I*d_I*K_aux*aux/(K_aux*aux+1)*D_II_1

# Reaction: id = reac_degrR, name = reac_degrR

reac_de_4=d_r*R

# Reaction: id = reac_prodI, name = reac_prodI

reac_prod=pi_I*R

# Reaction: id = reac_prodA, name = reac_prodA

reac_pr_1=pi_A

# Reaction: id = reac_prodR, name = reac_prodR

reac_pr_2=(1+f_c/B_d*A*(1+w_A*f_A*A/B_d))/(1+A/B_d*(1+w_A*A/B_d)+w_I*A*I/(K_IA_1*B_d)+w_D*D_IA_1/B_d+k_Am)

# Species:   id = I, name = Aux/IAA, affected by kineticLaw

init I=10.0
dI/dt=(1/(compartme))*((-1.0 * reac_DIA) + (-1.0 * reac_DII) + (-1.0 * reac_DII) + (-1.0 * reac_degr) + ( 1.0 * reac_DIIx) + ( 1.0 * reac_prod))

# Species:   id = A, name = ARF, affected by kineticLaw

init A=10.0
dA/dt=(1/(compartme))*((-1.0 * reac_DIA) + (-1.0 * reac_de_1) + ( 1.0 * reac_DIAx) + ( 1.0 * reac_pr_1))

# Species:   id = D_II, name = Aux/IAA:Aux/IAA, affected by kineticLaw

par D_II_1=10.0
aux D_II_1=D_II_1
dD_II_1/dt=(1/(compartme))*(( 1.0 * reac_DII) + (-1.0 * reac_de_3) + (-1.0 * reac_DIIx))

# Species:   id = D_IA, name = Aux/IAA:ARF, affected by kineticLaw

par D_IA_1=10.0
aux D_IA_1=D_IA_1
dD_IA_1/dt=(1/(compartme))*(( 1.0 * reac_DIA) + (-1.0 * reac_de_2) + (-1.0 * reac_DIAx))

# Species:   id = R, name = mRNA, affected by kineticLaw

init R=1.0
dR/dt=(1/(compartme))*((-1.0 * reac_de_4) + ( 1.0 * reac_pr_2))

# Species:   id = aux, name = auxin, defined in a rule 

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

