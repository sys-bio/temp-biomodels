
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Alexander2010_Tcell_Regulation_Sys1
#
# is http://identifiers.org/biomodels.db/MODEL1012220000
# is http://identifiers.org/biomodels.db/BIOMD0000000289
# isDescribedBy http://identifiers.org/pubmed/20195912
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# Compartment: id = body, name = body, constant
par body=1.0

# Parameter:   id =  v, name = v, constant
par v=0.0025

# Parameter:   id =  f, name = f, constant
par f=1.0E-4

# Parameter:   id =  gamma, name = gamma, constant
par gamma=2000.0

# Parameter:   id =  beta, name = beta, constant
par beta=200.0

# Parameter:   id =  pi1, name = pi1, constant
par pi1=0.016

# Parameter:   id =  lambdaE, name = lambdaE, constant
par lambdaE=1000.0

# Parameter:   id =  muA, name = muA, constant
par muA=0.25

# Parameter:   id =  muR, name = muR, constant
par muR=0.25

# Parameter:   id =  muE, name = muE, constant
par muE=0.25

# Parameter:   id =  muG, name = muG, constant
par muG=5.0

# Parameter:   id =  b1, name = b1, constant
par b1=0.25

# Parameter:   id =  sigma1, name = sigma1, constant
par sigma1=3.0E-6

# Parameter:   id =  mA, name = mA, defined by a Rule

# Parameter:   id =  mG, name = mG, defined by a Rule

# Parameter:   id =  R0, name = R0, defined by a Rule

# assignmentRule: variable = mA
mA=b1+muA
aux mA=mA

# assignmentRule: variable = mG
mG=muG+v
aux mG=mG

# assignmentRule: variable = R0
R0=f*v*lambdaE*gamma/(mG*mA*muE)
aux R0=R0

# Reaction: id = r1a, name = r1a: self-antigen uptake

r1a=v*G

# Reaction: id = r1b, name = r1b: pAPC maturation

r1b=f*v*G

# Reaction: id = r2, name = r2: self-antigen release triggered by E

r2=gamma*E

# Reaction: id = r3, name = r3: R activation by A

r3=beta*A

# Reaction: id = r4, name = r4: R activation by A and E

r4=pi1*E*A

# Reaction: id = r5, name = r5: E generation by A

r5=lambdaE*A

# Reaction: id = r6, name = r6: A death

r6=muA*A

# Reaction: id = r7, name = r7: R death

r7=muR*R

# Reaction: id = r8, name = r8: E death

r8=muE*E

# Reaction: id = r9, name = r9: G clearance

r9=muG*G

# Reaction: id = r10, name = r10: A suppression by Tregs of other specificity

r10=b1*A

# Reaction: id = r11, name = r11: A suppression by R

r11=sigma1*A*R

# Species:   id = A, name = A, affected by kineticLaw

init A=1.0
dA/dt=( 1.0 * r1b) + (-1.0 * r6) + (-1.0 * r10) + (-1.0 * r11)

# Species:   id = R, name = R, affected by kineticLaw

init R=0.0
dR/dt=( 1.0 * r3) + ( 1.0 * r4) + (-1.0 * r7)

# Species:   id = E, name = E, affected by kineticLaw

init E=0.0
dE/dt=( 1.0 * r5) + (-1.0 * r8)

# Species:   id = G, name = G, affected by kineticLaw

init G=1.0E8
dG/dt=(-1.0 * r1a) + ( 1.0 * r2) + (-1.0 * r9)

# Species:   id = A_im, name = A_im
par A_im=0.0
aux A_im=A_im
#WARNING speciesID: A_im, constant= false  , boundaryCondition = true but is not involved in assignmentRule, rateRule or events !

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

