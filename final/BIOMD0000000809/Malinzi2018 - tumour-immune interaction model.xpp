
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Malinzi2018 - tumour-immune interaction model
#
# is http://identifiers.org/biomodels.db/MODEL1909060001
# is http://identifiers.org/biomodels.db/BIOMD0000000809
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_x_logistic_growth, name = Function for x logistic growth
Function_(phi_1,x,phi_2)=(phi_1*x*(1-phi_2*x))


# FunctionDefinition id = Function_for_x_proliferation, name = Function for x proliferation
Functio_1(delta,x,y,gamma)=(delta*x*y/(gamma+x))


# FunctionDefinition id = Function_for_x_immune_inactivation, name = Function for x immune inactivation
Functio_2(nu_1,x,y)=(nu_1*x*y)


# FunctionDefinition id = Function_for_y_logistic_growth, name = Function for y logistic growth
Functio_3(sigma_1,y,sigma_2)=(sigma_1*y*(1-sigma_2*y))


# FunctionDefinition id = Function_for_y_tumour_lysis, name = Function for y tumour lysis
Functio_4(nu_2,x,y)=(nu_2*x*y)


# FunctionDefinition id = Function_for_u_production, name = Function for u production
Functio_5(nu_3,x,y)=(nu_3*x*y)


# FunctionDefinition id = Function_for_u_decay, name = Function for u decay
Functio_6(myu_1,u)=(myu_1*u)


# FunctionDefinition id = Function_for_y__formation, name = Function for y* formation
Functio_7(x,y,rho)=(rho*x*y)


# FunctionDefinition id = Function_for_y__decay, name = Function for y* decay
Functio_8(myu_2,ystar)=(myu_2*ystar)


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  R, name = R, defined by a Rule

# Parameter:   id =  phi_1, name = phi_1, constant
par phi_1=1.3398

# Parameter:   id =  phi_2, name = phi_2, constant
par phi_2=0.25

# Parameter:   id =  delta, name = delta, constant
par delta=3.0218

# Parameter:   id =  nu_1, name = nu_1, constant
par nu_1=0.00218

# Parameter:   id =  sigma_1, name = sigma_1, constant
par sigma_1=0.3

# Parameter:   id =  sigma_2, name = sigma_2, constant
par sigma_2=0.5

# Parameter:   id =  nu_2, name = nu_2, constant
par nu_2=0.7279

# Parameter:   id =  nu_3, name = nu_3, constant
par nu_3=300.0

# Parameter:   id =  myu_1, name = myu_1, constant
par myu_1=1.0

# Parameter:   id =  rho, name = rho, constant
par rho=0.1

# Parameter:   id =  myu_2, name = myu_2, constant
par myu_2=0.24

# Parameter:   id =  gamma, name = gamma, constant
par gamma=2.02

# rateRule: variable = R
init R=0.8
dR/dt=R*(sigma_1*y*(1-sigma_2*y)-myu_2*ystar)/(y+ystar-1)/3

# Reaction: id = x_logistic_growth, name = Immune cell x logistic growth

x_logisti=compartme*Function_(phi_1, x, phi_2)

# Reaction: id = x_proliferation, name = Immune cell x proliferation

x_prolife=compartme*Functio_1(delta, x, y, gamma)

# Reaction: id = x_immune_inactivation, name = Immune cell x immune inactivation

x_immune_=compartme*Functio_2(nu_1, x, y)

# Reaction: id = y_logistic_growth, name = Tumour cell y logistic growth

y_logisti=compartme*Functio_3(sigma_1, y, sigma_2)

# Reaction: id = y_tumour_lysis, name = Tumour cell y tumour lysis

y_tumour_=compartme*Functio_4(nu_2, x, y)

# Reaction: id = u_production, name = Chemokine concentration u production

u_product=compartme*Functio_5(nu_3, x, y)

# Reaction: id = u_decay, name = Chemokine concentration u decay

u_decay=compartme*Functio_6(myu_1, u)

# Reaction: id = ystar_formation, name = Dead tumour cell ystar formation

ystar_for=compartme*Functio_7(x, y, rho)

# Reaction: id = ystar_decay, name = Dead tumour cell ystar decay

ystar_dec=compartme*Functio_8(myu_2, ystar)

# Species:   id = x, name = Immune cell x, affected by kineticLaw

init x=0.3
dx/dt=(1/(compartme))*(( 1.0 * x_logisti) + ( 1.0 * x_prolife) + (-1.0 * x_immune_))

# Species:   id = y, name = Tumour cell y, affected by kineticLaw

init y=0.8
dy/dt=(1/(compartme))*(( 1.0 * y_logisti) + (-1.0 * y_tumour_))

# Species:   id = u, name = Chemokine concentration u, affected by kineticLaw

init u=1.0E-6
du/dt=(1/(compartme))*(( 1.0 * u_product) + (-1.0 * u_decay))

# Species:   id = ystar, name = Dead tumour cell ystar, affected by kineticLaw

init ystar=0.1
dystar/dt=(1/(compartme))*(( 1.0 * ystar_for) + (-1.0 * ystar_dec))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

