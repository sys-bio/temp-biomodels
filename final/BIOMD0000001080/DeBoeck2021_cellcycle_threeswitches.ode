
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = DeBoeck2021 - Modular approach to modeling the cell cycle, 5 ODE model with 3 bistable switches
#
# isDescribedBy http://identifiers.org/doi:10.1371/journal.pcbi.1009008
# is http://identifiers.org/biomodels.db/MODEL2212060002
# is http://identifiers.org/biomodels.db/BIOMD0000001080
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for__J1, name = Function for _J1
Function_(APC,CycD,d_deg,default_compartment,delta_d)=(d_deg*CycD*(APC+delta_d)/default_compartment)


# FunctionDefinition id = xi, name = xi
xi(x,alpha,r)=(1+alpha*x*(x-1)*(x-r))


# FunctionDefinition id = Function_for__J2, name = Function for _J2
Functio_1(E2F,b_syn,default_compartment)=(b_syn*E2F/default_compartment)


# FunctionDefinition id = Function_for__J3, name = Function for _J3
Functio_2(APC,CycB,b_deg,default_compartment,delta_b)=(b_deg*CycB*(APC+delta_b)/default_compartment)


# FunctionDefinition id = Function_for__J0, name = Function for _J0
Functio_3(d_syn,default_compartment)=(d_syn/default_compartment)


# Compartment: id = default_compartment, name = default_compartment, constant
par default_c=1.0

# Parameter:   id =  d_syn, name = d_syn, constant
par d_syn=0.15

# Parameter:   id =  d_deg, name = d_deg, constant
par d_deg=0.009

# Parameter:   id =  APC, name = APC, defined by a Rule

# Parameter:   id =  delta_d, name = delta_d, constant
par delta_d=0.05

# Parameter:   id =  b_syn, name = b_syn, constant
par b_syn=0.03

# Parameter:   id =  E2F, name = E2F, defined by a Rule

# Parameter:   id =  b_deg, name = b_deg, constant
par b_deg=0.003

# Parameter:   id =  delta_b, name = delta_b, constant
par delta_b=0.05

# Parameter:   id =  epsilon_e2f, name = epsilon_e2f, constant
par epsilon_e=0.01

# Parameter:   id =  n, name = n, constant
par n=15.0

# Parameter:   id =  K_cyc_e2f, name = K_cyc_e2f, constant
par K_cyc_e2f=120.0

# Parameter:   id =  alpha_e2f, name = alpha_e2f, constant
par alpha_e2f=5.0

# Parameter:   id =  r, name = r, constant
par r=0.5

# Parameter:   id =  Cdk, name = Cdk, defined by a Rule

# Parameter:   id =  epsilon_cdk, name = epsilon_cdk, constant
par epsilon_c=0.01

# Parameter:   id =  K_cyc_cdk, name = K_cyc_cdk, constant
par K_cyc_cdk=40.0

# Parameter:   id =  alpha_cdk, name = alpha_cdk, constant
par alpha_cdk=5.0

# Parameter:   id =  epsilon_apc, name = epsilon_apc, constant
par epsilon_a=0.01

# Parameter:   id =  K_cdk_apc, name = K_cdk_apc, constant
par K_cdk_apc=20.0

# Parameter:   id =  alpha_apc, name = alpha_apc, constant
par alpha_apc=5.0

# Parameter:   id =  CycD_max, name = CycD_max, defined by a Rule

# Parameter:   id =  CycB_max, name = CycB_max, defined by a Rule

# Parameter:   id =  APC_max, name = APC_max, defined by a Rule

# Parameter:   id =  E2F_max, name = E2F_max, defined by a Rule

# Parameter:   id =  Cdk_max, name = Cdk_max, defined by a Rule

# assignmentRule: variable = Cdk_max
Cdk_max=Cdk/44
aux Cdk_max=Cdk_max

# assignmentRule: variable = CycD_max
CycD_max=CycD/185.74
aux CycD_max=CycD_max

# assignmentRule: variable = CycB_max
CycB_max=CycB/45.92
aux CycB_max=CycB_max

# assignmentRule: variable = APC_max
APC_max=APC/0.999992
aux APC_max=APC_max

# assignmentRule: variable = E2F_max
E2F_max=E2F/0.998646
aux E2F_max=E2F_max

# rateRule: variable = APC
init APC=1.0E-12
dAPC/dt=1/epsilon_a*(Cdk^n/((K_cdk_apc*xi(APC, alpha_apc, r))^n+Cdk^n)-APC)

# rateRule: variable = E2F
init E2F=1.0E-12
dE2F/dt=1/epsilon_e*(CycD^n/((K_cyc_e2f*xi(E2F, alpha_e2f, r))^n+CycD^n)-E2F)

# rateRule: variable = Cdk
init Cdk=0.8
dCdk/dt=1/epsilon_c*(CycB^n/((K_cyc_cdk*xi(Cdk/CycB, alpha_cdk, r))^n+CycB^n)*CycB-Cdk)

# Reaction: id = _J0, name = CycD_Synthesis

_J0=default_c*Functio_3(d_syn, default_c)

# Reaction: id = _J1, name = CycD_degradation

_J1=default_c*Function_(APC, CycD, d_deg, default_c, delta_d)

# Reaction: id = _J2, name = CycB_synthesis

_J2=default_c*Functio_1(E2F, b_syn, default_c)

# Reaction: id = _J3, name = CycB_degradation

_J3=default_c*Functio_2(APC, CycB, b_deg, default_c, delta_b)

# Species:   id = CycD, name = CycD, affected by kineticLaw

init CycD=69.6
dCycD/dt=(1/(default_c))*(( 1.0 * _J0) + (-1.0 * _J1))

# Species:   id = CycB, name = CycB, affected by kineticLaw

init CycB=32.9
dCycB/dt=(1/(default_c))*(( 1.0 * _J2) + (-1.0 * _J3))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

