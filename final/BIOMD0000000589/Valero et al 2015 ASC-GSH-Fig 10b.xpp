
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = ASC-GSH pathway
#
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = RUNIFORM
RUNIFORM(a,b)=((a+b)/2)


# Compartment: id = c, name = c, constant
par c=1.0

# Parameter:   id =  vGR, name = vGR, defined by a Rule

# Parameter:   id =  vDHAR, name = vDHAR, defined by a Rule

# Parameter:   id =  vSOD, name = vSOD, defined by a Rule

# Parameter:   id =  F12, name = F12, defined by a Rule

# Parameter:   id =  k12, name = k12, constant
par k12=500.0

# Parameter:   id =  kN, name = kN, defined by a Rule

# Parameter:   id =  k4, name = k4, constant
par k4=2520.0

# Parameter:   id =  k3, name = k3, constant
par k3=0.01

# Parameter:   id =  F13, name = F13, defined by a Rule

# Parameter:   id =  kSOD, name = kSOD, constant
par kSOD=720000.0

# Parameter:   id =  SOD, name = SOD, constant
par SOD=50.0

# Parameter:   id =  kcatDHAR, name = kcatDHAR, constant
par kcatDHAR=511200.0

# Parameter:   id =  DHAR, name = DHAR, constant
par DHAR=1.7

# Parameter:   id =  K, name = K, constant
par K=500.0

# Parameter:   id =  KMDHA, name = KM_DHAR_DHA, constant
par KMDHA=70.0

# Parameter:   id =  KMGSH, name = KM_DHAR_GSH, constant
par KMGSH=2500.0

# Parameter:   id =  k1, name = k1, constant
par k1=1800.0

# Parameter:   id =  k13, name = k13, constant
par k13=1850.0

# Parameter:   id =  k2APX, name = k2APX, constant
par k2APX=180000.0

# Parameter:   id =  k3APX, name = k3APX, constant
par k3APX=7560.0

# Parameter:   id =  k4APX, name = k4APX, constant
par k4APX=2520.0

# Parameter:   id =  k5APX, name = k5APX, constant
par k5APX=0.1

# Parameter:   id =  k6, name = k6, constant
par k6=720.0

# Parameter:   id =  k5, name = k5, constant
par k5=0.0072

# Parameter:   id =  k1APX, name = k1APX, constant
par k1APX=43200.0

# Parameter:   id =  k2, name = k2, constant
par k2=720.0

# Parameter:   id =  F1, name = F1, defined by a Rule

# Parameter:   id =  F11, name = F11, defined by a Rule

# Parameter:   id =  GR, name = GR, constant
par GR=1.4

# Parameter:   id =  kcatGR, name = kcatGR, constant
par kcatGR=420000.0

# Parameter:   id =  KMNADPH, name = KM-GR_NADPH, constant
par KMNADPH=3.0

# Parameter:   id =  KMGSSG, name = KM_GR_GSSG, constant
par KMGSSG=200.0

# Parameter:   id =  k11, name = k11, constant
par k11=35000.0

# Parameter:   id =  a1, name = a1, constant
par a1=4972643.30100734

# Parameter:   id =  b, name = b, constant
par b=11.0

# Parameter:   id =  c_0, name = c, constant
par c_0=4.712389

# Parameter:   id =  c11, name = c11, defined by a Rule

# Parameter:   id =  c12, name = c12, defined by a Rule

# Parameter:   id =  c13, name = c13, defined by a Rule

# Parameter:   id =  a2, name = a2, constant
par a2=4248357.32311476

# Parameter:   id =  incr, name = incr, constant
par incr=0.25

# Parameter:   id =  a3, name = a3, constant
par a3=4645065.88119548

# Parameter:   id =  a4, name = a4, constant
par a4=4618321.40700426

# Parameter:   id =  a5, name = a5, constant
par a5=4829800.71229395

# Parameter:   id =  a6, name = a6, constant
par a6=4281212.59191539

# Parameter:   id =  a7, name = a7, constant
par a7=4002024.72310048

# Parameter:   id =  a8, name = a8, constant
par a8=4393901.53519344

# Parameter:   id =  a9, name = a9, constant
par a9=4004773.81551173

# Parameter:   id =  a10, name = a10, constant
par a10=4333671.22069467

# Parameter:   id =  a11, name = a11, constant
par a11=4104259.59562417

# Parameter:   id =  a12, name = a12, constant
par a12=4692445.66804264

# Parameter:   id =  a13, name = a13, constant
par a13=4674964.61456176

# Parameter:   id =  a14, name = a14, constant
par a14=4683168.04955248

# Parameter:   id =  a0, name = a0, constant
par a0=4695759.22202785

# Parameter:   id =  i, name = i, defined by a Rule

# Parameter:   id =  kN_cte, name = kN_cte, constant
par kN_cte=5.0E-4

# Parameter:   id =  ai, name = ai, defined by a Rule

# Parameter:   id =  a15, name = a15, constant
par a15=4179504.45634779

# Parameter:   id =  min, name = min, constant
par min=4000000.0

# Parameter:   id =  max, name = max, constant
par max=5000000.0

# Parameter:   id =  FN, name = FN, defined by a Rule

# Parameter:   id =  vAPX, name = vAPX, defined by a Rule

# Parameter:   id =  MDAR, name = MDAR, constant
par MDAR=1.3

# Parameter:   id =  kcatMDAR, name = kcatMDAR, constant
par kcatMDAR=1080000.0

# Parameter:   id =  KMNADPH2, name = KM-MDAR_NADPH, constant
par KMNADPH2=23.0

# Parameter:   id =  KMMDA, name = KM_MDAR_MDA, constant
par KMMDA=1.4

# Parameter:   id =  vMDAR, name = vMDAR, defined by a Rule

# Parameter:   id =  Metabolite_17, name = Initial for APX, constant
par Metabolit=40.0

# assignmentRule: variable = vGR
vGR=kcatGR*GR*NADPH*GSSG/(KMNADPH*GSSG+KMGSSG*NADPH+NADPH*GSSG)
aux vGR=vGR

# assignmentRule: variable = vSOD
vSOD=kSOD*SOD*O2neg
aux vSOD=vSOD

# assignmentRule: variable = vDHAR
vDHAR=kcatDHAR*DHAR*DHA*GSH/(K+KMDHA*GSH+KMGSH*DHA+DHA*GSH)
aux vDHAR=vDHAR

# assignmentRule: variable = i
i=flr(t/24)
aux i=i

# assignmentRule: variable = vAPX
vAPX=k2APX*CoI*ASC+k3APX*CoII*ASC
aux vAPX=vAPX

# assignmentRule: variable = c12
c12=2*k12*NADPplus/(k11+2*k12*NADPplus+k13*MDA)
aux c12=c12

# assignmentRule: variable = c11
c11=k11/(k11+2*k12*NADPplus+k13*MDA)
aux c11=c11

# assignmentRule: variable = c13
c13=k13*MDA/(k11+2*k12*NADPplus+k13*MDA)
aux c13=c13

# assignmentRule: variable = ai
ai= piecew15 
aux ai=ai

# assignmentRule: variable = F1
F1= piecew16 
aux F1=F1

# assignmentRule: variable = F12
F12=c12*F1
aux F12=F12

# assignmentRule: variable = kN
kN=kN_cte*F12
aux kN=kN

# assignmentRule: variable = F13
F13=c13*F1
aux F13=F13

# assignmentRule: variable = F11
F11=c11*F1
aux F11=F11

# assignmentRule: variable = FN
FN=kN*NADPH
aux FN=FN

# assignmentRule: variable = vMDAR
vMDAR=kcatMDAR*MDAR*NADPH*MDA/(KMNADPH2*MDA+KMMDA*NADPH+NADPH*MDA)
aux vMDAR=vMDAR

# rateRule: variable = NADPH
init NADPH=110.000032696018
dNADPH/dt=-vGR-kN*NADPH+F12*0.5-vMDAR

# rateRule: variable = NADPplus
init NADPplus=40.0000118894612
dNADPplus/dt=vGR+kN*NADPH-F12*0.5+vMDAR

# rateRule: variable = GSH
init GSH=4000.0
dGSH/dt=2*(vGR-vDHAR-k4*O2neg*GSH-k3*DHA*GSH)

# rateRule: variable = GSSG
init GSSG=0.0
dGSSG/dt=-vGR+vDHAR+k4*O2neg*GSH+k3*DHA*GSH

# rateRule: variable = ASC
init ASC=10000.0
dASC/dt=vDHAR+k1*MDA^2+k3*DHA*GSH+F13-k2APX*ASC*CoI-k3APX*ASC*CoII-k6*O2neg*ASC-2*k5*H2O2*ASC+2*vMDAR

# rateRule: variable = DHA
init DHA=0.0
dDHA/dt=-vDHAR+k1*MDA^2-k3*DHA*GSH

# rateRule: variable = MDA
init MDA=0.0
dMDA/dt=k2APX*ASC*CoI+k3APX*ASC*CoII-2*k1*MDA^2+k6*O2neg*ASC+2*k5*H2O2*ASC-F13-2*vMDAR

# rateRule: variable = H2O2
init H2O2=0.0
dH2O2/dt=vSOD-k1APX*H2O2*APX-k4APX*H2O2*CoI+k2*O2neg^2+k6*O2neg*ASC+k4*O2neg*GSH-k5*H2O2*ASC

# rateRule: variable = APX
init APX=40.0
dAPX/dt=(-k1APX)*H2O2*APX+k3APX*ASC*CoII+k5APX*(Metabolit-APX-CoI-CoII)

# rateRule: variable = CoI
init CoI=0.0
dCoI/dt=k1APX*H2O2*APX-k2APX*ASC*CoI-k4APX*H2O2*CoI

# rateRule: variable = CoII
init CoII=0.0
dCoII/dt=k2APX*ASC*CoI-k3APX*ASC*CoII

# rateRule: variable = APXi
init APXi=0.0
dAPXi/dt=k4APX*H2O2*CoI

# rateRule: variable = O2neg
init O2neg=0.0
dO2neg/dt=(-2)*vSOD+F11-2*k2*O2neg^2-k6*O2neg*ASC-k4*O2neg*GSH

# Species:   id = NADPH, name = NADPH, involved in a rule 

# Species:   id = NADPplus, name = NADPplus, involved in a rule 

# Species:   id = GSH, name = GSH, involved in a rule 

# Species:   id = GSSG, name = GSSG, involved in a rule 

# Species:   id = ASC, name = ASC, involved in a rule 

# Species:   id = DHA, name = DHA, involved in a rule 

# Species:   id = MDA, name = MDA, involved in a rule 

# Species:   id = H2O2, name = H2O2, involved in a rule 

# Species:   id = APX, name = APX, involved in a rule 

# Species:   id = CoI, name = CoI, involved in a rule 

# Species:   id = CoII, name = CoII, involved in a rule 

# Species:   id = APXi, name = APXi, involved in a rule 

# Species:   id = O2neg, name = O2neg, involved in a rule 


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if (i  ==  14) then (a14) else (a15)

piecew2=if (i  ==  13) then (a13) else ( piecew1 )

piecew3=if (i  ==  12) then (a12) else ( piecew2 )

piecew4=if (i  ==  11) then (a11) else ( piecew3 )

piecew5=if (i  ==  10) then (a10) else ( piecew4 )

piecew6=if (i  ==  9) then (a9) else ( piecew5 )

piecew7=if (i  ==  8) then (a8) else ( piecew6 )

piecew8=if (i  ==  7) then (a7) else ( piecew7 )

piecew9=if (i  ==  6) then (a6) else ( piecew8 )

piecew10=if (i  ==  5) then (a5) else ( piecew9 )

piecew11=if (i  ==  4) then (a4) else ( piecew10 )

piecew12=if (i  ==  3) then (a3) else ( piecew11 )

piecew13=if (i  ==  2) then (a2) else ( piecew12 )

piecew14=if (i  ==  1) then (a1) else ( piecew13 )

piecew15=if (i  ==  0) then (a0) else ( piecew14 )

piecew16=if ((t  >=  (i*24)) && (t  <=  (i*24+b+incr*i))) then (ai+ai*sin(2*pi*(t-i*24)/(b+incr*i)+c_0)) else (0)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

