
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Sontag2017 - Dynamic model of immune responses to antigen presentation by tumor or pathogen
#
# is http://identifiers.org/biomodels.db/MODEL2108160001
# is http://identifiers.org/biomodels.db/BIOMD0000001030
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Rate_Law_for_u_production, name = Rate Law for u production
Rate_Law_(lambda,u)=(lambda*u)


# FunctionDefinition id = Rate_Law_for_u_consumption, name = Rate Law for u consumption
Rate_La_1(kappa,y,u)=(kappa*y*u)


# FunctionDefinition id = Rate_Law_for_x_production, name = Rate Law for x production
Rate_La_2(beta,u)=(beta*u)


# FunctionDefinition id = Rate_Law_for_y_production, name = Rate Law for y production
Rate_La_3(mu,u,x)=(mu*u/x)


# Compartment: id = Whole_organism, name = Whole_organism, constant
par Whole_org=1.0

# Parameter:   id =  lambda, name = lambda, constant
par lambda=0.0

# Parameter:   id =  kappa, name = kappa, constant
par kappa=0.0

# Parameter:   id =  delta_x, name = delta_x, constant
par delta_x=1.0

# Parameter:   id =  beta, name = beta, constant
par beta=1.0

# Parameter:   id =  mu, name = mu, constant
par mu=1.0

# Parameter:   id =  detla_y, name = detla_y, constant
par detla_y=1.0

# assignmentRule: variable = Antigen_expressing_cells
Antigen_e= piecew1 
aux Antigen_e=Antigen_e

# Reaction: id = pathogen_tumor_production, name = pathogen/tumor_production

pathogen_=Whole_org*Rate_Law_(lambda, Antigen_e)

# Reaction: id = pathogen_tumor_consumption, name = pathogen/tumor_consumption

pathoge_1=Whole_org*Rate_La_1(kappa, Effector_, Antigen_e)

# Reaction: id = regulatory_production, name = regulatory_production

regulat_1=Whole_org*Rate_La_2(beta, Antigen_e)

# Reaction: id = regulatory_consumption, name = regulatory_consumption

regulat_2=Whole_org*delta_x*Regulator

# Reaction: id = effector_production, name = effector_production

effecto_1=Whole_org*Rate_La_3(mu, Antigen_e, Regulator)

# Reaction: id = effector_consumption, name = effector_consumption

effecto_2=Whole_org*detla_y*Effector_

# Species:   id = Antigen_expressing_cells, name = Antigen-expressing_cells, involved in a rule 

# Species:   id = Regulatory_cells, name = Regulatory_cells, affected by kineticLaw

par Regulator=1.0
aux Regulator=Regulator
dRegulator/dt=(1/(Whole_org))*(( 1.0 * regulat_1) + (-1.0 * regulat_2))

# Species:   id = Effector_cells, name = Effector_cells, affected by kineticLaw

par Effector_=1.0
aux Effector_=Effector_
dEffector_/dt=(1/(Whole_org))*(( 1.0 * effecto_1) + (-1.0 * effecto_2))


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if (t  >=  100) then (t-99) else (1)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

