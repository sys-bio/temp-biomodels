
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Xu2003 - Phosphoinositide turnover
#
# is http://identifiers.org/biomodels.db/MODEL3095606944
# is http://identifiers.org/biomodels.db/BIOMD0000000075
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_PIPSyn, name = Function for PIPSyn
Function_(PI_PM,Ratebasal_PIPsyn_PIPSyn,Ratestim_PIPsyn_PIPSyn)=((Ratebasal_PIPsyn_PIPSyn+Ratestim_PIPsyn_PIPSyn)*PI_PM)


# FunctionDefinition id = Function_for_PLCact, name = Function for PLCact
Functio_1(KfPLCact,PLC_PM,PLC_act_PM,krPLCact,signal_PLCact,stim_PM)=(KfPLCact*PLC_PM*stim_PM*signal_PLCact+(-krPLCact*PLC_act_PM))


# FunctionDefinition id = Function_for_IP3_PHGFP, name = Function for IP3-PHGFP
Functio_2(IP3_Cyt,IP3_PHGFP_Cyt,KMOLE,PH_GFP_Cyt,kf_IP3PH_IP3_PHGFP,kr_IP3PH_IP3_PHGFP)=((kf_IP3PH_IP3_PHGFP*0.00166112956810631*IP3_Cyt*0.00166112956810631*PH_GFP_Cyt+(-kr_IP3PH_IP3_PHGFP*0.00166112956810631*IP3_PHGFP_Cyt))*1*1/KMOLE)


# FunctionDefinition id = Function_for_PIP2_PH, name = Function for PIP2_PH
Functio_3(PH_GFP_Cyt,PIP2_PHGFP_PM,PIP2_PM,PM,kf_PIP2PH_PIP2_PH,kr_PIP2PH_PIP2_PH)=((kf_PIP2PH_PIP2_PH*0.00166112956810631*PH_GFP_Cyt*PIP2_PM+(-kr_PIP2PH_PIP2_PH*PIP2_PHGFP_PM))*PM)


# FunctionDefinition id = Function_for_PIP2_PH_hyd, name = Function for PIP2_PH_hyd
Functio_4(PIP2_PHGFP_PM,PLC_act_PM,PM,k_PIP2PHhyd)=(k_PIP2PHhyd*PLC_act_PM*PIP2_PHGFP_PM*PM)


# FunctionDefinition id = Function_for_IP3deg, name = Function for IP3deg
Functio_5(IP3_Cyt,IP3_basal,KMOLE,kIP3deg)=(kIP3deg*(0.00166112956810631*IP3_Cyt+(-IP3_basal))*1*1/KMOLE)


# FunctionDefinition id = Function_for_PIP2Syn, name = Function for PIP2Syn
Functio_6(PIP_PM,Rate_PIP2SynStim_PIP2Syn,Rate_PIP2Synbasal_PIP2Syn)=((Rate_PIP2Synbasal_PIP2Syn+Rate_PIP2SynStim_PIP2Syn)*PIP_PM)


# FunctionDefinition id = Function_for_PIP2_hyd, name = Function for PIP2_hyd
Functio_7(PIP2_PM,PLC_act_PM,PM,k_PIP2hyd)=(k_PIP2hyd*PIP2_PM*PLC_act_PM*PM)


# Compartment: id = Extracellular, name = Extracellular, constant
par Extracell=0.277777777777778

# Compartment: id = PM, name = PM, constant
par PM=0.5555555555556

# Compartment: id = Cytosol, name = Cytosol, constant
par Cytosol=1.0

# Compartment: id = NM, name = NM, constant
par NM=0.111111111111111

# Compartment: id = Nucleus, name = Nucleus, constant
par Nucleus=0.111111111111111

# Parameter:   id =  KMOLE, name = KMOLE, constant
par KMOLE=0.00166112956810631

# Parameter:   id =  PIP_basal_PIPSyn, name = PIP_basal_PIPSyn, constant
par PIP_basal=2857.0

# Parameter:   id =  kBasalSynPIP_PIPSyn, name = kBasalSynPIP_PIPSyn, constant
par kBasalSyn=0.0055

# Parameter:   id =  kStimSynPIP_PIPSyn, name = kStimSynPIP_PIPSyn, constant
par kStimSynP=0.019

# Parameter:   id =  tauPIPsyn_PIPSyn, name = tauPIPsyn_PIPSyn, constant
par tauPIPsyn=0.05

# Parameter:   id =  PIPsyndecay_PIPSyn, name = PIPsyndecay_PIPSyn, constant
par PIPsyndec=1.0

# Parameter:   id =  Ratebasal_PIPsyn_PIPSyn, name = Ratebasal_PIPsyn_PIPSyn, defined by a Rule

# Parameter:   id =  Ratestim_PIPsyn_PIPSyn, name = Ratestim_PIPsyn_PIPSyn, defined by a Rule

# Parameter:   id =  tau0_PLCact, name = tau0_PLCact, constant
par tau0_PLCa=0.05

# Parameter:   id =  stimdecay_PLCact, name = stimdecay_PLCact, constant
par stimdecay=1.0

# Parameter:   id =  signal_PLCact, name = signal_PLCact, defined by a Rule

# Parameter:   id =  kf_PIP2PH_PIP2_PH, name = kf_PIP2PH_PIP2_PH, constant
par kf_PIP2PH=0.12

# Parameter:   id =  KdPIP2PH_PIP2_PH, name = KdPIP2PH_PIP2_PH, constant
par KdPIP2PH_=2.0

# Parameter:   id =  kr_PIP2PH_PIP2_PH, name = kr_PIP2PH_PIP2_PH, defined by a Rule

# Parameter:   id =  kStimSynPIP2_PIP2Syn, name = kStimSynPIP2_PIP2Syn, constant
par kStimSy_1=0.92

# Parameter:   id =  tauPIP2syn_PIP2Syn, name = tauPIP2syn_PIP2Syn, constant
par tauPIP2sy=0.05

# Parameter:   id =  PIP2syndecay_PIP2Syn, name = PIP2syndecay_PIP2Syn, constant
par PIP2synde=1.0

# Parameter:   id =  PIP2_basal_PIP2Syn, name = PIP2_basal_PIP2Syn, constant
par PIP2_basa=4000.0

# Parameter:   id =  kBasalSynPIP2_PIP2Syn, name = kBasalSynPIP2_PIP2Syn, constant
par kBasalS_1=0.048

# Parameter:   id =  Rate_PIP2Synbasal_PIP2Syn, name = Rate_PIP2Synbasal_PIP2Syn, defined by a Rule

# Parameter:   id =  Rate_PIP2SynStim_PIP2Syn, name = Rate_PIP2SynStim_PIP2Syn, defined by a Rule

# Parameter:   id =  kf_IP3PH_IP3_PHGFP, name = kf_IP3PH_IP3_PHGFP, constant
par kf_IP3PH_=10.0

# Parameter:   id =  KdIP3PH_IP3_PHGFP, name = KdIP3PH_IP3_PHGFP, constant
par KdIP3PH_I=2.0

# Parameter:   id =  kr_IP3PH_IP3_PHGFP, name = kr_IP3PH_IP3_PHGFP, defined by a Rule

# assignmentRule: variable = Rate_PIP2SynStim_PIP2Syn
Rate_PI_1= piecew1 
aux Rate_PI_1=Rate_PI_1

# assignmentRule: variable = signal_PLCact
signal_PL= piecew2 
aux signal_PL=signal_PL

# assignmentRule: variable = Rate_PIP2Synbasal_PIP2Syn
Rate_PIP2= piecew3 
aux Rate_PIP2=Rate_PIP2

# assignmentRule: variable = kr_PIP2PH_PIP2_PH
kr_PIP2PH=kf_PIP2PH*KdPIP2PH_
aux kr_PIP2PH=kr_PIP2PH

# assignmentRule: variable = kr_IP3PH_IP3_PHGFP
kr_IP3PH_=kf_IP3PH_*KdIP3PH_I
aux kr_IP3PH_=kr_IP3PH_

# assignmentRule: variable = Ratestim_PIPsyn_PIPSyn
Ratestim_= piecew4 
aux Ratestim_=Ratestim_

# assignmentRule: variable = Ratebasal_PIPsyn_PIPSyn
Ratebasal= piecew5 
aux Ratebasal=Ratebasal

# Reaction: id = PIPSyn, name = PIPSyn

PIPSyn=PM*Function_(PI_PM, Ratebasal, Ratestim_)

# Reaction: id = PIP2_hyd, name = PIP2_hyd
# Local Parameter:   id =  k_PIP2hyd, name = k_PIP2hyd
par k_PIP2hyd=2.4


PIP2_hyd=Functio_7(PIP2_PM, PLC_act_P, PM, k_PIP2hyd)

# Reaction: id = PLCact, name = PLCact
# Local Parameter:   id =  KfPLCact, name = KfPLCact
par KfPLCact=5.0E-4

# Local Parameter:   id =  krPLCact, name = krPLCact
par krPLCact=0.1


PLCact=PM*Functio_1(KfPLCact, PLC_PM, PLC_act_P, krPLCact, signal_PL, stim_PM)

# Reaction: id = PIP2_PH_hyd, name = PIP2_PH_hyd
# Local Parameter:   id =  k_PIP2PHhyd, name = k_PIP2PHhyd
par k_PIP2PHh=0.0


PIP2_PH_h=Functio_4(PIP2_PHGF, PLC_act_P, PM, k_PIP2PHh)

# Reaction: id = PIP2_PH, name = PIP2_PH

PIP2_PH=Functio_3(PH_GFP_Cy, PIP2_PHGF, PIP2_PM, PM, kf_PIP2PH, kr_PIP2PH)

# Reaction: id = IP3deg, name = IP3deg
# Local Parameter:   id =  IP3_basal, name = IP3_basal
par IP3_basal=0.16

# Local Parameter:   id =  kIP3deg, name = kIP3deg
par kIP3deg=0.08


IP3deg=Cytosol*Functio_5(IP3_Cyt, IP3_basal, KMOLE, kIP3deg)

# Reaction: id = PIP2Syn, name = PIP2Syn

PIP2Syn=PM*Functio_6(PIP_PM, Rate_PI_1, Rate_PIP2)

# Reaction: id = IP3_PHGFP, name = IP3-PHGFP

IP3_PHG_1=Cytosol*Functio_2(IP3_Cyt, IP3_PHGFP, KMOLE, PH_GFP_Cy, kf_IP3PH_, kr_IP3PH_)

# Species:   id = PIP2_PHGFP_PM, name = PIP2_PHGFP_PM, affected by kineticLaw

par PIP2_PHGF=0.0
aux PIP2_PHGF=PIP2_PHGF
dPIP2_PHGF/dt=(1/(PM))*((-1.0 * PIP2_PH_h) + ( 1.0 * PIP2_PH))

# Species:   id = PH_GFP_Cyt, name = PH_GFP_Cyt, affected by kineticLaw

par PH_GFP_Cy=0.0
aux PH_GFP_Cy=PH_GFP_Cy
dPH_GFP_Cy/dt=(1/(Cytosol))*(( 1.0 * PIP2_PH_h) + (-1.0 * PIP2_PH) + (-1.0 * IP3_PHG_1))

# Species:   id = PI_PM, name = PI_PM, affected by kineticLaw

init PI_PM=142857.0
dPI_PM/dt=(1/(PM))*((-1.0 * PIPSyn))

# Species:   id = stim_PM, name = stim_PM, constant
par stim_PM=1.0


# Species:   id = IP3_PHGFP_Cyt, name = IP3_PHGFP_Cyt, affected by kineticLaw

par IP3_PHGFP=0.0
aux IP3_PHGFP=IP3_PHGFP
dIP3_PHGFP/dt=(1/(Cytosol))*(( 1.0 * IP3_PHG_1))

# Species:   id = PIP2_PM, name = PIP2_PM, affected by kineticLaw

init PIP2_PM=4000.0
dPIP2_PM/dt=(1/(PM))*((-1.0 * PIP2_hyd) + (-1.0 * PIP2_PH) + ( 1.0 * PIP2Syn))

# Species:   id = PIP_PM, name = PIP_PM, affected by kineticLaw

init PIP_PM=2857.0
dPIP_PM/dt=(1/(PM))*(( 1.0 * PIPSyn) + (-1.0 * PIP2Syn))

# Species:   id = DAG_PM, name = DAG_PM, affected by kineticLaw

init DAG_PM=2000.0
dDAG_PM/dt=(1/(PM))*(( 1.0 * PIP2_hyd) + ( 1.0 * PIP2_PH_h))

# Species:   id = hv_Cytosol, name = hv_Cytosol, constant
par hv_Cytoso=0.0


# Species:   id = IP3X_Cytosol, name = IP3X_Cytosol, constant
par IP3X_Cyto=0.0


# Species:   id = PLC_PM, name = PLC_PM, affected by kineticLaw

init PLC_PM=100.0
dPLC_PM/dt=(1/(PM))*((-1.0 * PLCact))

# Species:   id = PLC_act_PM, name = PLC_act_PM, affected by kineticLaw

par PLC_act_P=0.0
aux PLC_act_P=PLC_act_P
dPLC_act_P/dt=(1/(PM))*(( 1.0 * PLCact))

# Species:   id = IP3_Cyt, name = IP3_Cyt, affected by kineticLaw

init IP3_Cyt=96.32
dIP3_Cyt/dt=(1/(Cytosol))*(( 1.0 * PIP2_hyd) + ( 1.0 * PIP2_PH_h) + (-1.0 * IP3deg) + (-1.0 * IP3_PHG_1))


# Piecewise functions : the mathML piecewise element is transformed into if/then/else expression

piecew1=if (t  >  tauPIP2sy) then (kStimSy_1*exp(-(t+(-tauPIP2sy))*1/PIP2synde)) else (0)

piecew2=if (t  >  tau0_PLCa) then (exp(-(t+(-tau0_PLCa))*1/stimdecay)) else (0)

piecew3=if (PIP2_PM  <  PIP2_basa) then (0.581*kBasalS_1*(-1+exp((PIP2_basa+(-PIP2_PM))*1/PIP2_basa))) else (0)

piecew4=if (t  >  tauPIPsyn) then (kStimSynP*exp(-(t+(-tauPIPsyn))*1/PIPsyndec)) else (0)

piecew5=if (PIP_PM  <  PIP_basal) then (0.581*kBasalSyn*(-1+exp((PIP_basal+(-PIP_PM))*1/PIP_basal))) else (0)


@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

